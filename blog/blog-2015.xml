<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.3.1" created="2015-11-29 06:15" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>They Call Me Mister James</title>
	<link>http://jameschambers.com</link>
	<description>Building the Web on the Cloud (and other musings)</description>
	<pubDate>Sun, 29 Nov 2015 06:15:57 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://jameschambers.com</wp:base_site_url>
	<wp:base_blog_url>http://jameschambers.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>james.chambers</wp:author_login><wp:author_email>james@jameschambers.com</wp:author_email><wp:author_display_name><![CDATA[james.chambers]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.3.1</generator>

	<item>
		<title>A Lap Around Azure Websites</title>
		<link>http://jameschambers.com/2015/01/a-lap-around-azure-websites/</link>
		<pubDate>Tue, 13 Jan 2015 02:40:19 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5141</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you haven’t yet started your free trial of Azure Websites – or even if it’s been a while since you have – you might be surprised to find out just how rich the offering has become. Rather than trying to catch up on your own, invest one day of time into yourself on January 14th!</p> <p align="center"><a href="http://bit.ly/websiteslap">Register For The Free, Live Event Here!</a></p> <p align="center"><a href="http://bit.ly/websiteslap"><img title="image" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; margin: 0px; display: inline; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/01/image.png" width="240" align="right" height="73"></a></p> <p>I am thrilled to be joining the two excellent presenters – <a href="https://twitter.com/jongalloway">Jon Galloway</a> and <a href="https://twitter.com/cfowlerMSFT">Cory Fowler</a> – on Microsoft Virtual Academy as a Community Expert to help answer questions through the day. You’ll find me in the chat room, directing you to resources, answering questions and, heck, I might even craft up a sample or two along the way. :)</p> <p><strong><em>UPDATE</em></strong>: I have posted all the links and questions/answers that came up through the session, be sure to check out the <a href="http://bit.ly/AzureLapQuestions" target="_blank">full list here</a>.</p>  <h2>Some Background and Some Present Day</h2> <p>It wasn’t too long ago that Azure Websites was an obscure beast in the cloud mix, with awkward deployment requirements, limited language and platform options and plenty of alternatives that required far less effort with better scaling options.</p> <p>Today’s Azure Websites’ in equally suitable for greenfield development start-ups, enterprise migrations and hobby sites. A myriad of languages, web stacks, versatility in DB connections, a great deployment story and full integration with the world’s best IDE makes Websites a legitimate consideration for your next – or first – project.</p> <p><a href="http://bit.ly/websiteslap">Catch you online</a>!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5141</wp:post_id>
		<wp:post_date>2015-01-13 02:40:19</wp:post_date>
		<wp:post_date_gmt>2015-01-13 02:40:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-lap-around-azure-websites</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781788529]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>There is Something you Want to Know. So Learn it.</title>
		<link>http://jameschambers.com/2015/01/there-is-something-you-want-to-know-so-learn-it/</link>
		<pubDate>Tue, 13 Jan 2015 23:49:23 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5171</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Students, especially, take note of this because you can get all the tools for free, so this is a great way to kick-start your career. This kind of learning was not available, much less for free when I was a kid.</p> <p><a href="http://bit.ly/learnGameDev" target="_blank"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/01/image3.png" width="477" height="262"></a></p> <p>That’s it. An email address. That’s all you need to get started.</p> <p>Of course, this isn’t an offering limited to students, so for you seasoned vets, give up on that treadmill and commit to four weeks of levelling up.</p> <p>Okay peeps, <a href="http://bit.ly/learnGameDev" target="_blank">go rock some awesome</a>!</p> <p><strong><em>Shameless plug</em></strong>: if you’re wanting to ramp up your web-dev skills and get in on a 30 day challenge, be sure to <a href="http://jameschambers.com/2014/08/30-days-of-bootstrap-and-asp-net-mvc-5/" target="_blank">check out my book</a> on Bootstrap and the MVC Framework with tons of tips on CSS, JS, jQuery, and ASP.NET’s MVC 5. Each chapter is in digestible snippets that you can rock out in usually 15 minutes or less.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5171</wp:post_id>
		<wp:post_date>2015-01-13 23:49:23</wp:post_date>
		<wp:post_date_gmt>2015-01-13 23:49:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>there-is-something-you-want-to-know-so-learn-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mva"><![CDATA[MVA]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781788711]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Day 0: 8 Days of Working With Azure Table Storage from ASP.NET MVC 5</title>
		<link>http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/</link>
		<pubDate>Wed, 14 Jan 2015 03:59:35 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5231</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here's a short and simple way to get started using Azure Table Storage from ASP.NET MVC 5. Following these brief, task-oriented articles will help you learn the mechanics of working with table storage and give you some pointers on how you might want to approach it in your app.</p>
<p>We're going to start with the basics, a simple MVC app with a controller that builds the table, inserts a couple of rows and then displays them.</p>
<p class="side-note">If you want to follow along, please <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">pop into Azure</a> and make sure you’ve got an account ready to go. The trial is free, so get at it!</p>
<p>But then we're going to expand on that, adding other operations to manipulate the data as well as the tables themselves, and then we'll take it to the next level where we start to apply some better strategies around how we actually access the data.&nbsp; After all, MVC is all about separation of concerns!</p>
<p>Most of these principles will apply if you need to access a storage table from other areas of .NET as well…you could just as easily apply these to Web API, a console application or your next WinForms project. By the end, we’ll have extracted the important parts out into a reusable block of code that runs equally as well with the Azure Storage Emulator in your development environment as it does in production in the cloud.</p>
<h2>Working With Azure Table Storage – Our Agenda</h2>
<ul>
<li>Day 1: <a title="Day 1 &ndash; The Basics of the Basics with Azure Table Storage" href="http://jameschambers.com/2015/01/day-1-the-basics-of-the-basics-with-azure-table-storage/">The Basics of The Basics with Azure Table Storage</a>
<li>Day 2: <a href="http://jameschambers.com/2015/01/day-2-adding-entities-to-a-storage-account-table/" target="_blank">Adding Entities to a Storage Account Table</a>
<li>Day 3: <a href="http://jameschambers.com/2015/07/day-3-extracting-a-service-to-interact-with-azure-table-storage/" target="_blank">Extracting a Service to Interact with Table Storage</a>
<li>Day 4: Manipulating Entities in a Storage Account Table
<li>Day 5: Deleting Entities from a Storage Account Table
<li>Day 6: Using Projection with Dynamic TableEntity and EntityResolver
<li>Day 7: Table Management in your Storage Account
<li>Day 8: Cloud Configuration and Deployment </li>
</ul>
<p>Check back for more on the series in the days ahead, all the links will be posted here.</p>
<p>And hey, if you’d like to ramp up in your MVC skills, please check out my recent book:</p>
<p><a title="Bootstrapping MVC - THE eBook for developers using Bootstrap on MVC" href="https://leanpub.com/bootstrappingmvc" target="_blank"><img width="615" height="90" title="banner5" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="banner5" src="http://jameschambers.com/wp-content/uploads/2014/09/banner5.png" border="0"></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5231</wp:post_id>
		<wp:post_date>2015-01-14 03:59:35</wp:post_date>
		<wp:post_date_gmt>2015-01-14 03:59:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="8daysoftablestorage"><![CDATA[8DaysOfTableStorage]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="table-storage"><![CDATA[Table Storage]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208276]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39351</wp:comment_id>
			<wp:comment_author><![CDATA[Day 2 &ndash; Adding Entities to a Storage Account Table | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/01/day-2-adding-entities-to-a-storage-account-table/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.56</wp:comment_author_IP>
			<wp:comment_date>2015-01-21 00:49:55</wp:comment_date>
			<wp:comment_date_gmt>2015-01-21 00:49:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] this series we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39551</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>mbest@live.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.7.160.175</wp:comment_author_IP>
			<wp:comment_date>2015-02-18 21:52:24</wp:comment_date>
			<wp:comment_date_gmt>2015-02-18 21:52:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, at the end of your series, it would be great to take a look from a 'business' perspective.  Where does it make sense to use Table Storage vs SQL Azure?  What are the general costs of adding/using Table Storage to your Azure account (do you have any experience with what 'ballpark' additional costs might be incurred for a small company adding on Table Storage?)   All these Azure technologies are great but no one ever talks about real world costs and the Azure online calculator is beyond useless.  Any insight /suggestions /recommendations would be great!  

We always appreciate your posts James!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812545]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39601</wp:comment_id>
			<wp:comment_author><![CDATA[Links of the month (February Edition) | Jan @ Development]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://janatdevelopment.com/2015/02/28/links-of-the-month-february-edition-2015/</wp:comment_author_url>
			<wp:comment_author_IP>66.155.38.25</wp:comment_author_IP>
			<wp:comment_date>2015-02-28 21:07:06</wp:comment_date>
			<wp:comment_date_gmt>2015-02-28 21:07:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 8 Days of Working With Azure Table Storage from ASP.NET MVC 5 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39611</wp:comment_id>
			<wp:comment_author><![CDATA[Amos]]></wp:comment_author>
			<wp:comment_author_email>amos@amosolson.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>96.31.124.251</wp:comment_author_IP>
			<wp:comment_date>2015-03-01 20:21:15</wp:comment_date>
			<wp:comment_date_gmt>2015-03-01 20:21:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am excited for this series!  Thank you so much for all the content you provide for your fellow developers, your posts have been very helpful (the 30 Days of Bootstrap series is amazing).  Thanks again, I look forward to the rest of these Azure Table posts!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812543]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40011</wp:comment_id>
			<wp:comment_author><![CDATA[Day 1 &ndash; The Basics of the Basics with Azure Table Storage | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/01/day-1-the-basics-of-the-basics-with-azure-table-storage/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.50</wp:comment_author_IP>
			<wp:comment_date>2015-04-20 21:32:50</wp:comment_date>
			<wp:comment_date_gmt>2015-04-20 21:32:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] this series we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40931</wp:comment_id>
			<wp:comment_author><![CDATA[Day 3 &ndash; Extracting a Service to Interact with Azure Table Storage | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/07/day-3-extracting-a-service-to-interact-with-azure-table-storage/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.50</wp:comment_author_IP>
			<wp:comment_date>2015-07-18 14:33:13</wp:comment_date>
			<wp:comment_date_gmt>2015-07-18 14:33:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] this series we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40941</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-18 14:30:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-18 14:30:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great thoughts, Mike, thanks! I'll have a look at adding this in at the end!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39551</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812545]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2143721318]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40951</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-18 14:30:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-18 14:30:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for reading and following along in these posts :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39611</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812543]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2143721895]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 1 &#8211; The Basics of the Basics with Azure Table Storage</title>
		<link>http://jameschambers.com/2015/01/day-1-the-basics-of-the-basics-with-azure-table-storage/</link>
		<pubDate>Wed, 14 Jan 2015 13:50:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5271</guid>
		<description></description>
		<content:encoded><![CDATA[<p><i>In <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/" target="_blank">this series</a> we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 Application, using the Visual Studio 2013 IDE and Microsoft Azure infrastructure.</i> </p> <h4>Before We Get Going…</h4> <p>Let’s not mince words here, the best way to develop in the cloud is with the best and most up-to-date toolset that we have available. You’re going to want to grab these prerequisites as a minimum foundation for following along in this series:  <ul> <li>An Azure subscription (or a <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">free trial</a>) <li>A copy of Visual Studio 2013 – remember that the community edition is free if you don’t own a copy! (<a href="http://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx">http://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx</a>)  <li>The latest Azure SDK for Visual Studio (<a href="http://azure.microsoft.com/en-us/develop/net/">http://azure.microsoft.com/en-us/develop/net/</a>)</li></ul> <p>Visual Studio 2013 gives us great templates to start from and by augmenting it with the SDK we also get a rich set of cloud-management features, which we’ll explore in the later parts of the series.  <h4>The Straight-Up Attack: Accessing Table Storage from Your Controller</h4> <p>Follow these quick steps to get started:  <ul> <li>Create a new solution in Visual Studio using the ASP.NET Web Application project template  <li>Right-click on your project in Solution Explorer, then Manage NuGet Packages and add “WindowsAzure.Storage” to your dependencies.  <li>Alternatively, you can install the package from the Package Manager Console with the following command: <pre>Install-Package WindowsAzure.Storage</pre></li></ul>
<p>The project is now prepped, so now we can add the needed code bits to start building our app. Let’s start by adding the following class to our project in the Models folder: </p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> KittehEntity : TableEntity
{
    <span class="kwrd">public</span> KittehEntity(<span class="kwrd">string</span> kittehType, <span class="kwrd">string</span> kittehName)
    {
        <span class="kwrd">this</span>.PartitionKey = kittehType;
        <span class="kwrd">this</span>.RowKey = kittehName;
    }

    <span class="kwrd">public</span> KittehEntity() {}

    <span class="kwrd">public</span> <span class="kwrd">string</span> ImageUrl { get; set; }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Next, replace the code in the HomeController with the code below. Note that you’ll need to add the namespace for the models to the usings at the top. </p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Index()
{
    var storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting(<span class="str">"StorageConnectionString"</span>));

    var client = storageAccount.CreateCloudTableClient();

    var kittehTable = client.GetTableReference(<span class="str">"PicturesOfKittehs"</span>);
    <span class="kwrd">if</span> (!kittehTable.Exists())
    {
        kittehTable.Create();
                
        var thrillerKitteh = <span class="kwrd">new</span> KittehEntity(<span class="str">"FunnyKittehs"</span>, <span class="str">"ThrillerKitteh"</span>);
        thrillerKitteh.ImageUrl = <span class="str">"http://cdn.buzznet.com/assets/users16/crizz/default/funny-pictures-thriller-kitten-impresses--large-msg-121404159787.jpg"</span>;

        var pumpkinKitteh = <span class="kwrd">new</span> KittehEntity(<span class="str">"FunnyKittehs"</span>, <span class="str">"PumpkinKitteh"</span>);
        pumpkinKitteh.ImageUrl = <span class="str">"http://rubmint.com/wp-content/plugins/wp-o-matic/cache/6cb1b_funny-pictures-colur-blind-kitteh-finded-yew-a-pumikin.jpg"</span>;

        var batchOperation = <span class="kwrd">new</span> TableBatchOperation();

        batchOperation.Insert(thrillerKitteh);
        batchOperation.Insert(pumpkinKitteh);
        kittehTable.ExecuteBatch(batchOperation);

    }

    var kittehQuery = <span class="kwrd">new</span> TableQuery&lt;KittehEntity&gt;()
        .Where(TableQuery.GenerateFilterCondition(<span class="str">"PartitionKey"</span>, QueryComparisons.Equal, <span class="str">"FunnyKittehs"</span>));

    var kittehs = kittehTable.ExecuteQuery(kittehQuery).ToList();

    <span class="kwrd">return</span> View(kittehs);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Admittedly, this is a bit of a naive approach because we’re mixing concerns here and putting storage access and table seeding in a single controller method, but I want to highlight the premise here without adding too much cruft. Through the rest of the series we’ll extract a service to do the heavy lifting and move back towards best practices. 
<p>What we’re doing above is the following: 
<ul>
<li>Reading the connection string from our web.config 
<li>Configuring the client 
<li>Getting a reference to a table 
<li>If the table doesn’t exist (it won’t, first time), we build a batch operation and seed it with some data 
<li>We fetch all records with a “FunnyKittehs” partition key 
<li>We pass the data to the view</li></ul>
<p>Now, replace the code in the Views\Home\Index.cshtml with the following: </p><pre class="csharpcode">@model IEnumerable&lt;YourNamespace.Models.KittehEntity&gt;
@{
    ViewBag.Title = <span class="str">"Home Page"</span>;
}

@<span class="kwrd">foreach</span> (var kitteh <span class="kwrd">in</span> Model)
{
    &lt;div <span class="kwrd">class</span>=<span class="str">"jumbotron"</span>&gt;
        &lt;h4&gt;@kitteh.RowKey&lt;/h4&gt;
        &lt;img src=<span class="str">"@kitteh.ImageUrl"</span> /&gt;
    &lt;/div&gt;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Note that you’ll need to update the namespace to match your project’s. 
<p>Finally, add a connection string to the AppSettings section of your web.config. This will tell our app to use the local storage emulator provided by the SDK. </p><pre class="csharpcode">&lt;appSettings&gt;
  &lt;!-- other settings... --&gt;
  &lt;add key=<span class="str">"StorageConnectionString"</span> <span class="kwrd">value</span>=<span class="str">"UseDevelopmentStorage=true;"</span> /&gt;
&lt;/appSettings&gt;</pre>
<p>Finally, run the app! You should see a couple of adorable kittehs in your browser, rendered in a razor view, with data populated by the MVC controller with entities loaded from Azure Storage Tables. 
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h4>Next Steps</h4>
<p>In this post we injected a few entities into our table using a seed method, but what about adding new entities from the UI? In the next article, we’ll beef up the views and controller to allow users to add new documents to our storage account. 
<p><em>(Psst! If you’re just getting started with MVC and want to get your hands <u>real</u> dirty, check out my book on </em><a href="http://jameschambers.com/2014/08/30-days-of-bootstrap-and-asp-net-mvc-5/" target="_blank"><em>Bootstrap and the MVC Framework</em></a><em>).</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5271</wp:post_id>
		<wp:post_date>2015-01-14 13:50:00</wp:post_date>
		<wp:post_date_gmt>2015-01-14 13:50:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-1-the-basics-of-the-basics-with-azure-table-storage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="8daysoftablestorage"><![CDATA[8DaysOfTableStorage]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208068]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39391</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Bonham]]></wp:comment_author>
			<wp:comment_author_email>robert.bonham@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.109.247.45</wp:comment_author_IP>
			<wp:comment_date>2015-01-25 01:47:03</wp:comment_date>
			<wp:comment_date_gmt>2015-01-25 01:47:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Another Great Series, I'm looking forward to all of it.

Just to help anyone else new to the Azure SDK...

When I first ran this code I got an error :Unable to connect to the remote server

This is because the Storage emulator wasn't started on my machine

This command starts the emulator.
WAStorageEmulator.exe start 

using WAStorageEmulator.exe /? will get the other commands for using the emulator

Robert]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812371]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39561</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; February 19, 2015 (#1958) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/02/19/dew-drop-february-19-2015-1958/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.19</wp:comment_author_IP>
			<wp:comment_date>2015-02-19 13:24:56</wp:comment_date>
			<wp:comment_date_gmt>2015-02-19 13:24:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 1 – The Basics of the Basics with Azure Table Storage (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40781</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-08 14:28:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-08 14:28:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this, Robert. 

Just a note that with the latest Azure tooling, to start the storage emulator you can just tap your Windows key, then type "Storage" and it should show up. Alternatively, you can navigate to the Azure SDK install path at Program Files (x86)Microsoft SDKsAzure and then start AzureStorageEmulator from the Storage Emulator folder.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39391</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812371]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2123690422]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Microsoft Virtual Academy &#8211; A Lap Around Azure Websites - All the Questions and Links From the Talk</title>
		<link>http://jameschambers.com/2015/01/microsoft-virtual-academy-a-lap-around-azure-websites-all-the-questions-and-links-from-the-talk/</link>
		<pubDate>Wed, 14 Jan 2015 19:51:01 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5311</guid>
		<description></description>
		<content:encoded><![CDATA[<p>On January 14th, 2015 Jon Galloway and Cory Fowler presented a live “Lap Around Azure Websites” on Microsoft Virtual Academy. I was the online “Community Expert” for the live event and fielded questions in the chat. </p> <h2>The Links Shared from the Session</h2> <p>Some questions were more easily answered just by sharing a link! Here are the links that I mentioned in the chat or that were cited by Jon and Cory:</p> <ul> <li>Free trial of <a href="http://try.azurewebsites.net?prid=ca_DevMVP_JC" target="_blank">Azure Websites</a>  <li>An article on <a href="http://blogs.technet.com/b/keithmayer/archive/2013/01/20/step-by-step-extending-on-premise-active-directory-to-the-cloud-with-windows-azure-31-days-of-servers-in-the-cloud-part-20-of-31.aspx?prid=ca_DevMVP_JC" target="_blank">extending AD to the cloud</a>  <li>Download of the <a href="http://azure.microsoft.com/blog/2014/11/12/announcing-azure-sdk-2-5-for-net-and-visual-studio-2015-preview/?prid=ca_DevMVP_JC" target="_blank">Azure SDK</a> (multi-VS versions available)  <li>Azure Websites <a href="http://azure.microsoft.com/blog/2014/11/13/azure-websites-authentication-authorization?prid=ca_DevMVP_JC" target="_blank">authentication using Active Directory</a>  <li>Scott Guthrie's <a href="http://weblogs.asp.net/scottgu/free-ebook-building-cloud-apps-with-microsoft-azure?prid=ca_DevMVP_JC" target="_blank">eBook</a> on cloud development  <li>The Azure <a href="http://azure.microsoft.com/en-us/documentation/articles/install-configure-powershell/?prid=ca_DevMVP_JC" target="_blank">PowerShell reference</a> documentation  <li>Activating your <a href="http://azure.microsoft.com/en-us/pricing/member-offers/msdn-benefits/?prid=ca_DevMVP_JC" target="_blank">MSDN Subscriber Benefits</a> for Azure  <li>Configuring on-prem TFS for <a href="http://www.codewrecks.com/blog/index.php/2013/07/05/deploying-on-azure-web-sites-from-on-premise-tfs/" target="_blank">Azure deployment</a>  <li>Kudu and <a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script" target="_blank">customizing your deployment script</a> for Azure Websites  <li>Node.js <a href="http://nodejstools.codeplex.com/" target="_blank">tooling</a>  <li>Cory Fowler’s most excellent Azure Websites <a href="http://microsoftazurewebsitescheatsheet.info" target="_blank">cheatsheet</a>  <li>Use <a href="https://windows.github.com/" target="_blank">GitHub for Windows</a>  <li>Leveraging webhooks with <a href="https://github.com/projectkudu/kudu/wiki/Web-hooks" target="_blank">Kudu</a>  <li>Configuring <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/?prid=ca_DevMVP_JC#AboutConfiguration" target="_blank">deployment slots</a> in Azure Websites  <li>Host Azure Websites on-prem with <a href="http://www.microsoft.com/en-ca/server-cloud/products/windows-azure-pack/?prid=ca_DevMVP_JC" target="_blank">Azure Pack</a>  <li>Testing in Production <a href="http://azure.microsoft.com/en-gb/documentation/articles/web-sites-staged-publishing/?prid=ca_DevMVP_JC" target="_blank">documentation</a>  <li><a href="https://github.com/SignalR/SignalR" target="_blank">SignalR</a> powers the Kudu in-browser console  <li>Great resources on <a href="http://azure.microsoft.com/en-us/documentation/articles/websites-webjobs-resources/?prid=ca_DevMVP_JC" target="_blank">Azure Web Jobs</a>  <li><a href="http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/maintainable-azure-websites-managing-change-and-scale?prid=ca_DevMVP_JC" target="_blank">Manage scale</a> on your website  <li><a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-backup/?prid=ca_DevMVP_JC" target="_blank">Website backups</a> in Azure  <li><a href="http://www.asp.net/mvc/overview/security?prid=ca_DevMVP_JC" target="_blank">Authentication for ASP.NET apps</a> on Azure Websites  <li>Hybrid connection <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-hybrid-connection-connect-on-premises-sql-server/?prid=ca_DevMVP_JC" target="_blank">walkthrough</a> for connecting to on-prem DBs  <li>The <a href="http://channel9.msdn.com/Shows/Cloud+Cover?prid=ca_DevMVP_JC" target="_blank">Cloud Cover</a> show on Channel 9</li></ul> <p>As well, here are some other really great MVA sessions you should take advantage of:</p> <ul> <li>Building Apps with Node.js Jump Start (<a href="http://www.microsoftvirtualacademy.com/training-courses/building-apps-with-node-js-jump-start?prid=ca_DevMVP_JC" target="_blank">Course</a>)  <li>Introduction to Creating Websites Using Python and Flask (<a href="http://www.microsoftvirtualacademy.com/training-courses/introduction-to-creating-websites-using-python-and-flask?prid=ca_DevMVP_JC" target="_blank">Course</a>)  <li>What’s New in Visual Studio 2013 Jump Start (<a href="http://www.microsoftvirtualacademy.com/training-courses/what-s-new-in-visual-studio-2013-jump-start?prid=ca_DevMVP_JC" target="_blank">Course</a>) <li>Microsoft Azure Fundamentals (<a href="http://www.microsoftvirtualacademy.com/training-courses/microsoft-azure-fundamentals?prid=ca_DevMVP_JC" target="_blank">Course</a>)</li></ul> <p>And, if you’re into the whole reading thing, I <a href="http://amzn.to/1bnErSs" target="_blank">published a book on Azure Websites</a> that is still really relevant, in spite of all the new features and changes the portal’s seen.</p> <h2>The Common and Predominant Questions</h2> <p>I grabbed the questions that stood out the most from the chat and am posting them below, along with my answers.</p> <p><strong><em>Can Javascript run on .NET platform also?</em></strong><br>No, JavaScript doesn't run natively on .NET. But Azure != .NET, and Azure Web Sites has many options for web stacks, including Node.js. Remember that JS has traditionally been a client-side language, so it of course can be used in any web application created with .NET</p> <p><strong><em>Do we need SDK's and command line tools with Visual Studio 2015 Preview.</em></strong><br>No, you don't need it. But the SDK adds some extra (really useful) tooling, and the command line tools gives you options from a console or PowerShell script. </p> <p><strong><em>What are your thoughts on using WebMatrix? How does it compare to VS in terms of workflows you are going to talk about?</em></strong><br>WebMatrix is a great tool for working with non-.Net stacks and has language support beyond what you'll find in VS. However, if you're working with .NET langauges (as well as many other non-.NET languages), VS gives you probably the IDE experience, hands-down. </p> <p><strong><em>When signing up for the free trial on Azure Websites it still asks me for entering my credit card details on the trial registration page. Is it going to charge me?</em></strong><br>Even if they do collect the CC info, there will no charges. By default there is a spending limit of $0 on your account. Unless you remove that, there will not be any charges incurred. You can sign up with confidence!</p> <p><strong><em>How can you deploy to two Azure websites? One for Staging and another one for Production.</em></strong><br>The easiest way is to use two different branches in source control, then you can automate everything about deployment to two entirely different websites. You can use slots and swapping to help with this.</p> <p><strong><em>My trial period has expired and I have converted my subscription to Pay-As-You-Go subscription. When will I have to pay something?</em></strong><br>You'll have to pay if you want to start adding "real-world" value to your project. Things like scaling, dedicated domain names, load balancing and the like.</p> <p><strong><em>Are MySQL databases hosted on Azure the same as SQL server? What's the deal with these 3rd party partners? How is it different?</em></strong><br>The third-party DB providers are from partners that may or may not use Azure resources. They provide an integration mechanism with Azure, but don't necessarily spin up Azure resources. With MySQL, you just need a connection string to get at the data. It is not hosted on the same server as Azure SQL. And in the case of ClearDB, they are actually hosted on an Azure cluster.</p> <p><strong><em>Should a team have their GIT repository in VS online or Azure for an Azure site?<br></em></strong>There is no preference. In fact, I have on-prem git repos, VS Online hosted and even repos (the majority) hosted on GitHub. You are free to choose what works with your team.</p> <p><strong><em>Should I add my packages to .gitignore when working with GitHub and Azure Websites? Does Kudu install the packages for me? If so, wouldn't it be faster to deploy by NOT adding the packages to .gitignore?</em></strong><br>It’s possible that you might save time, but deploying to different regions may mean greater latency as you deploy. Local cached packages can be quickly retrieved by Kudu, which could result in time saving for you.  <p><strong><em>Can I use the Kudu webhooks with a local githook from my Git repo?&nbsp; <br></em></strong>The webhook endpoint is exposed in the API, you can read more about it <a href="https://github.com/projectkudu/kudu/wiki/Web-hooks" target="_blank">here</a>.</p> <p><strong><em>How do deployment slots work? Can I use separate databases for different slots?</em></strong><br>Slots can have their own configuration, so if you need different connection strings for the alternate slots, <a href="http://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/?prid=ca_DevMVP_JC#AboutConfiguration" target="_blank">you can do that</a>. This is also true of app settings and the like.</p> <p><strong><em>What does Kudu do? </em></strong><br>Kudu is the deployment engine that powers Azure Websites. It's grown into a great set of services that allow you to manage and customize your deployment process. There is a public API you can use in your own projects, integrate with other web hooks and more.</p> <p><strong><em>How does the Kudu Console work in the Browser?<br></em></strong>The cool bits to me (as a developer) is the continuous connection to the browser from the server. That's all powered by SignalR, which is another open source project started by some MS folks. You can find the <a href="https://github.com/SignalR/SignalR" target="_blank">SignalR GitHub repo here</a>.</p> <p><strong><em>What are the costs related to turning on tracing?</em></strong><br>There is a very small percentage of a performance hit, but nothing really in terms of monetary costs, it’s included in the platform. The one potential thing to watch for is that there is a cap on website space and the logfiles will count towards that.</p> <p><strong><em>How do I analyze the data from my error logs on my site?</em></strong><br>You can use the built-in support site from the scm sub-domain on your site. Just navigate to &lt;yoursite&gt;.scm.azurewebsites.net/support and select your hostname. From there, you can drill in and see error and troubleshooting information.</p> <p><strong><em>Can I use .NET 3.5 on Azure Websites?</em></strong><br>Yes, this is an option from the configuration menu. The only trouble I’ve had in moving to AW is when you have legacy third-party components that need access to unsafe memory or the registry (not supported on websites).</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5311</wp:post_id>
		<wp:post_date>2015-01-14 19:51:01</wp:post_date>
		<wp:post_date_gmt>2015-01-14 19:51:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-virtual-academy-a-lap-around-azure-websites-all-the-questions-and-links-from-the-talk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="mva"><![CDATA[MVA]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3787883316]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Day 2 &#8211; Adding Entities to a Storage Account Table</title>
		<link>http://jameschambers.com/2015/01/day-2-adding-entities-to-a-storage-account-table/</link>
		<pubDate>Wed, 21 Jan 2015 00:49:51 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5521</guid>
		<description></description>
		<content:encoded><![CDATA[<p><i>In <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/">this series</a> we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 Application, using the Visual Studio 2013 IDE and Microsoft Azure infrastructure.</i></p> <p>We’ve got some basics in place, namely loading up all resources from a table, but it turns out that users want to be able to add records, too. Who knew?&nbsp; To allow this to happen, we’re going to need to update our view a little and add an appropriate method on our controller.&nbsp; Let’s make that happen, then we’re going to take a look at why our approach is breaking down.&nbsp; Don’t worry, we’ll start fixing things up in Day 3!</p> <p class="side-note">If you want to follow along, please <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119">pop into Azure</a> and make sure you’ve got an account ready to go. The trial is free, so get at it!</p> <h2>Updating Our View</h2> <p>We’re going to keep working off of the view we created in Day 1, just simply by adding a form below the existing UI.&nbsp; </p><pre class="csharpcode">&lt;h2&gt;Like Kittehs? Add a Kitteh!&lt;/h2&gt;
@<span class="kwrd">using</span> (Html.BeginForm(<span class="str">"Index"</span>, <span class="str">"Home"</span>, FormMethod.Post))
{
    &lt;div <span class="kwrd">class</span>=<span class="str">"form-group"</span>&gt;
        &lt;label <span class="kwrd">for</span>=<span class="str">"ImageUrl"</span>&gt;What kind of Kitteh <span class="kwrd">is</span> it?&lt;/label&gt;
        &lt;select <span class="kwrd">class</span>=<span class="str">"form-control"</span> name=<span class="str">"PartitionKey"</span>&gt;
            &lt;option <span class="kwrd">value</span>=<span class="str">"FunnyKittehs"</span>&gt;Funny Kitteh&lt;/option&gt;
            &lt;option <span class="kwrd">value</span>=<span class="str">"CuteKittehs"</span>&gt;Cute Kitteh&lt;/option&gt;
        &lt;/select&gt;
    &lt;/div&gt;
    &lt;div <span class="kwrd">class</span>=<span class="str">"form-group"</span>&gt;
        &lt;label <span class="kwrd">for</span>=<span class="str">"RowKey"</span>&gt;Kitteh Name&lt;/label&gt;
        &lt;input type=<span class="str">"text"</span> <span class="kwrd">class</span>=<span class="str">"form-control"</span> id=<span class="str">"RowKey"</span> name=<span class="str">"RowKey"</span> placeholder=<span class="str">"SeriousKitteh"</span>&gt;
    &lt;/div&gt;
    &lt;div <span class="kwrd">class</span>=<span class="str">"form-group"</span>&gt;
        &lt;label <span class="kwrd">for</span>=<span class="str">"ImageUrl"</span>&gt;Image URL&lt;/label&gt;
        &lt;input type=<span class="str">"url"</span> <span class="kwrd">class</span>=<span class="str">"form-control"</span> id=<span class="str">"ImageUrl"</span> name=<span class="str">"ImageUrl"</span> placeholder=<span class="str">"http://awesomekittehs.org/pic1.jpg"</span>&gt;
    &lt;/div&gt;
    &lt;button type=<span class="str">"submit"</span> <span class="kwrd">class</span>=<span class="str">"btn btn-default"</span>&gt;Submit&lt;/button&gt;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>If you’re <a href="http://jameschambers.com/2014/08/30-days-of-bootstrap-and-asp-net-mvc-5/" target="_blank">new to Bootstrap</a>, it may seem like there’s a lot going on there, but you get used to it pretty quickly. Our form has three “groups” in it.&nbsp; This is a construct in Bootstrap that allows us to associate controls and labels and get the CSS styling we expect.&nbsp;&nbsp; Each form group has a label and a control, in our case, and we’re simply putting in the properties we need in order to create a new row in our Azure Table. </p>
<p>The form is configured to POST to the Index action on the Home controller, so let’s set up someone to answer when the calls start coming.</p>
<h2>Updating Our Controller</h2>
<p>The next piece is just as easy. We want to accept the form information (our controller will leverage MVC’s model binding) and then create a new entity in the Table. </p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult Index(KittehEntity entity)
{
    var storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(<span class="str">"StorageConnectionString"</span>));

    var client = storageAccount.CreateCloudTableClient();
    var kittehTable = client.GetTableReference(<span class="str">"PicturesOfKittehs"</span>);

    var insert = TableOperation.Insert(entity);
    kittehTable.Execute(insert);
            
    var kittehQuery = <span class="kwrd">new</span> TableQuery&lt;KittehEntity&gt;()
        .Where(TableQuery.GenerateFilterCondition(<span class="str">"PartitionKey"</span>, QueryComparisons.Equal, <span class="str">"FunnyKittehs"</span>));

    var kittehs = kittehTable.ExecuteQuery(kittehQuery).ToList();

    <span class="kwrd">return</span> View(kittehs);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The insert is a type of TableOperation that we get by calling the static method aptly named “Insert” and passing in our entity. Our kittehTable object here is created in the context of a table reference that we load from our storage account by name.</p>
<p>At the tail end of the insert operation, we reload the list of kittehs (everyone is here to see the kittehs, after all) and return the view to render the list.</p>
<h2>It’s Falling Apart!</h2>
<p>Good grief, Charlie Brown, you’ve repeated all your code!&nbsp; Our controllers should handle the mapping of requests and related payload to service endpoints, and direct users to the correct views. </p>
<p>Putting application logic into our methods is a dangerous slope, and anytime our actions start doing more than one thing we start making it hard to test and maintain our software.&nbsp; This is ungood.</p>
<h2>Next Steps</h2>
<p>A lot of times tutorials and blog posts fall short in the area of best practices, and I don’t want to go there for this one. In tomorrow’s exercise we’re going to break our problem down into better pieces that more accurately represent what you’d be doing in a real-world application.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5521</wp:post_id>
		<wp:post_date>2015-01-21 00:49:51</wp:post_date>
		<wp:post_date_gmt>2015-01-21 00:49:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-2-adding-entities-to-a-storage-account-table</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="8daysoftablestorage"><![CDATA[8DaysOfTableStorage]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="table-storage"><![CDATA[Table Storage]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3789451076]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40002</wp:comment_id>
			<wp:comment_author><![CDATA[Day 0: 8 Days of Working With Azure Table Storage from ASP.NET MVC 5 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.50</wp:comment_author_IP>
			<wp:comment_date>2015-04-20 21:27:11</wp:comment_date>
			<wp:comment_date_gmt>2015-04-20 21:27:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 2: Adding Entities to a Storage Account Table [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Team Foundation Error &#8211; BasicAuthCredential is not marked as serializable</title>
		<link>http://jameschambers.com/2015/01/team-foundation-error-basicauthcredential-is-not-marked-as-serializable/</link>
		<pubDate>Wed, 21 Jan 2015 16:43:35 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5601</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was working on a project hosted in a git repo in Team Foundation and wanted to update the build process. Scroll down for two different fixes if you’ve got the error, or read on to see if it’s applicable to your situation.</p> <p>When I navigated to the step to configure the process template parameters, I ran into the following error:</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/01/image4.png" width="496" height="235"></p> <p>The text was:</p> <blockquote> <p>Team Foundation Error – Type ‘Microsoft.TeamFoundation.Client.BasicAuthCredential’ in assembly ‘Microsoft.TeamFoundation.Client, Version=12.0.0.0, Culture=neutral, PublicKeyToken=’[token] is not marked as serializable.</p></blockquote> <p>I’m not aware of any recent changes or updates to my machine, my dev environment or the TFS server in question. I tried restarting Visual Studio, but the error persisted. </p> <p>I then remembered that about three months ago I ran into a similar problem (though I can’t quite recall if it was the same error) when I started using a VM that had a co-worker’s credentials pre-baked into VS. To fix this problem I removed the credentials in Windows, and it resolved the issue, prompting me to sign in as myself when I next launched VS.</p> <h2>Solution 1 – Reset Your Credentials</h2> <p>Rather than removing the account, I wanted to first try to just poke it by re-entering my password or&nbsp; To reset your credentials, try this:</p> <ol> <li>Close all instances of Visual Studio.</li> <li>Tap your Windows key, then type “Credentials”. The Credential Manager app link should show up in your list.</li> <li>Check out your “Windows Credentials”. Under Generic Credentials, you should see your TFS account.</li> <li>Click on the twirldown next to the entry and select “Edit”. </li> <li>Retype your password.</li></ol> <h2>Solution 2 – Delete the Credentials from Windows</h2> <p><a href="http://jameschambers.com/wp-content/uploads/2015/01/image5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/01/image_thumb.png" width="244" align="right" height="195"></a>If the reset doesn’t work, you can try this instead. </p> <ol> <li>Close all instances of Visual Studio.</li> <li>Tap your Windows key, then type “Credentials”. The Credential Manager app link should show up in your list.</li> <li>Check out your “Windows Credentials”. Under Generic Credentials, you should see your TFS account.</li> <li>Click on the twirldown next to the entry and select “Delete”. </li> <li>You may need to do this for more than one account, especially if you have a git:http:// account saved as well.</li> <li>Confirm the delete operation.</li><!--EndFragment--></ol> <p>Whichever solution you have to go with, this should fix things up. Note that in solution 2, you’ll be prompted for your credentials when you open up Visual Studio and try to navigate to a team project.</p> <p>Cheers, and happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/01/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5601</wp:post_id>
		<wp:post_date>2015-01-21 16:43:35</wp:post_date>
		<wp:post_date_gmt>2015-01-21 16:43:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>team-foundation-error-basicauthcredential-is-not-marked-as-serializable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="tfs"><![CDATA[TFS]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3795864903]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fatal: unable to access &#039;Repository&#039;: Failed connect to bitbucket.org:443; No error</title>
		<link>http://jameschambers.com/2015/03/fatal-unable-to-access-repository-failed-connect-to-bitbucket-org443-no-error/</link>
		<pubDate>Thu, 12 Mar 2015 23:05:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5631</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was getting this error when trying to push a new branch up to bitbucket today:</p><pre class="csharpcode">fatal: unable to access <span class="str">'https://{account}@bitbucket.org/{project}/{repo-name}.git/'</span>: Failed connect to bitbucket.org:443; No error</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>I was able to get the correct IP for bitbucket.org via nslookup, and I was able to access both HTTP and HTTPS in a browser. Going verbose didn’t reveal much new information either:</p><pre class="csharpcode">$ GIT_CURL_VERBOSE=1 git push --set-upstream origin feature/select-account-dialog:feature/select-account-dialog
  * Couldn't find host bitbucket.org in the _netrc file; using defaults
  * Adding handle: conn: 0x36b570
  * Adding handle: send: 0
  * Adding handle: recv: 0
  * Curl_addHandleToPipeline: length: 1
  * - Conn 0 (0x36b570) send_pipe: 1, recv_pipe: 0
  * About to connect() to bitbucket.org port 443 (#0)
  *   Trying 131.103.20.168...
  * Timed out
  *   Trying 131.103.20.167...
  * Timed out
  * Failed connect to bitbucket.org:443; No error
  * Closing connection 0
fatal: unable to access 'https://{account}@bitbucket.org/{project}/{repo-name}.git/': Failed connect to bitbucket.org:443; No error</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Then I noticed the Cisco VPN client icon in the taskbar…I was connected to a VPN. Disconnected, and the push was successful. Hope this helps someone else out there.</p>
<p>Haping coding. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/03/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5631</wp:post_id>
		<wp:post_date>2015-03-12 23:05:00</wp:post_date>
		<wp:post_date_gmt>2015-03-12 23:05:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fatal-unable-to-access-repository-failed-connect-to-bitbucket-org443-no-error</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bitbucket"><![CDATA[BitBucket]]></category>
		<category domain="post_tag" nicename="cisco-vpn"><![CDATA[Cisco VPN]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781336119]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wake Up and Get S#!t Done &#8211; A Practice of Awesome</title>
		<link>http://jameschambers.com/2015/03/wake-up-and-get-st-done-a-practice-of-awesome/</link>
		<pubDate>Sat, 14 Mar 2015 11:36:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5661</guid>
		<description></description>
		<content:encoded><![CDATA[<p>People, we need to get more <em>stuff</em> done. Insert whatever word is appropriate for you. We’re a culture consumed by consumption and I think it’s going to suck a lot of life out of our kids. Seriously, it’s going to suck. </p> <p>As we seek to fill our time with things that are pre-fabricated, manufactured and less original, we lose out on the <u>participation in creation</u>, which is how we got to be awesome as a species in the first place. So, let’s be all commit to being more awesome.</p> <ul> <li>Learn every day; just…be more learned.</li> <li>Wake up early and give yourself an hour for your future self.</li> <li>Teach someone, especially kids.</li></ul> <p>Sleep is awesome. I’m speaking from personal experience as I’ve done it a few times, in fact I’m quickly approaching 13,800 attempts at a night’s rest, many of them successful. I even take a nap most days. But we’re suckers for using sleep on the wrong end of our night. Staying up late is just way more appealing.</p> <h2>Bust Out of Your Funk</h2> <p>But what do we do in those last hours, when we’re the least rested and least focused? We watch <em>House of Cards</em>. Play games. Do the Facebook. Drown in Twitter or Instagram. Lame.</p> <p>As far as New Years resolutions go, I’m not much of a fan. And since I try to do this every day already, it’s not really much of a commitment for me to make, but I think it’s a great life hack. So, here’s one thing that you can do to make your life better:</p> <p><strong><font size="5">Wake up early.</font></strong></p> <p>That’s it. No secret sauce, no programs or diets or fads. Just get your arse out of bed. </p> <p>I’ve been doing this, fairly faithfully for the last couple of years, and it’s something that I’ve started sharing with folks <em>because it works.</em> I can’t possibly make money off of you getting up earlier, so there’s nothing but a good honest recommendation in this.</p> <p>Why do it? Because you can start to take control of your life, that’s why. You get up early, and things happen. There’s likely less distraction in your house and you’re going to be able to tune in to the task at hand. There are a ton of things you can do in just 45min-1hr:</p> <ul> <li>Read something you’re interested in</li> <li>Gain at least <em>some</em> awareness of world events</li> <li>Learn, learn, learn</li> <li>Go for a run/walk/bike, take out the trash, do some Yoga, shovel some snow (I do advise against snow blowers and lawn mowers in the wee hours, for the sake of the neighbours. Especially if I’m your neighbour)</li> <li>Write, even if you aren’t sharing it</li> <li>Solve a problem outside of your normal domain</li></ul> <p>I’m a software developer (in case you couldn’t tell from my blog) so for me, my goal is to stay caught up on the changes in the industry (cloud, patterns, vNext type stuff), things that influence my industry (electronics, politics, economic trends, job markets) and things that are disruptive to my career (wearables, IoT, startup culture, young kids with big ideas). I write code almost every morning. I try to work out 4 times a week.</p> <p>If you don’t think that an hour of effort can make a difference, here’s what I did yesterday AM in 64 minutes:</p> <ul> <li>Created a new Azure Web Site</li> <li>Setup DNS for the site</li> <li>Created a certificate request for the site</li> <li>Applied for SSL with GoDaddy</li> <li>Completed the certificate request</li> <li>Exported the cert (with cert chain) and uploaded to azure</li> <li>Added the site to a GitHub private repo</li> <li>Published the site to Azure</li> <li>Added two settings to turn "test" and "paypal sandbox" mode to my web.config</li> <li>Added those app settings to the Azure website</li> <li>Enabled SSL bindings and redirects</li></ul> <p><strong>TL;DR</strong>: I got schtuff done. And yes, I track my time and keep a log. When I look back on my week, I can honestly reflect and say, “Good week, Chambers” or “Pick up the slack, home slice”. It’s not a tool to condemn myself, it’s a way to score wins and keep motivated. Last year I put over 150 hours into “my career” and this year my career is better than last year.</p> <h2>Ch-Ch-Ch-Ch-Ch-Changes</h2> <p>If you’re not a morning person, so what? All you’re saying is that you’re not great at waking up. So wake up earlier, and get over your “not a morning person” time, then get to work. </p> <p>If you get up early and start doing something meaningful, there’s going to be a few things that happen:</p> <ul> <li>You’ll start slipping away to bed earlier, because you’ll be tired earlier in the evening. Embrace it.</li> <li>You’ll start to lose interest in gossippy, trendy fads.</li> <li>Things you have wanted to learn will start to get learned.</li> <li>Projects you have wanted to work on will get some attention.</li> <li>It will be easier to walk away from your work during the day/evening and spend time with your family because you’re constantly achieving.</li> <li>You will see less value in lower forms of entertainment (reality shows) and greater value in the investment in yourself and time with your loved ones.</li> <li>You will be happier because you will feel like you’re accomplishing something nearly <em>every single day.</em></li> <li>You will appreciate your rest much more</li></ul> <p>Oh, yes, rest is important. And I don’t just mean sleep. No athlete worth her salt trains every day of the week, nor should you. Take a day off every week (I try to practice a digital Sabbath) and let yourself recharge. And balance your efforts (I take a walk before and after work). I will write on this soon, as it’s especially important for me as I am a remote worker.</p> <ul> <h2>But, But, But…I Like my TV Shows! And I don’t Like to Get up Early!</h2></ul> <p>“Can’t I just do this before I go to bed?” Sure, if that’s what you prefer. But why wait until your last hours of the day – as your concentration and willpower fade – to invest in yourself?</p> <p>My morning ritual is easy: I get up, put the coffee on, do a quick workout (sometimes as short as 10 minutes), shower, grab my cup of joe and get to work. This takes less than 20 minutes, so I get up about an hour before the rest of the household. Want to know something crazy? I don’t even set an alarm. But, more on that in a future post.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2015/03/legocreative.jpg"><img title="legocreative" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; margin: 0px 0px 0px 17px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="legocreative" src="http://jameschambers.com/wp-content/uploads/2015/03/legocreative_thumb.jpg" width="244" align="right" height="138"></a></p> <p>My 11 year old son loves Lego and Dr. Who. He wakes up a couple of times a week and spends 10-15 minutes or so looking at online projects that other Lego-Whovians have built, and then tries to re-create them, or just builds his own, even recently getting into painting his own characters. He gets it: if he wants to learn how to do something, he’s got to put some time into it. He’s got school during the day, homework and music lessons during the evenings, and his parents make him get a reasonable sleep in each night. When else can he do this?</p> <p>So, wake up early, close down your unnecessary browser tabs (Twitter, Facebook, email) and get some real s#@t done. Spend your early mornings on yourself, your daytime on your job, your evenings with the people you care about most and get a good night’s sleep. It will change your life for the better, guaranteed, or I’ll double your money back. </p> <p>And happy coding. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/03/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5661</wp:post_id>
		<wp:post_date>2015-03-14 11:36:00</wp:post_date>
		<wp:post_date_gmt>2015-03-14 11:36:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wake-up-and-get-st-done-a-practice-of-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="life-hacking"><![CDATA[Life Hacking]]></category>
		<category domain="post_tag" nicename="life-hacks"><![CDATA[Life Hacks]]></category>
		<category domain="post_tag" nicename="motivate"><![CDATA[Motivate]]></category>
		<category domain="post_tag" nicename="practice"><![CDATA[Practice]]></category>
		<category domain="post_tag" nicename="resolve"><![CDATA[Resolve]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39731</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Zych]]></wp:comment_author>
			<wp:comment_author_email>dave@davidzych.com</wp:comment_author_email>
			<wp:comment_author_url>http://davidzych.com</wp:comment_author_url>
			<wp:comment_author_IP>71.177.216.59</wp:comment_author_IP>
			<wp:comment_date>2015-03-16 16:42:18</wp:comment_date>
			<wp:comment_date_gmt>2015-03-16 16:42:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is great advice and something I'm trying to get better at. For many procrastinators, myself included, starting is the hardest part. I've noticed that with any activity (programming, housework, exercise, etc) getting "the ball rolling" takes some effort, but once it's moving momentum takes over and it's a lot easier to stay productive.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812876]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39741</wp:comment_id>
			<wp:comment_author><![CDATA[sudhakaran packianathan]]></wp:comment_author>
			<wp:comment_author_email>lksudha78@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://lksudha.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>117.216.114.217</wp:comment_author_IP>
			<wp:comment_date>2015-03-17 09:01:16</wp:comment_date>
			<wp:comment_date_gmt>2015-03-17 09:01:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice post. Awesome to see what you can do in 64 minutes in the morning.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812874]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39761</wp:comment_id>
			<wp:comment_author><![CDATA[Working from Home and Walking to Work: Surviving Remote Work | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/03/working-from-home-and-walking-to-work-surviving-remote-work/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.16.187</wp:comment_author_IP>
			<wp:comment_date>2015-03-17 14:01:30</wp:comment_date>
			<wp:comment_date_gmt>2015-03-17 14:01:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] this was all kinds of bad for many reasons, especially because I wasn’t able to get any of my schtuff done, but it also meant that days were always a real slow build up. Rather than hitting the keyboard [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39771</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-17 14:22:08</wp:comment_date>
			<wp:comment_date_gmt>2015-03-17 14:22:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Momentum is the worst and best thing ever. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39731</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812876]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812878]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39851</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Dunn]]></wp:comment_author>
			<wp:comment_author_email>chrisdunn_03@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>37.157.50.71</wp:comment_author_IP>
			<wp:comment_date>2015-03-23 10:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-03-23 10:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great advice! this reminds me of the following article which I think is a great motivating read: http://www.cracked.com/blog/6-harsh-truths-that-will-make-you-better-person/

I'd love to apply this but my 1.5yr old son has other ideas! he's going through what seems like a crazy long phase of waking at 5:30am each day so my early mornings are scuppered, maybe one day hey? :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812877]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40071</wp:comment_id>
			<wp:comment_author><![CDATA[From my reading list #24 &#8211; April 26th, 2015 | Pascal Laurin]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://pascallaurin.com/2015/04/27/from-my-reading-list-24-april-26th-2015/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.82.116</wp:comment_author_IP>
			<wp:comment_date>2015-04-27 13:02:32</wp:comment_date>
			<wp:comment_date_gmt>2015-04-27 13:02:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Wake Up and Get S#!t Done – A Practice of Awesome by James Chambers [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Working from Home and Walking to Work: Surviving Remote Work</title>
		<link>http://jameschambers.com/2015/03/working-from-home-and-walking-to-work-surviving-remote-work/</link>
		<pubDate>Tue, 17 Mar 2015 14:00:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5731</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There’s a commercial that I’ve seen in the last few months on TV where the announcer is singing the praises of a lady who rides her bike to work, “…which is impressive, because she works from home.” While it’s true that it seems a little nuts to leave your house to go to your house, there’s actually some incredible wisdom in this simple practice. Working from home is a privilege and an expression of trust from our employers, even if we’re self-employed, and you need to be equipped to find a good cadence to your day.</p> <h2>Awake, Alert and Ready to Go</h2> <p>The first month that I started working from home I thought I had it made. I was sliding out of bed pretty much straight into my chair and starting my work day with the sludge still on my teeth, sipping on coffee and trying to make sense of the emails I was catching up on through my half-closed eyes. I’d usually wait until lunch to shower and I rarely did my hair.</p> <p>Now, this was all kinds of bad for many reasons, especially because I wasn’t able to <a href="http://jameschambers.com/2015/03/wake-up-and-get-st-done-a-practice-of-awesome/" target="_blank">get any of my schtuff done</a>, but it also meant that days were always a real slow build up. Rather than hitting the keyboard running with trumpets and sirens and “Hells, ya!”, it was more like a pitiful crawl being cheered on by a fourth-grader playing a sad kazoo.</p> <p>So, I started walking to work. And I love it. I say goodbye to my kids and give my wife a smootch. I leave via the front or side door, head North and do a loop through my neighbourhood. I will usually read a few emails, catch up some news and listen to music as I walk, but often I stop to talk to folks who live in my community too. As I finish my walk, I enter the house through the back door, and I’m officially at work.</p> <p>I am engaged, trumpets blaring, as I start hacking.</p> <p>When I finish my work day, I leave through the back door, and head South, doing another loop, but usually on a different route. If it’s a busy evening, it can be as short as a block or two. I come in through the front or side door that I exited through in the AM and I’m back <em>home.</em></p> <h2>Separation of Work Space and Home Space</h2> <p>This practice really helps me to keep the work stuff at work and the home stuff at home. There are a few other physical boundaries that I keep in place, but really, the walk at the start of the day and the end of the day are just a great way to get energized, tune in my focus on the way to my office and leave work behind when I’ve signed out for the evening.</p> <p>Those other physical boundaries? I work in my office, I have a space set aside in my home where work stays. It is a very rare occasion when I bring my laptop out of my office to work elsewhere in my home.&nbsp; I don’t keep a house phone in my office, and I don’t take my VOIP gear out into my home.&nbsp; My wife and I don’t talk much through the day, if at all, except occasionally via Skype chat. In my new office (we’re in the process of renovating right now) I’m installing extra sound-proofing so that the noises of the home enter my work space even less than they do today.</p> <p>Of course, there are some exceptions. At lunchtime, I just walk upstairs to have lunch with my bride, I don’t do the walk from-and-to work again. And if she is otherwise predisposed throughout the day, I’ll take the home phone with me as I head down to the office (our son has Type 1 Diabetes, and our house phone is the emergency contact number). And with kids missing school busses and meetings starting promptly in the AM or running late at the end of the day, I don’t always get my walk in. But I covet the days I do.</p> <h2>Find Your Own Survival Technique</h2> <p>The walking works for me, but it may not for you and I understand it’s not for everybody.&nbsp; It really doesn’t have to be a walk, but as a remote worker I have found success in having a way to start my work cleanly and to be able to <em>literally</em> walk away from my job at the end of the day. </p> <p>This is really a matter of figuring out how to not only survive the opportunity you have to work from home, but to find success in it. So figure it out! What is it for you that helps you train in on your work day? What is it that helps you disconnect as the evening begins? </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5731</wp:post_id>
		<wp:post_date>2015-03-17 14:00:00</wp:post_date>
		<wp:post_date_gmt>2015-03-17 14:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-from-home-and-walking-to-work-surviving-remote-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="post_tag" nicename="life-hacks"><![CDATA[Life Hacks]]></category>
		<category domain="category" nicename="life-hacks"><![CDATA[Life Hacks]]></category>
		<category domain="post_tag" nicename="remote-work"><![CDATA[Remote Work]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208922]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39811</wp:comment_id>
			<wp:comment_author><![CDATA[Behrouz]]></wp:comment_author>
			<wp:comment_author_email>b.sameny@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.guid.ir</wp:comment_author_url>
			<wp:comment_author_IP>2.178.189.166</wp:comment_author_IP>
			<wp:comment_date>2015-03-18 07:53:41</wp:comment_date>
			<wp:comment_date_gmt>2015-03-18 07:53:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i have the Same Situation Some how and this method is going to work for me too, just i should take the morning walk at 4 am and finally take another walk in 9 PM :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813016]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39831</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Jankulovski]]></wp:comment_author>
			<wp:comment_author_email>connectsupport@remotestaff.com.au</wp:comment_author_email>
			<wp:comment_author_url>http://blog.remotestaff.com.au/</wp:comment_author_url>
			<wp:comment_author_IP>103.225.38.20</wp:comment_author_IP>
			<wp:comment_date>2015-03-19 07:22:21</wp:comment_date>
			<wp:comment_date_gmt>2015-03-19 07:22:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds like a fun journey James!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813018]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39841</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; March 19, 2015 (#1977) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/03/19/dew-drop-march-19-2015-1977/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.13</wp:comment_author_IP>
			<wp:comment_date>2015-03-19 12:11:29</wp:comment_date>
			<wp:comment_date_gmt>2015-03-19 12:11:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Working from Home and Walking to Work: Surviving Remote Work (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40811</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Reynolds]]></wp:comment_author>
			<wp:comment_author_email>iddjoe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>73.166.190.152</wp:comment_author_IP>
			<wp:comment_date>2015-07-13 15:37:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-13 15:37:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow! I'm going to try this tomorrow! I have that same problem! Half the time, I don't really feel like I'm working till noon or so. Then I end up working till 2 or 3 in the morning to make up for the lost time in the morning.

One question though... Would the effect be the same if you use the front door all the time? I don't really have a good way in and out of the back yard, which is where my side and back doors go... I guess I could use the garage. Maybe I'll try that.

Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2133524847]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40821</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-13 16:01:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-13 16:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the comment, Joe! I think that the key thing is in finding a way to partition your day...give yourself a way to say, "I'm starting" and "I'm stopping", that is the key. It doesn't even have to be a walk, just some break between the home time and the work time that lets you get into your groove. 

I had one lady message me that in her basement she has a workout room, bathroom and her office. When she gets up, she does some Yoga, gets ready for work and goes straight to the office without leaving the basement. She finds at the end of the day that she can walk away without any specific ritual and leave work behind...although I'd argue that her "partition" is likely her walk up the stairs up to the main floor. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40811</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2133524847]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2133588938]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40831</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Reynolds]]></wp:comment_author>
			<wp:comment_author_email>iddjoe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>73.166.190.152</wp:comment_author_IP>
			<wp:comment_date>2015-07-13 20:59:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-13 20:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, that's a good point. In a prior house, I had an officegarage, and it was a lot easier to "leave work at work" when I actually had to walk out, go to the garage, and be partitioned off.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40821</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2133588938]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2134209992]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>IoT For Humans (and Developers) - Getting Started with my Microsoft Band</title>
		<link>http://jameschambers.com/2015/03/iot-for-humans-and-developers-getting-started-with-my-microsoft-band/</link>
		<pubDate>Tue, 31 Mar 2015 12:16:45 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5821</guid>
		<description></description>
		<content:encoded><![CDATA[Making the “Internet of Things” make sense to observers outside the industry is going to take a lot of work. While we might grow frustrated with <a href="http://www.networkworld.com/article/2464007/cloud-computing/gartner-internet-of-things-has-reached-hype-peak.html" target="_blank">the overuse</a> and below-required understanding of the term, I would argue that in the industry we have a long way to go to fully understand the implications of security, health, privacy, etiquette, social dynamics, productivity and individualism.

But while the term may seem obscure, especially hiding being other abstractions like “connected devices” and mixed in with other buzzwords like “big data”, the reality is that…it’s here.

The auto industry embraced the “of Things” part really well quite some time ago, well before mainstream internet in fact, and has been increasingly good and getting the “Internet” part as well.

As a consumer, it would appear that my van sends me an email when it needs an oil change; in reality there is a query or a push occurring at some set interval or cued off of some trigger when I’ve reached a certain amount of mileage. That push or pull stores a flag in a database, which is later picked up by some service, likely processed through some kind of templating engine and mixed with my past service records and ultimately delivered to my inbox. But, dang, my van sends me emails, Mom!
<h2>Bringing IoT Home For .NET Developers</h2>
Even to me as a developer, while I’ve sensed these “Things” emerging around me it’s still been hard to find a way to explore them. You can’t get application development guidance or a NuGet package for your Chevy Uplander.

In many ways our phones have really become these interconnected devices as well, becoming more and more sensor-laden in a world where LTE and Wi-Fi signals have broader reach. Android watches and even the Pebble watch spaces have SDKs if you’re familiar with those development ecosystems or cross-plat tools to target specific devices.

But last week, my Microsoft Band showed up. And there is both an SDK and guidance freely available. As a developer on the .NET stack and solid knowledge of Azure, I can’t help but feel that my playground just got a lot bigger.
<h2>What I Get as a Tinkerer</h2>
So, for about $200, and leveraging my Azure benefits, I am like a kid in a candy shop. Here’s what I have:
<ul>
	<li>A crazy amount of sensors (GPS, UV, heartrate, accelerometer, gyrometer, ambient light, microphone)</li>
	<li>“Free” pairing with any major phone platform via the SDK</li>
	<li>More sensors available via the phone</li>
	<li>A myriad of connectivity options (Wi-Fi, Bluetooth, NFC)</li>
	<li>Local and cloud-based storage</li>
	<li>User accounts, identity services</li>
	<li>Haptic and audio feedback mechanisms</li>
	<li>Multiple interaction surfaces</li>
	<li>Other cloud services (SMS, email, batch processing)</li>
	<li>A human attached to all of the above</li>
	<li>The ability to create applications on my laptop/PC/tablet that ties these things together<!--EndFragment--></li>
</ul>
<p class="side-note">You can sign up for Azure for a <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119">free trial here</a>, or look into your benefits through the <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575136">MSDN program</a>, as you may already have monthly credits to burn up.</p>
I haven’t quite figured out what I want to build yet, but there seems to be a lot of interesting paths.:
<ul>
	<li>A “Safe and Alive” monitoring application for high-risk occupations (I’m already exploring this)</li>
	<li>A immersive game with haptic, visual, audio, SMS and touch interactions</li>
	<li>A reminder app to keep active, with an accountability partner using similar kit</li>
	<li>An application that leverages the Band for build server (or other service) failures</li>
</ul>
Remember that some of these become quite interesting when you consider the fact that you don’t have to have your phone out or even in your pocket for these to work, just as long as the Band can maintain it’s Bluetooth connection. You can leave your phone when it gets the best signal (in the vehicle, at the entrance to a storage facility) and still have your app running, collecting, pushing, pulling and processing data.
<h2>So What Now?</h2>
These are exciting times, and I’m having fun exploring practical and completely impractical uses and applications. My kids, 13, 11 and 5, are infinite sources of hilarity in discussing what we can do with it. My wife, too, and I’ve found all of a sudden that without talking about “consumer applications”, “big data” and “interconnected devices” I have completely engaged the entire family in the “Internet of Things”. Oh, and I had to order my wife a Band as well. <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://jameschambers.com/wp-content/uploads/2015/03/wlEmoticon-smile2.png" alt="Smile" />

I’m going to start sharing my experiences while developing an application in the weeks ahead, delving into the use of the sensors on the Band, exploring interactions and trying to test it in real-world scenarios. Stay tuned to follow my path. My next post will be a “Hello World” app that introduces you to the tooling and SDK.

Have you got a Band? What applications are you thinking about developing? Do you have any successes or failures to share in regards to the “Internet of Things”?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5821</wp:post_id>
		<wp:post_date>2015-03-31 12:16:45</wp:post_date>
		<wp:post_date_gmt>2015-03-31 12:16:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iot-for-humans-and-developers-getting-started-with-my-microsoft-band</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="microsoft-band"><![CDATA[Microsoft Band]]></category>
		<category domain="post_tag" nicename="nuget"><![CDATA[NuGet]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3789501841]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39881</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; April 1, 2015 (#1985) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/04/01/dew-drop-april-1-2015-1985/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.33</wp:comment_author_IP>
			<wp:comment_date>2015-04-01 11:59:10</wp:comment_date>
			<wp:comment_date_gmt>2015-04-01 11:59:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] IoT For Humans (and Developers) – Getting Started with my Microsoft Band (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Change in Windows Azure API - Websites.Services.WebEntities.ConnStringInfo</title>
		<link>http://jameschambers.com/2015/04/change-in-windows-azure-api-websites-services-webentities-connstringinfo/</link>
		<pubDate>Sat, 04 Apr 2015 21:58:23 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5861</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Automation is the bomb. I don’t like having to do something that can be automated more than once, so usually if I’m asked a second time (and I have a strong suspicion that I’ll be asked to do it again) I try to script it. This is very true of Windows Azure Web Apps and thankfully, it’s also easily facilitated.</p> <p>I just fired up some old Azure PowerShell scripts I had (from mid-2013, I believe) that had a call that looked a little like the following:</p><pre class="csharpcode"><span class="rem"># create and configure the connection string information </span>
$appConnString = New-Object Microsoft.WindowsAzure.Commands.Utilities.Websites.Services.WebEntities.ConnStringInfo; 
$appConnString.Name=<span class="str">"PersonContext"</span>; 
$appConnString.ConnectionString=$appDBConnStr; 
$appConnString.Type=<span class="str">"SQLAzure"</span>; </pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Essentially, it’s just creating an instance of the ConnStringInfo object so I can associate it with my site. However, when I tried running it I started getting the following error:</p>
<blockquote>
<p>New-Object : Cannot find type [Microsoft.WindowsAzure.Management.Utilities.Websites.Services.WebEntities.ConnStringInfo]: <br>verify that the assembly containing this type is loaded.</p></blockquote>
<p>Then, because the object couldn’t be created, I got errors trying to set each of the properties, like, “The property 'ConnectionString' cannot be found on this object. Verify that the property exists and can be set.”</p>
<p>Then I noticed that the script really mustn’t have been run in some time, as this is the current namespace for the class:</p>
<blockquote>
<p>Microsoft.WindowsAzure.<strong><u>Commands</u></strong>.Utilities.Websites.Services.WebEntities.ConnStringInfo</p></blockquote>
<p>Websites was moved in late 2013 to the Commands namespace. You won’t likely run into it unless you dig up an old script that hasn’t run in a while, but the difference is subtle and might be tricky to spot.</p>
<p>Hope this helps, and happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/04/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5861</wp:post_id>
		<wp:post_date>2015-04-04 21:58:23</wp:post_date>
		<wp:post_date_gmt>2015-04-04 21:58:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>change-in-windows-azure-api-websites-services-webentities-connstringinfo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure-web-apps"><![CDATA[Azure Web Apps]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3784919337]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39901</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; April 7, 2015 (#1988) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/04/07/dew-drop-april-7-2015-1988/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.33</wp:comment_author_IP>
			<wp:comment_date>2015-04-07 12:22:56</wp:comment_date>
			<wp:comment_date_gmt>2015-04-07 12:22:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Change in Windows Azure API – Websites.Services.WebEntities.ConnStringInfo (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Getting Microsoft Band Running Outside of the United States</title>
		<link>http://jameschambers.com/2015/04/getting-microsoft-band-running-outside-of-the-united-states/</link>
		<pubDate>Mon, 06 Apr 2015 12:26:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5961</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you are lucky enough to get your hands on a Microsoft Band before they’re readily available here in Canada or elsewhere worldwide in unsupported markets, you’ll likely run into a couple problems trying to get started. </p> <p>When we tried to get my wife’s Band up and running we ran into a few small but totally surpassable hurdles. Our roadblocks stemmed from being both out-of-market and using a Windows Phone.</p> <p>For the short version of the checklist to get thing running, skip to the end. For the walkthrough, keep reading.</p> <h2>Lighting up the Band on Your Phone</h2> <p><a href="http://jameschambers.com/wp-content/uploads/2015/04/wp_ss_20150406_0001.png"><img title="wp_ss_20150406_0001" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: right; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="wp_ss_20150406_0001" src="http://jameschambers.com/wp-content/uploads/2015/04/wp_ss_20150406_0001_thumb.png" width="148" align="right" height="244"></a>To start using the Band, you need an app on your phone, but it won’t appear in the Store. To get around this, you’ll need to change your Country/Region to “United States”, or another supported market (the app is available now in GB).</p> <p>With the region set, you’ll be able to install and run the app, just reboot your phone and look for Microsoft Health in the Store. Unfortunately, you’ll hit another snag right away after you install it. Namely, you’re going to hit this error message when you try to launch Microsoft Health (the Band Sync app): <em>Network Error. Something went wrong. Please check your network connection and try again.</em></p> <p><a href="http://jameschambers.com/wp-content/uploads/2015/04/image.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/04/image_thumb.png" width="231" height="244"></a></p> <p>Now, you can start troubleshooting, there are three reasons why you’ll get this error message than I have learned:</p> <ol> <li>You actually don’t have network connectivity. Make sure you’re connected to WiFi or have a good data connection with your cell provider.  <li><a href="http://jameschambers.com/wp-content/uploads/2015/04/wp_ss_20150406_0002.png"><img title="wp_ss_20150406_0002" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: right; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="wp_ss_20150406_0002" src="http://jameschambers.com/wp-content/uploads/2015/04/wp_ss_20150406_0002_thumb.png" width="148" align="right" height="244"></a>Your username has a special character in it. Likely due to a primarily English release in a limited market, it seems as though the app wasn’t thoroughly tested with letters outside of the English language. Go to the <a href="https://account.live.com" target="_blank">Microsoft Account site</a>, sign in, navigate to “Basic Info”, then check your display name and remove any special characters.  <li>Your phone has a primary language other than English (United States). To change this, head back into settings and ensure that you have English (United States) in the list, and make sure that it is the <em>first</em> one in the list. I have it configured as such (see the image to the right) along with English (Canada) and it works just fine.</li></ol> <p>So, these are the solutions for Windows Phone, but I don’t have any iDevices or Adroid phones to test this out with. I wouldn’t be surprised if there were similar issues there as well, so hopefully these tips might be able to help you out.</p> <h2>The Short List</h2> <p>So, in summary, here’s what you’ll need to get going outside of a supported market with Microsoft Band:</p> <ul> <li>A phone with the Country/Region set to “United States” (or another supported market)  <li>A working and active WiFi or data connection  <li>A display name in your Microsoft Account that doesn’t have special characters  <li>A primary language of “English (United States)” (or another supported language)</li></ul> <h2>A Quick Disclaimer</h2> <p>Changing the country, region and language settings on your phone may have other unintended side affects. Though it’s easy to change back, you should be aware of this in case other apps start behaving irrationally.</p> <p>Hope this helps someone out there. A quick thanks to the gentleman on Microsoft Support chat who was completely willing to help troubleshoot, even though we weren’t in the US (he was the one who tipped us off about special characters).</p> <p>Do you have a Band outside of the US? Do you have an iPhone or Adroid, and have you had any difficulties in getting it sync’d?</p> <p>Off to keep building my Band app…happy coding everyone! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/04/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5961</wp:post_id>
		<wp:post_date>2015-04-06 12:26:00</wp:post_date>
		<wp:post_date_gmt>2015-04-06 12:26:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-microsoft-band-running-outside-of-the-united-states</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="microsoft-band"><![CDATA[Microsoft Band]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208966]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39891</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>stimms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.simontimms.com</wp:comment_author_url>
			<wp:comment_author_IP>70.73.154.130</wp:comment_author_IP>
			<wp:comment_date>2015-04-06 13:58:03</wp:comment_date>
			<wp:comment_date_gmt>2015-04-06 13:58:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for taking the time to write this. I was happy to see that the Microsoft support line was so willing to help you even though you're in an unsupported country.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813059]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39921</wp:comment_id>
			<wp:comment_author><![CDATA[callon]]></wp:comment_author>
			<wp:comment_author_email>calloncampbell@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.112.125.5</wp:comment_author_IP>
			<wp:comment_date>2015-04-09 15:33:08</wp:comment_date>
			<wp:comment_date_gmt>2015-04-09 15:33:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for writing this up. Got me up and running with my Band in Canada. One side effect I noticed is that Cortana stopped working for me. Do you know of a work around for this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813061]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39951</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-04-15 01:41:40</wp:comment_date>
			<wp:comment_date_gmt>2015-04-15 01:41:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@callon: I am not sure if it makes a difference, but I installed "Preview for Developers" and Cortana hasn't stopped working for me. Make sure all your regions/languages align, and remove any superfluous settings if you can related to keyboards and the like.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39921</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813061]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813159]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Pushing Data to an Azure Service Bus Queue</title>
		<link>http://jameschambers.com/2015/04/pushing-data-to-an-azure-service-bus-queue/</link>
		<pubDate>Wed, 15 Apr 2015 02:29:55 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6051</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is a simple example of what you need to get data into a queue in Azure Service Bus from a console application. This uses the WindowsAzure.ServiceBus NuGet package, so you can actually use it anywhere you can store a connection string and write some .Net.</p> <p><a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">Go here to get started</a>, or log into your Azure portal.</p> <h2>Setting up the Queue</h2> <p>First, we’re going to create a new Service Bus Queue through the portal. This is pretty easy, just select New –&gt; App Services –&gt; Queue and pick Custom Create.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2015/04/image1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/04/image_thumb1.png" width="244" height="202"></a></p> <p>Punch in a name, create a new namespace then click next. You can use the default settings, just hit confirm. Note that if you use Quick Create, it assumes you have a namespace already setup, if that’s the case, you can use that as well.</p> <p>Navigate to the Namespace dashboard and go to the configure tab. You’ll need to note the <strong>shared access key name</strong> and the <strong>key value</strong> itself. </p> <h2>Building the App</h2> <p>Next, create a new Console App in Visual Studio. Add this configuration line to your App.config (just make sure to remove the whitespace, it wrecks your config):</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="AzureWebJobsServiceBus"</span>
         <span class="attr">connectionString</span>=
            <span class="kwrd">"Endpoint=sb://NAMESPACE.servicebus.windows.net/;
             SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=KEY"</span> <span class="kwrd">/&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This gives the framework the connection string you need via the conventionally named key/value pair. Punch in those details you grabbed from the portal so that the connection string is valid for your environment.</p>
<p>Next, add a simple person class to your project as such:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Person
{
    <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> EmailAddress { get; set; }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Get The Bits You Need</h2>
<p>Now, get ready to send the message. You want to add the following package to your program via the Package Manager Console (or the Manage Packages menu item by right-clicking on your project in Solution Explorer).</p><pre class="csharpcode">install-package WindowsAzure.ServiceBus</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Put in the Code that Does the Heavy Lifting</h2>
<p>Finally, update your program code to grab the connection string and publish the message to the queue.</p><pre class="csharpcode"><span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
{
    var connectionString = ConfigurationManager.ConnectionStrings[<span class="str">"AzureWebJobsServiceBus"</span>].ConnectionString;
    var client = QueueClient.CreateFromConnectionString(connectionString, <span class="str">"NAME-OF-QUEUE"</span>);
    var person = <span class="kwrd">new</span> Person {Name = <span class="str">"James Chambers"</span>, EmailAddress = <span class="str">"james@foo.com"</span>};
    client.Send(<span class="kwrd">new</span> BrokeredMessage(person));
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>That’s it. Four lines of code and you have a way to push out a message and get back to work. Heck, if you can await (as in, in an aysnc method) you can even use SendAsync instead of Send so you don’t tie up your thread.</p>
<h2>Next Steps</h2>
<p>In the next post I’ll show you how to pop stuff off the queue and do something with it, then we’ll have a look at how to debug all of this.</p>
<p>Make sure you <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">pop into Azure</a> and give this a try! There is an amount of free credits that you get during your trial period. If you want to extend that, consider <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575136" target="_blank">getting into MSDN</a> (or getting your boss to) for other cool things as well, like VS Online and access to over a terabyte of development assets &amp; software.</p>
<p>Happy Coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/04/wlEmoticon-smile2.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6051</wp:post_id>
		<wp:post_date>2015-04-15 02:29:55</wp:post_date>
		<wp:post_date_gmt>2015-04-15 02:29:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pushing-data-to-an-azure-service-bus-queue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="queues"><![CDATA[Queues]]></category>
		<category domain="post_tag" nicename="servicebus"><![CDATA[ServiceBus]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3789470679]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The MVP Virtual Conference</title>
		<link>http://jameschambers.com/2015/04/the-mvp-virtual-conference/</link>
		<pubDate>Tue, 21 Apr 2015 11:17:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6091</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There is a great conference coming up that is open to everyone with a keyboard and a monitor. This is a <strong>free</strong> event that Microsoft and my fellow MVPs are putting on, May 14th &amp; 15th.&nbsp; Friends, presenters and fellow Microsoft MVPs from the Americas’ region will be live-streaming for two days to share their knowledge and real-world expertise during a free event, the <strong><a href="http://mvp.microsoft.com/en-us/virtualconference.aspx" target="_blank">MVP Virtual Conference</a></strong>. </p> <p>The MVP Virtual Conference will showcase 95 sessions of content for IT Pros, Developers and Consumer experts designed to help you navigate life in a mobile-first, cloud-first world. Microsoft’s Corporate Vice President of Developer Platform, <a href="http://blogs.msdn.com/b/stevengu/archive/2015/04/02/announcing-the-mvp-virtual-conference.aspx" target="_blank">Steve Guggenheimer</a>, will be on hand to deliver the opening Key Note Address. </p> <p class="side-note">Hey…if you want to play along during the conference, be sure to get yourself a copy of <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575136" target="_blank">Visual Studio</a> or an IDE of your choice, and sign up for your <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">free Azure trial</a>.</p> <p>I was part of the group that had the privilege of picking the sessions. I have to be honest, it wasn’t easy…there were about a billion great topics from the MVPs put forth, and right from the start it was hard to omit any single entry.</p> <p>The are going to be 5 tracks in the conference, so there is something for everyone who works in IT, regardless of platform:</p> <ul> <li>IT Pro English  <li>Dev English  <li>Consumer English  <li>Portuguese mixed sessions  <li>Spanish mixed sessions</li></ul> <p>There are some excellent, industry-leading names on the list. Learn from the best and brightest MVPs in the tech world today and develop some great skills.</p> <p>Be sure to <a href="http://mvp.microsoft.com/en-us/virtualconference.aspx" target="_blank">register</a> quickly (or slowly, if you don’t type too fast) to hold your spot and tell your friends &amp; colleagues. Be sure to register even if you can’t attend to get post-conference resources, links to VoD and other relevant information. There is going to be metric butt-load of information here! </p> <p>The conference will be widely covered on social media, you can join the conversation by following <a href="https://twitter.com/MVPAward" target="_blank">@MVPAward</a> and using the hashtag #MVPvConf.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6091</wp:post_id>
		<wp:post_date>2015-04-21 11:17:00</wp:post_date>
		<wp:post_date_gmt>2015-04-21 11:17:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-mvp-virtual-conference</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="mvp"><![CDATA[MVP]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3786198121]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tools of the Trade: Getting Setup to Code for Microsoft Band</title>
		<link>http://jameschambers.com/2015/04/tools-of-the-trade-getting-setup-to-code-for-microsoft-band/</link>
		<pubDate>Wed, 22 Apr 2015 07:25:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6181</guid>
		<description></description>
		<content:encoded><![CDATA[There is a very competent and capable app for your Microsoft Band in your App Store called Microsoft Health, which is available for iOS, Android and, of course, Windows Phone. But Microsoft Health is just one way you can expose and relay information from the myriad of sensors you’ve got on your wrist, and you’ve likely got ideas on where you’d like to take it.

In my <a href="http://jameschambers.com/2015/03/iot-for-humans-and-developers-getting-started-with-my-microsoft-band/" target="_blank">first article</a> I wrote briefly about IoT in general, and how a device like Microsoft’s Band really opens the door for .NET developers looking to take part in the wearables game. In this article, I’m going to lay out the tools and frameworks that you’ll need in order to develop for the Band.  We’ll also start up a project and install the components we need to get our app ready to talk to the device. If you’re a fairly experience developer and want to dive right in, jump down to the end for the summary and have at’er.
<h2>Setting up Your Cloud Account</h2>
As we collect data from the sensors, we’re going to want to feed it up to the cloud so that as we develop the backend of the app, we have access to all the data.

It only takes about 3 minutes and 17 seconds to give yourself a free shot at using cloud services. Seriously. So <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">pop over to Azure</a> and get yourself signed up for the free trial.
<blockquote><a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">Signup for Azure Here</a></blockquote>
Also, check out <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575136" target="_blank">this link for information on MSDN</a> as you may also qualify for free monthly Azure benefits as well.
<h2>Readying Your Development Environment</h2>
Next, we need a bit of tooling. This isn’t a complicated list and you likely have everything you need already, however, I speak to, meet with and mentor many developers who are locked into older versions of tooling, so here’s a list to follow along with so that we’re all on the same page:
<ul>
	<li>Microsoft Visual Studio 2013 (<a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575136" target="_blank">MSDN</a> or <a href="https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx" target="_blank">Community Edition</a>)</li>
	<li>USB cable for your Windows Phone</li>
	<li>USB charging/sync cable for your Band (included in the box)</li>
</ul>
<p class="side-note">I have a plethora of USB cables from a variety of sources. I have noticed that the Nokia cable that came in the box with the charger is a better quality cable and have had less problems with it than others (from cheap chargers, other phones and cameras).</p>

<h2>Creating the Project</h2>
This part’s pretty easy, just pop open Visual Studio, select File –&gt; New Project, and then switch to the Store Apps/Windows Phone Apps category. From there, Pick the Blank App template and name your project <strong>AliveAndSafe</strong>.

<a href="http://jameschambers.com/wp-content/uploads/2015/04/image2.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://jameschambers.com/wp-content/uploads/2015/04/image_thumb2.png" alt="image" width="474" height="296" border="0" /></a>

We’ll talk more about the application we’re creating next time, but if you’ve read my <a href="http://jameschambers.com/2015/03/iot-for-humans-and-developers-getting-started-with-my-microsoft-band/" target="_blank">previous post</a> you know where I’m going with this. <img class="wlEmoticon wlEmoticon-winkingsmile" style="border-style: none;" src="http://jameschambers.com/wp-content/uploads/2015/04/wlEmoticon-winkingsmile.png" alt="Winking smile" />
<h2>Adding the Band SDK</h2>
Next up is getting the components in our project that we’ll use to interact with the Band and trap information relayed to us from the device itself.

Open up the Package Manager Console (View –&gt; Other Windows –&gt; Package Manager Console) and type the following command:
<pre class="csharpcode">install-package microsoft.band -pre</pre>
As expected, this pulls down the DLLs needed for our app and adds references to:
<ul>
	<li>Microsoft.Band</li>
	<li>Microsoft.Band.Phone</li>
	<li>Microsoft.Band.Store</li>
</ul>
Having a peek inside, we can see a number of interesting objects that we can create, collections to iterate over, sensors to subscribe to and states that we can inspect.

<a href="http://jameschambers.com/wp-content/uploads/2015/04/image3.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://jameschambers.com/wp-content/uploads/2015/04/image_thumb3.png" alt="image" width="593" height="181" border="0" /></a>

We’re going to dive into these in more detail as we build out our app.
<h2>Designing for Microsoft Band</h2>
An important thing to note is that the Band has a really strong and capable design language. After wearing it for only a couple of hours I felt like I had a good sense of what it was trying to do and where I needed to go, which is amazing given the number of sensors and the limited UI that the device presents!

As such, we should likely be good citizens here and respect the design intent that the device put forth. You can find more information on what the designers were thinking by downloading the <a href="http://developer.microsoftband.com/docs/MicrosoftBandVisualGuidelines.pdf" target="_blank">Microsoft Band Visual Guidelines</a> document.
<h2>Next Steps</h2>
Okay…easy lifting today, here’s what we did:
<ul>
	<li>Prepared our development environment by grabbing <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575136" target="_blank">Visual Studio</a>, signing up for <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119" target="_blank">Microsoft Azure</a>, and getting our cables.</li>
	<li>Created a Windows Phone application using the Blank App template.</li>
	<li>Added the Microsoft.Band pre-release package from Nuget to pull in our dependencies.</li>
</ul>
In the next article we’re going to talk a little bit more about our application that we’re building and get a tile onto the Band to represent our application.

Happy Coding! <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://jameschambers.com/wp-content/uploads/2015/04/wlEmoticon-smile3.png" alt="Smile" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6181</wp:post_id>
		<wp:post_date>2015-04-22 07:25:00</wp:post_date>
		<wp:post_date_gmt>2015-04-22 07:25:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tools-of-the-trade-getting-setup-to-code-for-microsoft-band</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="microsoft-band"><![CDATA[Microsoft Band]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781381424]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40021</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; April 22, 2015 (#1998) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/04/22/dew-drop-april-22-2015-1998/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.13</wp:comment_author_IP>
			<wp:comment_date>2015-04-22 12:12:25</wp:comment_date>
			<wp:comment_date_gmt>2015-04-22 12:12:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Tools of the Trade: Getting Setup to Code for Microsoft Band (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40401</wp:comment_id>
			<wp:comment_author><![CDATA[Jim Sherman]]></wp:comment_author>
			<wp:comment_author_email>957653@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>199.180.243.147</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 15:20:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 15:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm a bit biased, as I like this option so much, but once you setup your Azure account I would add the Stackify application performance and log management from the marketplace. It has been so helpful to us that I don't know how I would have troubleshoot Azure apps prior]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082044309]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Inbox:0 - A Practice of Awesome</title>
		<link>http://jameschambers.com/2015/04/inbox0-a-practice-of-awesome/</link>
		<pubDate>Tue, 28 Apr 2015 18:57:51 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6321</guid>
		<description></description>
		<content:encoded><![CDATA[Uhg. That feeling when you glance at your mail client and see hundreds of messages, most of which are unread. They trail on over weeks or months and create an instant stress-booster when you sit down at your desk. It’s the feeling that someone is <em>always</em> waiting on you to do something, and you can’t quite put your finger on who, or what, or when you had that message saying that you needed to do it, but you’re always suspicious of the messages that are just out of view on-screen.

Stop the madness! You don’t have to live like that, and I’m telling you it’s way better to achieve “Inbox:0” on a daily basis. It’s better to spend a small, regulated portion of your day (or a few of those windows) dedicated to cleaning your inbox and to never have the weight of email on your shoulders again.

I was first inspired to do this through a talk at WebStock by <a href="https://twitter.com/shanselman" target="_blank">Scott Hanselman</a>, which you can view <a href="http://www.hanselman.com/blog/ItsNotWhatYouReadItsWhatYouIgnoreVideoOfScottHanselmansPersonalProductivityTips.aspx" target="_blank">here</a>. I have to admit, I struggled for the first little while, getting on track and trying to maintain the practice. But, I’m going to do something that I couldn’t have done two years ago, and that is to share an image of my inbox.  Here it is:

<a href="http://jameschambers.com/wp-content/uploads/2015/04/image4.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://jameschambers.com/wp-content/uploads/2015/04/image_thumb4.png" alt="image" width="244" height="206" border="0" /></a>

Beauty, eh? This isn’t here as bragging rights, I’m just trying to illustrate that this is achievable and can be a reality for you. The only really <em>hard</em> day was the first one, when I had to make the decision to nuke everything in there. From there it was just about a little discipline and establishing some good habits.
<h2>How to Get There</h2>
Okay, I’m a pack rat. I didn’t <em>really</em> nuke everything in my inbox, but here’s the process I went through to whittle that baby down to a reasonable amount of mail.

The first step was to just admit to myself that anything older than a couple of weeks in age likely wasn’t going to be dealt with in a timely fashion. In other words…it meant that if someone had sent an email hoping to get my attention, they would have to write again. It honestly felt like I was letting people down by removing their messages. But the messages had already been reduced to clutter by virtue of my care to-date, so the damage had already been done. <strong><em>So, let it go.</em></strong> That was the biggest hurdle.

Next, I created a folder called Archive. I just wanted to be able to be able to find the messages should something come up (for example, needed a response from a manager or client). I moved <em>everything</em> in there that was 2 weeks old or older.  I was starting from over 10,000 messages in my inbox with 2,000+ unread.  This one step took me down to under 1,400 messages.

The final piece was just automating a couple of tasks. I don’t need all my build server notifications, Azure alerts or application log notices. I unsubscribed from the vendor bits I was no longer interested in (sorry, IBM and Salesforce), then deleted the messages. I created rules for these to mark the “everything is okay” messages as read and to move them to a folder. I applied these rules and got to under 250 messages.

20 minutes in, and I was within striking distance.

From that point it took me about 2 hours, but I was able to weed through the ones that weren’t really addressed to me, respond to some that needed attention and finally send a few meeting invites to folks who were requesting my time.
<h2>How to Stay There</h2>
The next bits aren’t nearly as hard, you just need to keep a little organized. I create top-level folders like “Projects” and “General”, then sub-folders to put client- or project-specific communication. But I don’t go overboard either - I just make small enough buckets that I can find what I’m looking for when I need it. I make sure that any new email list messages that come in get the “unsubscribe” treatment.

I also gave myself a few rules, namely:
<ul>
	<li><strong>I don’t check my email as it arrives</strong>, I try to only check once an hour or so. There are exceptions, like when I know we’re in a crunch, or when I’m waiting for a message from someone in particular.</li>
	<li><strong>I will scan my inbox and decide if it’s time for email</strong> before I dive in and address the messages that are waiting.  This means that, yes, sometimes it will be several hours, or even a couple of days before I clear out my inbox, but this is a priority thing. If my voice isn’t needed on a thread I try to stay out and keep focused on my work. But when I <strong><em>do</em></strong> dive in and start reading…</li>
	<li><strong>I don’t leave messages in my inbox</strong>, also known as the “one touch” rule. There are really only a few things you can do with a message: respond to it, forward it to someone who can respond to it, or take an action on it.  I’ll come back to that in a second.</li>
	<li><strong>I create rules to keep me sane</strong> and avoid clutter in the first place. If new alerts are created, or there are things I must be subscribed to, I create a rule to deal with those.</li>
</ul>
<h2>Taking Action on Your Email</h2>
As I mentioned, I will often respond to an email right away, or perhaps forward it on to someone who can help resolve the issue at hand. But other times it requires taking action. These should be done in a timely manner and none of them take much time to do, only a minute or two:
<ul>
	<li><strong>If there is work for me to do, I put it on my calendar</strong>. I will block out a piece of time to address it, and if it’s for the benefit of someone else, I let them know that I’ve done so. This way, I’ve set an expectation I can manage and they know when they are going to get the answer or result they need, and the message is out of my inbox.</li>
	<li><strong>If there is work that involves others, I schedule a meeting or work session</strong>. This can be a Skype call, a pair-programming gig or even just an online chat. Sometimes this can be an immediate action depending on those involved, other times it will be a day or two or several before we can get to it. But it’s on my calendar at that point, so it can get out of my inbox.</li>
</ul>
There are things that don’t belong in your inbox. That’s it. So get them out and where they belong, be it in someone else’s hands or on your calendar.
<h2>Fly Away, Stanley, be Free!</h2>
<a href="http://jameschambers.com/wp-content/uploads/2015/04/image5.png"><img style="background-image: none; float: right; padding-top: 0px; padding-left: 0px; margin: 0px 0px 0px 15px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://jameschambers.com/wp-content/uploads/2015/04/image_thumb5.png" alt="image" width="304" height="150" align="right" border="0" /></a>

So, there’s really no secret sauce here. If you’re still reading this, you’re likely willing to give this a try, so carve out two and a half hours in your schedule and give it a go. Make rules that work for you, and don’t sweat it if it takes you one or two attempts to make it work, or a couple of weeks to find your groove on getting things cleared out. In no time, you’ll be rocking Inbox:0 and enjoying the stress-free benefits of seeing absolutely nothing when you check your email. Just like Stanley.

Happy coding! <img class="wlEmoticon wlEmoticon-smile" src="http://jameschambers.com/wp-content/uploads/2015/04/wlEmoticon-smile4.png" alt="Smile" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6321</wp:post_id>
		<wp:post_date>2015-04-28 18:57:51</wp:post_date>
		<wp:post_date_gmt>2015-04-28 18:57:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>inbox0-a-practice-of-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="life-hacks"><![CDATA[Life Hacks]]></category>
		<category domain="post_tag" nicename="practice"><![CDATA[Practice]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208789]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40101</wp:comment_id>
			<wp:comment_author><![CDATA[Cheryl goossen]]></wp:comment_author>
			<wp:comment_author_email>cgoossen@inethome.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.81.40.6</wp:comment_author_IP>
			<wp:comment_date>2015-05-01 14:24:23</wp:comment_date>
			<wp:comment_date_gmt>2015-05-01 14:24:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,
I thoroughly enjoyed your article on decluttering one's inbox. I shutter to tell you I have over 11,000…. :/
I LOVE the easy strategies… and I will attempt to start the process. A question though, as my iPhone and computer receive the same email, and when I open it on my phone it does not appear on my home computer, they are not duplicated. In other words, if I delete and rearrange on one, must I do this twice? You're probably having a chuckle at my lack of techi-ness but I can handle it! Tell me how silly I am and let's get this done.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812907]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40131</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-05-04 13:33:50</wp:comment_date>
			<wp:comment_date_gmt>2015-05-04 13:33:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Cheryl!  It seems to me that the duplciation or lack thereof might be something to do with your phone settings, but that is difficult to diagnose from here. I know that for most folks, when you open/read a message on your phone, it's marked as read on the email server as well. Likewise, if you delete or move something on your phone or computer, the server is usually updated as well, and the other device should be kept in sync. 

I don't have much experience on configuring iPhone mail settings, but you could likely call into their support line for assistance, and/or setup a brief meeting at their support desk the next time you're close to a store (they allow you to make appointments).

Good luck with the email cleansing!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40101</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812907]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812909]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Project K, dnvm, dnx, &#038; dnu and Entity Framework 7 (for bonus points)</title>
		<link>http://jameschambers.com/2015/05/project-k-dnvm-dnx-dnu-and-entity-framework-7-for-bonus-points/</link>
		<pubDate>Mon, 04 May 2015 12:58:48 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6401</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Things, they are a-changing!</p> <p><a href="http://jameschambers.com/wp-content/uploads/2015/05/image.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: right; padding-top: 0px; padding-left: 0px; margin: 0px 0px 0px 15px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/05/image_thumb.png" width="244" align="right" height="157"></a>If you’ve played with different versions of ASP.NET 5 and MVC 6 along the way and have recently updated to the RC build of Visual Studio 2015 you’ll likely have noticed a few changes.&nbsp; Just a couple.</p> <p>I found that I’ve been mostly able to survive the transition with a few questions around runtimes and where things have moved, but not all the bits are obvious. Here’s a list of some things that you’ll likely want to know as you navigate the M-V-Seas.&nbsp; (See what I did there? <img class="wlEmoticon wlEmoticon-smilewithtongueout" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile with tongue out" src="http://jameschambers.com/wp-content/uploads/2015/05/wlEmoticon-smilewithtongueout.png"> )</p> <p class="side-note">A big thanks goes out to fellow Canadian <a href="https://twitter.com/stimms" target="_blank">Simon Timms</a> and beach bum <a href="https://twitter.com/Dave_Paquette" target="_blank">Dave Paquette</a> for stumbling through these bits with and for me. #experts</p> <h2>Renaming and Reorganization</h2> <p>There used to be two separate commands for language services and running/booting up a site or application. These commands (k and klr) have both been merged with the runtime environment and are all now part of dnx, a.k.a. the .Net Execution environment.</p> <p>The version manager, which was previously the kvm script (ps1 or sh, depending on environment), is now a command line utility called dnvm, or .Net Version Manager.</p> <p>Finally, a new utility has been added that replaces the previous dependencies manager with a few enhancements (such as command hoisting from your project.json). The new name is dnu (the .Net Development Utility) and you use it to restore or manage packages, create NuGet packages or publish your project.</p> <p>So, in summary:</p><pre class="csharpcode">k, klr, kre  =&gt; dnx
kvm          =&gt; dnvm
kpm          =&gt; dnu</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>So You Want to Run a Migration?</h2>
<p>We used to use the package manager console in Visual Studio to do our migrations work, however, this is not currently the case in VS2015. I imagine that this will continue to improve, but there is still a delta in the way that we used to do things. Today, we’re going to do things a little differently: in a properly prepared console, you’ll type the following in your <strong>project directory</strong> (not your solution directory):</p><pre class="csharpcode">dnx . ef [options] [command]</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This command tells the .Net execution environment to use the current directory and to run the ef command. From there you could type migration or whatever else you’re looking for. Leaving the options and command out, for instance, gives you the magic unicorn of awesome.</p>
<h2>Wait, That Didn’t Work?</h2>
<p>First of all, you’ll need to make sure that you have the tooling for the dn* utilities on your PATH. There needs to be environment variables setup to point you to the correct runtimes, or rather, the runtimes you’re currently targeting. You can see all the runtime versions you have installed by typing:</p><pre class="csharpcode">dnvm list</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Typically, you’ll see two different <strong><em>runtimes</em></strong> (clr and coreclr) for each architecture (x64, x86), and you’ll see each of those for each <strong><em>version</em></strong> you have installed.</p>
<p>The “correct” version for your purposes may be a moving target, so make sure you have a runtime and version that works with the version of EF you have. If you’re not sure (or you thought you were sure but things aren’t working) take to <a href="https://jabbr.net/#/rooms/EntityFramework" target="_blank">Jabbr</a> and ask for a hand (they are great there).</p>
<p>Next, your solution and/or project will have to have the correct references to EF. Edit your project.json to have the following dependencies and commands (you can do this in VS or Notepad or whatever tool you like, just save the file when you’re done):</p><pre class="csharpcode">  <span class="str">"dependencies"</span>: {
    <span class="str">"EntityFramework.SqlServer"</span>: <span class="str">"7.0.0-beta4"</span>,
    <span class="str">"EntityFramework.Commands"</span>: <span class="str">"7.0.0-beta4"</span>,
    ...
  },

  <span class="str">"commands"</span>: {
    <span class="str">"ef"</span>:  <span class="str">"EntityFramework.Commands"</span>,
    ...
  },</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Almost there. Now we need to restore those packages locally so that you can use the EF tooling. To do that, we’re going to use the following command from the <strong>solution directory</strong>:</p><pre class="csharpcode">dnu restore</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Voila! You should be good to go! Navigate to your <strong>project directory</strong> and hack away at your migrations. </p>
<h2>Keeping Up to Date</h2>
<p>So, go grab Visual Studio 2015! If you run into trouble there is a wealth of information out there (albeit, much of it is quickly becoming outdated or conflicting). As I already mentioned, <a href="https://jabbr.net/#/rooms/EntityFramework" target="_blank">Jabbr</a> is a great place to ask questions, as are Twitter and Stack Overflow. <a href="https://twitter.com/bricelambs" target="_blank">Brice Lambson</a> periodically posts updates on his <a href="http://www.bricelam.net/" target="_blank">blog</a>. I have found that the documentation for Asp.Net 5 has also been kept fairly up-to-date, which you can <a href="http://docs.asp.net/en/latest/" target="_blank">read here</a>.</p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/05/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6401</wp:post_id>
		<wp:post_date>2015-05-04 12:58:48</wp:post_date>
		<wp:post_date_gmt>2015-05-04 12:58:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>project-k-dnvm-dnx-dnu-and-entity-framework-7-for-bonus-points</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781195993]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40141</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; May 5, 2015 (#2007) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/05/05/dew-drop-may-5-2015-2007/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.122</wp:comment_author_IP>
			<wp:comment_date>2015-05-05 11:48:11</wp:comment_date>
			<wp:comment_date_gmt>2015-05-05 11:48:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Project K, dnvm, dnx, &amp; dnu and Entity Framework 7 (for bonus points) (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40151</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Timms]]></wp:comment_author>
			<wp:comment_author_email>stimms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.simontimms.com</wp:comment_author_url>
			<wp:comment_author_IP>199.192.105.3</wp:comment_author_IP>
			<wp:comment_date>2015-05-06 12:43:20</wp:comment_date>
			<wp:comment_date_gmt>2015-05-06 12:43:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for posting the update, James. It is really beneficial to the community to have experts such as you involved.  Do you think the incompatibilities between packages will continue after release? It seems to be difficult to figure out the exact combination of packages to get everything in dnx (is that what we're calling it?) to work together.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812922]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40161</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-05-07 01:13:47</wp:comment_date>
			<wp:comment_date_gmt>2015-05-07 01:13:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Right, it's not in the sweet spot yet. More like the sweat spot right now, seems you have to put a bit of elbow grease in. 

But I do believe it will get better. The team is asking for feedback on where the pain points are so that they can improve messaging when these things crop up (mis-matched versions etc.). So, I guess I should be adding issues in GitHub :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40151</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812922]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813050]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40171</wp:comment_id>
			<wp:comment_author><![CDATA[Luis]]></wp:comment_author>
			<wp:comment_author_email>LPedraz1981@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.144.213.9</wp:comment_author_IP>
			<wp:comment_date>2015-05-07 10:10:01</wp:comment_date>
			<wp:comment_date_gmt>2015-05-07 10:10:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks James, you save my day! The database migration with k was driving me mad :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812923]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40181</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-05-07 13:10:14</wp:comment_date>
			<wp:comment_date_gmt>2015-05-07 13:10:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent, glad I could help!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40171</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812923]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813049]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41191</wp:comment_id>
			<wp:comment_author><![CDATA[Sergey Kandaurov]]></wp:comment_author>
			<wp:comment_author_email>skand@inbox.ru</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>112.207.237.250</wp:comment_author_IP>
			<wp:comment_date>2015-08-05 09:01:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-05 09:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm struggling with "properly prepared console" part. Would be cool if you could add a couple of words on it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2175298672]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Rethinking our Practices with the MVC Framework</title>
		<link>http://jameschambers.com/2015/06/rethinking-our-practices-with-the-mvc-framework/</link>
		<pubDate>Sun, 14 Jun 2015 02:52:59 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6442</guid>
		<description></description>
		<content:encoded><![CDATA[We get set in our ways, don't we? It's funny how the sharper and more confident we get with our frameworks and the tooling we employ to work with them, we also get a little more attached to our way of doing things. And then along comes a major version change, ripe with breaking changes and new bits to twiddle and we're left saying, "But, that's not how we've always done it!".

Case in point: <strong>service injection into views</strong>. In ASP.NET's MVC Framework 6 we get this new concept which, if we're going to accept, requires that we relax on our thinking of how we've always done things.
<p class="side-note">My friends <a href="https://twitter.com/dave_paquette" target="_blank">Dave Paquette</a>, <a href="https://twitter.com/stimms" target="_blank">Simon Timms</a> and <a href="https://twitter.com/canadianjames" target="_blank">myself</a> have been ruffling through a few of these types of changes, and Simon did a great job of illustrating how we used to get data into our views, and how we might do it in <a href="http://blog.simontimms.com/2015/06/09/getting-lookup-data-into-you-view/" target="_blank">tomorrow's MVC</a>.  For a walkthrough of service injection I highly recommend his article on it.</p>
How does it work? The new inject feature gives us the ability to asynchronously invoke methods on classes that are dynamically created and given to our view. It’s IoC for your UI.

Personally, I'd been wrestling with a good use case here because we had a way to do it, and it seems an obvious one (illustrated by Simon) had been missing my thought stream, likely because it's been clouded for a few years with ViewBag. In all reality, the idea of using the ViewBag – a dynamic object that is double-blind, easily forgotten about and easily polluted – to push bits of data to the view has always kind of bugged me, no less than using filters did, but we didn't have an elegant, framework-driven mechanism to make it happen more gracefully.  We do now.
<p class="side-note">Also, let’s not confuse things here: In more cases than not, your ViewModel is going to be the correct place to put your data, and where I’ve put my data for most things – like drop down lists – but this type of feature is exciting because it opens the door to explore new options in building views and experiences for our users.</p>

<h2>But, doesn't it break the design of MVC?</h2>
[caption id="attachment_6491" align="alignright" width="300"]<a href="http://jameschambers.com/wp-content/uploads/2015/06/nuke.jpg"><img class="size-medium wp-image-6491" src="http://jameschambers.com/wp-content/uploads/2015/06/nuke-300x188.jpg" alt="Source: http://www.nv.doe.gov/library/photos/" width="300" height="188" /></a> Sometimes things blow up when you try them out, but you still gotta try.[/caption]

Perhaps. Maybe, if you want to say, "The only definition valid for any framework is the original definition." But we have more tools today to do our job, and in particular for this case dependency injection which has become a first-class citizen in ASP.NET. So, let's rewind a bit and ask, why is it a bad practice to give a component the pieces it needs to do its work?

Let's think of the type of problem that we're trying to solve here, as Simon did in his article: a view needs to populate a dropdown list. It doesn't need to access the database, and it shouldn't have it. It doesn't need to know a connection string, or if data is coming from a cache, a web service or otherwise, it just needs the data. Giving it an interface by which to look it up, well, to me that seems like a good idea.

If instead you favor the approach of using the controller to populate the ViewBag or use filters (or other techniques) you inherently introduce coupling to a specific view in the controller by forcing it to look up data to populate a dropdown box. <em>You are still injecting data into the view.</em> In my mind, the controller should know as little as possible about the view.  Why should I have to change my controller if I need to change my view?
<p class="side-note">I want to make a clear distinction here, though, as I do believe the controller answers very specific concerns, namely, those that deal with a particular entity. But the PersonController shouldn't have to know the list of Canadian Provinces, should it?</p>

<h2>Don't need to know where I'm going, just need to know where I've been</h2>
The assumption that the controller provides everything the view needs is guided by past pretence. It was true in MVC5 and earlier because it was what we had to work with. My point is that in MVC6 we now have a construct that allows:
<ul>
	<li>Separation of concern/single responsibility</li>
	<li>Testability</li>
	<li>Type safety</li>
	<li>Injectable dependencies</li>
</ul>
In my mind, the controller is just a component. So is the view. The controller's concerns are related to the entity in question. The view is required to render correct UI such that a form can be filled out in a way that satisfies the requirements of the view model. Again, why use a person controller to retrieve details about countries and states?

I don't see controllers as any more important than any other component. They have things they need, and they should have those things injected. My controllers don't talk to the database, they talk to command objects and query objects via interface and those are injected from an IoC container.

I think now, with views as first-class components, that we can look at views in the same way.
<h2>But what about ViewBag?</h2>
With ViewBag (and filters) we have a problem that we're not really talking about in the best interest of not upsetting anyone. The fact that my controller has to do the lifting for the combo boxes is awkward and doesn't really help us out too much with maintaining SRP. But we didn't previously have a good way to address this.

We also tend to overlook the fact that Views are effectively code. Why can't our principles apply to them as well? Of course I shouldn't access the database from the view, but why can't I know about an interface that does (and have it injected)?

This is a great use case of this new feature, and one that demonstrates that "not changing for the sake of not changing" isn't a good mantra. If my view code/class/script is responsible for rendering the view, I see no problem injecting into it the things it needs to do so.

After all, isn't that what you're doing with ViewBag? Just injecting things into the view through the Dynamic? Except, with ViewBag, no one sees type problems and everyone has to cast. Now we've got run time errors.

There is the argument that says that even if we're abstracting away the data access, we're introducing the ability for the view to call the database. Again, I don't think the view is any less important a component in the scheme of things, and there is a level of appropriateness with which we must use the feature. Will it be abused? Likely. You don't want to be injecting database change-capable components into the view, but that is more a case of bad choices in implementation. You can completely destroy the maintainability of a project and wreak havoc on your users with service injection, but that doesn't mean you should avoid it. I've seen people write 1,000 lines of code in a method, but that doesn't mean I don't use methods any more.

<strong>When changes come to frameworks, I think it's okay to rethink our best practices</strong>. Taking Simon's approach we have:
<ul>
	<li>Interface-based injection</li>
	<li>Abstraction from underlying data access strategy (db, cache, text file, whatever)</li>
	<li>Testable components</li>
	<li>Maintaining SRP in our controller and view</li>
	<li>No casting from dynamic to proper types</li>
</ul>
I'm okay with this approach and will be using this approach in MVC 6 projects.

I highly encourage you to do your own reading on this and explore the feature in greater detail. Here are a few links for your consideration.
<ul>
	<li>View components and Inject in <a href="http://www.asp.net/vnext/overview/aspnet-vnext/vc" target="_blank">ASP.NET MVC 6</a></li>
	<li>Simon Timms: <a href="http://blog.simontimms.com/2015/06/09/getting-lookup-data-into-you-view/" target="_blank">Getting Lookup Data Into You View ASP.net MVC 6 Version</a></li>
	<li>The ASP.NET <a href="https://github.com/aspnet/Mvc" target="_blank">MVC 6 repo on GitHub</a></li>
</ul>
Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://jameschambers.com/wp-content/uploads/2015/06/wlEmoticon-smile.png" alt="Smile" />

<span style="color: #999999;"><em>Image credit: http://www.nv.doe.gov/library/photos/</em></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[It's funny how the sharper and more confident we get with our frameworks and the tooling we employ to work with them, we also get a little more attached to our way of doing things. And then along comes a major version change, ripe with breaking changes. So, what's a dev to do?]]></excerpt:encoded>
		<wp:post_id>6442</wp:post_id>
		<wp:post_date>2015-06-14 02:52:59</wp:post_date>
		<wp:post_date_gmt>2015-06-14 02:52:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rethinking-our-practices-with-the-mvc-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="mvc6"><![CDATA[MVC6]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3846748310]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_11676617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_11676610</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40331</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Timms]]></wp:comment_author>
			<wp:comment_author_email>stimms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.73.154.130</wp:comment_author_IP>
			<wp:comment_date>2015-06-14 15:16:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-14 15:16:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What a great discussion! If this was one of those sites where you could vote on who wore it better (or who wrote it better) then your article would be Sarah Jessica Parker.



I suspect that having really good support for dependency injection all over the framework is going to open ourselves up to many interesting scenarios. In this case I've always felt that controllers should be for for retrieving and processing data that is specific to the business process. Things like lookup values tools should be secondary and not clutter up the controller. 


Another good example that has been on my mind as of late is unit conversions. If we want to avoid confusing units on the server then we should pick a single unit system and find a boundary where all quantities crossing that boundary should be in that system. To make math easier this boundary should be as close to the user as possible. Units are a view level concern. So injecting a service for doing the conversion would be ideal. Likely this is worth a blog post on its own. 


Thanks for adding some clarity to the discussion.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2078577135]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40341</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; June 13, 2015 (#2035) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/06/15/dew-drop-june-13-2015-2035/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.13</wp:comment_author_IP>
			<wp:comment_date>2015-06-15 12:01:39</wp:comment_date>
			<wp:comment_date_gmt>2015-06-15 12:01:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Rethinking our Practices with the MVC Framework (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40351</wp:comment_id>
			<wp:comment_author><![CDATA[The Morning Brew - Chris Alcock &raquo; The Morning Brew #1882]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2015/06/16/the-morning-brew-1882/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.109.184</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 08:32:15</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 08:32:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Rethinking our Practices with the MVC Framework &#8211; James Chambers discusses how the evolution of the ASP.NET MVC framework will cause us to re-evaluate some of our practices when creating applications using this architectural pattern [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40352</wp:comment_id>
			<wp:comment_author><![CDATA[Callum Bansa]]></wp:comment_author>
			<wp:comment_author_email>cbansa75@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>37.209.215.138</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 08:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 08:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not sure you should be comparing View DI with use of ViewBag. Both are inherently wrong. ViewBag was a hack for lazy developers who did not create strongly typed view models containing everything the view needed for rendering. This would include any dropdown values. The whole idea behind MVC is for the View component to render what it is given. It should not need to call anything to retrieve data (via an interface or not). This is simple to code and easy to understand. View DI is only going to make it harder to see what is going on. There may be valid cases for using View DI but dropdown list values are not one of those cases.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2081551285]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40361</wp:comment_id>
			<wp:comment_author><![CDATA[Callum Bansa]]></wp:comment_author>
			<wp:comment_author_email>cbansa75@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>37.209.215.138</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 08:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 08:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not sure you should be comparing View DI with use of ViewBag. Both are inherently wrong. ViewBag was a hack for lazy developers who did not create strongly typed view models containing everything the view needed for rendering. This would include any dropdown values. The whole idea behind MVC is for the View component to render what it is given. It should not need to call anything to retrieve data (via an interface or not). This is simple to code and easy to understand. View DI is only going to make it harder to see what is going on. There may be valid cases for using View DI but dropdown list values are not one of those cases.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2081551285]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40371</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 13:13:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 13:13:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, I don't typically start from a place of things being "inherently wrong". I explored ViewBag very early and found that it wasn't the right fit for me or the projects I was working on. But I haven't come to calling anyone who uses ViewBag a "lazy developer", either.

I think you're arguing semantics when you say the "whole idea behind MVC is for the View component to render what it is given". It doesn't have to call a method, it can loop over a collection exposed by an interface. Implementation details are up to the developer. How data is given the view is what's at question here, and I'm making the case that injection is better than ViewBag (and to Simon's point, filters).

Both view injection and view components are going to be used in ways that do not make sense from a maintainability perspective. You can't stop that, just like you can't stop people from using ViewBag. And hey, maybe view injection is going to be a bad idea, but you don't know, you haven't tried it at scale yet. 

I think it's worth exploring.

Ultimately, though, you've missed the point of the article: there is no benefit in staying in our pre-defined little boxes. If someone thinks that there is one and only one academic definition and builds dogma around it based on how it used to be, I'd rather not work with that developer. If all we do is keep building things the way they've always been done we would never see progress.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40352</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2081551285]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2081823736]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40381</wp:comment_id>
			<wp:comment_author><![CDATA[Chandan Rai]]></wp:comment_author>
			<wp:comment_author_email>charychandan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.82.78.210</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 15:01:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 15:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Another way of doing this would be to write html helper extension methods, that will talk to the service layer, StateService for example and render the dropdown.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082003826]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40391</wp:comment_id>
			<wp:comment_author><![CDATA[Chandan Rai]]></wp:comment_author>
			<wp:comment_author_email>charychandan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.82.78.210</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 15:03:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 15:03:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Of course, in MVC6, we have a better way.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082006700]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40392</wp:comment_id>
			<wp:comment_author><![CDATA[Funbit]]></wp:comment_author>
			<wp:comment_author_email>contact@funbit.info</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>126.255.18.101</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 15:08:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 15:08:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Totally agree with Callum Bansa...
MVC pattern was designed so that views render what they are given. Point.
You cannot successfully (I mean in the long term) use non-MVC pattern with MVC framework.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40371</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2081823736]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082018138]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40411</wp:comment_id>
			<wp:comment_author><![CDATA[apuchkov]]></wp:comment_author>
			<wp:comment_author_email>alexander.puchkov@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.35.136.230</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 18:00:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 18:00:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You made a statement that it cannot work long term. Can you provide more argumentation why you think so?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40392</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082018138]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082352917]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40421</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 18:40:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 18:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, I'm not sure I follow there either. I've used a myriad of patterns - IoC, SRP, singleton, adapter, façade, etc. - all in conjunction with MVC.

Further, this is actually part of the MVC Framework. It's built in. That is not to say that we have to use every piece of the framework, nor does it imply that all parts of what is provided meet the classic definition of the MVC pattern. It doesn't even mean that it's right.

Can't something new be born of this? Do we need to dismiss it before we explore it?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40411</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082352917]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082451200]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40431</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-06-16 18:45:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-16 18:45:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Simon. I think it's best to remember that it's still just a discussion. The number of long-running apps on MVC6 is currently 0. That's a worldwide stat. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40331</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2078577135]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082462250]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40441</wp:comment_id>
			<wp:comment_author><![CDATA[Funbit]]></wp:comment_author>
			<wp:comment_author_email>contact@funbit.info</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>153.173.14.43</wp:comment_author_IP>
			<wp:comment_date>2015-06-17 01:16:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-17 01:16:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, first of all, it is kinda strange to mix MVC pattern with Adapter, Facade and Singleton. Of course they can and should live together. 
I was trying to say that moving business logic (even via interfaces) to views is wrong. Sure, you may try to do that, but it will become difficult to manage after, especially when you have to share the project with other developers, designers etc. I don't even want to start explaining why using ViewBag or dynamic models is wrong either. I've seen some big projects that use this model (like Orchard). Other developers will spend hours trying to understand where the model comes from and what properties does it have. If you don't want to control all your logic via Controllers then it would be better to split it and use new ViewComponents.


To summarize, if you use MVC framework then: 
1. Views must depend only on their model, ideally without control statements (or just some basic stuff like if/for, using model properties).
2. Models must not depend on anything at all. They may have some property logic, sometimes even methods that depend on other model properties. But that's it.
3. Controllers/ViewComponents must have all business logic. They can depend on anything.
This way all your co-workers/designers will be happy to work with such projects.
Regards,
Funbit]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40421</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082451200]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2083058024]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40451</wp:comment_id>
			<wp:comment_author><![CDATA[Funbit]]></wp:comment_author>
			<wp:comment_author_email>contact@funbit.info</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>153.173.14.43</wp:comment_author_IP>
			<wp:comment_date>2015-06-17 01:16:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-17 01:16:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have answered below.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40411</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2082352917]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2083058258]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40491</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Palmer]]></wp:comment_author>
			<wp:comment_author_email>jason.palmer1971@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>109.146.111.44</wp:comment_author_IP>
			<wp:comment_date>2015-06-19 14:38:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-19 14:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If something is easy to do and has obvious benefits people are more likely to do it and more often.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2087972319]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40501</wp:comment_id>
			<wp:comment_author><![CDATA[David Paquette]]></wp:comment_author>
			<wp:comment_author_email>david.paquette@usask.ca</wp:comment_author_email>
			<wp:comment_author_url>http://www.davepaquette.com</wp:comment_author_url>
			<wp:comment_author_IP>216.144.88.218</wp:comment_author_IP>
			<wp:comment_date>2015-06-19 14:57:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-19 14:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Lots of great discussion here! I see a few people arguing that _right_ place to retrieve data for dropdown lists is in the controller. In my opinion, doing this in the controller adds complexity to the controller. It complicates testing and makes a single controller action responsible for too many things. Moving this out to a service that is injected into the View actually makes sense to me. After all, the View is the ONLY component that needs to know about the dropdown list values. Separating the logic of getting this dropdown list data into a service and only using it where it is needed makes the system overall easier to maintain and understand. The approach is also strongly typed which avoids any problems with the ViewBag approach. The view's dependency on dropdown list service is clearly stated within the view so there shouldn't be a problem there. Keep in mind also that the View itself isn't getting the data on it's own. It is relying on a service for that.


For those arguing that the controller is the _right_ way, what exactly is the major advantage over the approach proposed here? Sure, this new approach might seem a little strange because it wasn't really an option in the past. I would encourage people to keep an open mind and give this a try before passing judgement. I think there are a lot of advantages to the approach and no real disadvantages that I can see. I can tell you from experience that being dogmatic about a given design pattern doesn't lead to better software design.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40441</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2083058024]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2088005490]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40591</wp:comment_id>
			<wp:comment_author><![CDATA[vlince]]></wp:comment_author>
			<wp:comment_author_email>vlince@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>192.222.129.169</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 11:47:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 11:47:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article James! There’s definitely food for thoughts on
this…

I’m somewhat torn apart between two feelings.

While you build a house (or building), you are more than
welcome to build it anyway you want (Ex: Sagrada Familia in Barcelona). Wind
factor, floods, fire, elevator shaft etc…are all factors that will influence
the way the house (or building) is built. Over the years, engineers and mankind
have created construction guidelines and rules that must be followed for guaranteed
best results. 

In software, design patterns and guidelines are also applied
and when followed, increase the likelihood of getting good results (notice
I say good, not best results because best results is so arbitrary).

Over the past several years, I’ve been following this
typical workflow:
-Controller injects a Service within its constructor.
-ActionResult creates an instance of a ViewModel.
-The ViewModel is populated using the Service.
-The ViewModel is then returned to the View (which is now strongly typed).

Although boring at times, following the above workflow insures
an entire team has homogeneous code thus making maintainability and readability
easier.

My concern with allowing stuff to be injected in the View is
that I may end up having Views that behave differently from other Views…increasing
the discoverability of features and behavior of those Views.

By allowing this, I’m increasing the potential of not having
homogeneous code within the team which could result in more code smells.

In the end, I agree with your statement that we can’t
dismiss it before we explore it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101193377]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Three Types of Relationships You Need to Survive as a Remote Worker</title>
		<link>http://jameschambers.com/2015/07/three-types-of-relationships-you-need-to-survive-as-a-remote-worker/</link>
		<pubDate>Tue, 14 Jul 2015 12:02:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6591</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Getting through your work day on your own is easy enough.&nbsp; Over the long run, though,&nbsp; you’re going to need to have some solid relationships in your life to help get you through the rough patches and pick you up from the falls, but more importantly, to be there when it’s time to celebrate the wins.</p> <p>While these are going to seem obvious at first, I want to make the point that they’re by no means effortless. In fact, some of the closest connections in your life can be the most affected by your choice to have your home serve also as your place of work.</p> <h2>Your Co-Workers</h2> <p><a href="http://jameschambers.com/wp-content/uploads/2015/07/office_relationships.jpg"><img width="244" height="168" title="office_relationships" align="right" style="margin: 0px 0px 0px 15px; border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: right; display: inline; background-image: none;" alt="office_relationships" src="http://jameschambers.com/wp-content/uploads/2015/07/office_relationships_thumb.jpg" border="0"></a>In the movie <em>Office Space</em>, the main character Peter Gibbons pines that his motivation to work, or rather, to “work just hard enough not to get fired,” stems from unhealthy relationships with management. This <strong>cannot</strong> be your reality as a remote worker, and you need to make efforts to establish (and maintain) trust with your boss and teammates.</p> <p>I have worked in blended environments where there was a head office with regular staff, but many remote workers and many office workers who had the option to work from home as they elected to do so. Being a permanent remote with very little office time (averaging about a day a month in the office) it was harder to get to know folks, but I knew it was really on me to own it.</p><p>Before you start at a company as a remote worker, or before you start working from home, talk to the management and other staff that already work remotely to see what it is like. If the atmosphere supports it, flying solo can be a great experience, but you still need the support of ground control. If you work as the only remote worker, or if management doesn’t trust or understand how productivity can work remotely, it may not be the right time for you to engage in flight.</p> <h2>Fellow Remote Workers</h2><p>These ones are pretty important, especially in a company where there is a block of folks that work full-time at the office and a group that works remotely. Why are these folks good to know?</p><p>Because they <em>get ya</em>. They’re on the Skypes. They’re on the Slack. </p><p>They are trying to do the same things that you are doing and likely face the same challenges as you do. They look for solutions and have found tools that help them avoid the pitfalls. You’ve likely had to work through something that they haven’t yet, you have it figured out and it’s great to be able to share that with them. </p><p>Don’t be afraid to share your failures or ask for help! Being a good remote worker means mentoring and being mentored by other remote workers so that collectively we can all be really good at it. </p> <h2>People With Absolutely Nothing to do with Work</h2> <p>Ahhh…five o’clock, am I right? It’s that time when you disconnect from work and start to enjoy the more meaningful things in life. Of course, that means that you have be successful in leaving work in the first place, which can be tricky, but <a href="http://jameschambers.com/2015/03/working-from-home-and-walking-to-work-surviving-remote-work/" target="_blank">isn’t impossible to do</a>, especially if you’ve <a href="http://jameschambers.com/2015/03/wake-up-and-get-st-done-a-practice-of-awesome/" target="_blank">put in a good day</a>.</p> <p>There a measure of counter-intuitiveness here that you’ll find. For example, keeping strong relationships in your own household is actually more about defining and maintaining boundaries during the workday than you might imagine. For example, if your office door is open as you’re working and your spouse, kids or roommates feel free to come and chat, you’re going to be less productive than you’d like to be. Over time, that loss of focus and reduced ability to create tangible outputs are going to start to turn into stress. Allowing the non-work relationships to bleed into your day can be a form of long term toxin that will erode your success as a remote worker.</p> <p>Likewise, allowing your work day to bleed into your evenings and weekends will rob you of the best part of your day. Maybe you’re married with kids, fiancéed, or perhaps single, but the fact holds true regardless of your situation: marginalizing your family and friends to try to improve things at work will yield exactly zero positive results for your personal life. If you don’t agree with that statement, it’s simply because Dr. Seuss got the idea of the Grinch’s heart being two sizes too small from your life story. </p> <p>There will be exceptions, where some rule-bending and time-bleeding will occur, but your job as a remote is to maintain that balance and be honest with yourself about how you’re doing in that regard.</p> <h2>An Old Adage</h2> <p>I do have to admit that I’m quite fortunate in this regard, as I’ve been able to align with an employer who is very much accustomed to and accepting of remote work. Working remotely, while becoming more common, isn’t yet universally accepted and I know from personal experience that if the culture isn’t there in the company, it can’t work on the long term.</p><p>It’s long and often been said that <strong>it takes a village to raise a child</strong>, and the reality of that statement is that at some point we have to grow up and be part of the village. As a remote worker, you need to remember that <strong>community isn’t going to just happen for you</strong>. Sure, you may not be raising kids, but the outcomes of your work efforts can only be best realized if you’re able to establish some great relationships along the way.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6591</wp:post_id>
		<wp:post_date>2015-07-14 12:02:00</wp:post_date>
		<wp:post_date_gmt>2015-07-14 12:02:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-types-of-relationships-you-need-to-survive-as-a-remote-worker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="life-hacks"><![CDATA[Life Hacks]]></category>
		<category domain="post_tag" nicename="remote-work"><![CDATA[Remote Work]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3933686130]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40851</wp:comment_id>
			<wp:comment_author><![CDATA[jeffreypalermo]]></wp:comment_author>
			<wp:comment_author_email>jeffrey@headspring.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.249.83.167</wp:comment_author_IP>
			<wp:comment_date>2015-07-14 14:27:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-14 14:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Welcome to Clear Measure :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2135880005]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40861</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-14 14:55:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-14 14:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you. Seriously. :)  Super excited to be on board!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40851</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2135880005]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2135927725]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40871</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; July 15, 2015 (#2054) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/07/15/dew-drop-july-15-2015-2054/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.19</wp:comment_author_IP>
			<wp:comment_date>2015-07-15 12:13:30</wp:comment_date>
			<wp:comment_date_gmt>2015-07-15 12:13:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Three Types of Relationships You Need to Survive as a Remote Worker (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Day 3 &#8211; Extracting a Service to Interact with Azure Table Storage</title>
		<link>http://jameschambers.com/2015/07/day-3-extracting-a-service-to-interact-with-azure-table-storage/</link>
		<pubDate>Sat, 18 Jul 2015 14:32:58 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6621</guid>
		<description></description>
		<content:encoded><![CDATA[<p><i>In <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/">this series</a> we are looking at the basic mechanics of interacting with cloud-based Table Storage from an MVC 5 Application, using the Visual Studio 2013 IDE and Microsoft Azure infrastructure.</i></p> <p>Our controllers are not supposed to be about anything more than getting models together so that our views have something to present. When we start mixing concerns, our application starts to become very difficult to test, controllers start getting quite complex and the difficulty in maintaining our application can skyrocket. </p> <p>Let’s avoid that.</p> <p class="side-note">If you want to follow along, please <a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200575119">pop into Azure</a> and make sure you’ve got an account ready to go. The trial is free, so get at it!</p> <h2>Defining Our Service</h2> <p>Let’s look at the operations we’re going to need, from what we’ve already implemented, and knowing what we’re planning from <a href="http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/" target="_blank">our outline</a>:</p> <ul> <li>Insert a record  <li>Get a filtered set of records  <li>Update a record  <li>Deleting a record</li></ul> <p>Cool beans. At first blush it seems like we’ve got a pretty simple set of concerns, but notice that I didn’t include things like “connecting to Azure”, “creating table references” or “reading configuration information”, as those are all separate concerns that our controller doesn’t actually care about.&nbsp; Remember, we’re trying to isolate our concerns. </p> <p>Hrm…so, manipulating records, adding, deleting, filtering, separating concerns from our business logic…this is starting to sound familiar, right?&nbsp; </p> <blockquote> <p>Use a <strong>repository</strong> to separate the logic that retrieves the data and maps it to the entity model from the business logic that acts on the model. The business logic should be agnostic to the type of data that comprises the data source layer. Source: <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx" target="_blank">MSDN</a>.</p></blockquote> <p>So, we’re going to want to build something using the repository pattern. We’ll use that repository here in our application’s controllers, but in a larger project you might go even further to have an application services layer where you map between the domain models and the view models that we have in our views. All in, our interface might look like the following:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> ITableStorageRepository&lt;T&gt; <span class="kwrd">where</span> T : TableEntity
{
    <span class="kwrd">void</span> Insert(T entity);
    <span class="kwrd">void</span> Update(T entity);
    <span class="kwrd">void</span> Delete(T entity);
    IEnumerable&lt;T&gt; GetByPartition(<span class="kwrd">string</span> partitionKey);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The public interface simply gives us a way to do our CRUD operations and treat a filtered result set <a href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank">as a collection</a> in order to minimize duplicate constructs and operations related to table queries. You can think of the CloudTableClient and TableQueries from the Azure SDK as part of a <a href="http://martinfowler.com/eaaCatalog/dataMapper.html" target="_blank">Data Mapper</a> layer that enables us to build this abstraction.</p><p class="side-note">Note: For the purpose of illustration, I’m going to continue to use TableEntity here, which doesn’t completely abstract the Azure Table Storage concern away from my controller. I understand that; in a real-world scenario, I would typically have a view model that is used in the MVC application and an intermediary service would handle mapping as required.</p>
<h2>Implementing the Service</h2>
<p>Leveraging this is going to be awesome, but we need to move some of the heavy-lifting out of our controller first.&nbsp; Let’s start by creating a Repositories folder and adding a class called KittehRepository, which will of course implement ITableStorageRepository&lt;KittehEntity&gt;.</p><p><strong>Don’t peak!</strong> As an exercise for the reader, you can use the interface noted above to implement the class. Use the interface above to craft your KittehRepository class. You should be able to find all the bits you need by exploring the objects already in use in the controller.</p><p>When you’re ready, here’s my version of the solution below:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> KittehRepository : ITableStorageRepository&lt;KittehEntity&gt;
{
    <span class="kwrd">private</span> <span class="kwrd">readonly</span> CloudTableClient _client;

    <span class="kwrd">public</span> KittehRepository()
    {
        var storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(<span class="str">"StorageConnectionString"</span>));
        _client = storageAccount.CreateCloudTableClient();
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Insert(KittehEntity entity)
    {
        var kittehTable = _client.GetTableReference(<span class="str">"PicturesOfKittehs"</span>);
        var insert = TableOperation.Insert(entity);
        kittehTable.Execute(insert);
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Update(KittehEntity entity)
    {
        var kittehTable = _client.GetTableReference(<span class="str">"PicturesOfKittehs"</span>);
        var insert = TableOperation.Replace(entity);
        kittehTable.Execute(insert);
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Delete(KittehEntity entity)
    {
        var kittehTable = _client.GetTableReference(<span class="str">"PicturesOfKittehs"</span>);
        var insert = TableOperation.Delete(entity);
        kittehTable.Execute(insert);
    }

    <span class="kwrd">public</span> IEnumerable&lt;KittehEntity&gt; GetByPartition(<span class="kwrd">string</span> partitionKey)
    {
        var kittehTable = _client.GetTableReference(<span class="str">"PicturesOfKittehs"</span>);
        var kittehQuery = <span class="kwrd">new</span> TableQuery&lt;KittehEntity&gt;()
                        .Where(TableQuery.GenerateFilterCondition(<span class="str">"PartitionKey"</span>, QueryComparisons.Equal, partitionKey));
        var kittehs = kittehTable.ExecuteQuery(kittehQuery).ToList();

        <span class="kwrd">return</span> kittehs;
    }
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>One thing to note is that I’ve pushed <em>most</em> of the initialization up to the constructor, and I’ve not implemented any kind of seeding code. The table seeding that I illustrated in <a href="http://jameschambers.com/2015/01/day-1-the-basics-of-the-basics-with-azure-table-storage/" target="_blank">Day 1</a> is a concern that should be implemented outside of a repository, likely as part of a process that starts up the application in first-run scenarios, or something that would be run as part of a deployment to a test/QA environment.</p><h2>Cleaning up Our Controller</h2><p>I love this. The controller can now do what we need it to do. Here’s the complete class, with an added constructor that accepts a reference to the repository (we’ll wire that up shortly):</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
{
    <span class="kwrd">private</span> <span class="kwrd">readonly</span> ITableStorageRepository&lt;KittehEntity&gt; _kittehRepository;

    <span class="kwrd">public</span> HomeController(ITableStorageRepository&lt;KittehEntity&gt; kittehRepository)
    {
        _kittehRepository = kittehRepository;
    }

    <span class="kwrd">public</span> ActionResult Index()
    {
        var kittehs = _kittehRepository.GetByPartition(<span class="str">"FunnyKittehs"</span>);
        <span class="kwrd">return</span> View(kittehs);
    }

    [HttpPost]
    <span class="kwrd">public</span> ActionResult Index(KittehEntity entity)
    {
        _kittehRepository.Insert(entity);
        <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>);
    }

    <span class="kwrd">public</span> ActionResult About()
    {
        ViewBag.Message = <span class="str">"Your application description page."</span>;

        <span class="kwrd">return</span> View();
    }

    <span class="kwrd">public</span> ActionResult Contact()
    {
        ViewBag.Message = <span class="str">"Your contact page."</span>;

        <span class="kwrd">return</span> View();
    }
}
</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Notice how we’ve reduce the amount of code in this class <em>significantly</em>, to the point that anyone should be able to read it – with little or no exposure to Azure Table Storage – and still have a sense of what’s going on. We’ve taken our controller from over 50 lines of code (non-cruft/whitespace) to about 5. </p><p>Just to see how much more clear we’ve made things, do a “remove and sort” on your usings. You’ll notice that everything to do with Azure has all but disappeared; our repository has served it’s purpose!</p><p>Okay, so the repository is in place, and our controller is dramatically simplified. Now we need to do a bit of wiring to let the MVC Framework know that we’d like an instance of the class when the controller fires up. Here’s how.</p><h2>Adding Dependency Injection</h2><p>First, open the Package Manager Console (View –&gt; Other Windows –&gt; Package Manager Console) and type the following:</p><pre class="csharpcode">install-package Ninject.MVC5</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>The Ninject packages required for interoperation with the MVC Framework are installed, and you get a new class in _AppStart called NinjectWebCommon. This class contains an assembly-level attribute that allows it to properly wire dependency injection up in your application at startup, you’ll see this at the top of the file.</p><p>What happens now is quite interesting: when the MVC Framework tries to create an instance of a controller (i.e., when someone makes a request to your application), it looks for a constructor with no parameters. This no longer exists on our controller because we require the ITableStorageRepository&lt;KittehEntity&gt; parameter.&nbsp; Ninject will now step in for us and say, “Oh, you want something that looks like that? Here’s one I made for you!”</p><p>To get that kind of injection love, you need to go into the NinjectWebCommon class and update the RegisterServices method to include this line of code:</p><pre class="csharpcode">kernel.Bind&lt;ITableStorageRepository&lt;KittehEntity&gt;&gt;().To&lt;KittehRepository&gt;();</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>This simply says, “When someone asks for that interface, give them this concrete class.</p><p>So at this point, the wiring is done, and you can run your app! It will have the exact same functionality and user experience, but it will be much more technically sound.</p><h2>Notes and Improvements</h2><p>Just a few things to note:</p><ul><li>I’ve kept things simple and omitted ViewModels</li><li>You’d likely want to have a layer between your controller and repository class in most real-word scenarios</li><li>The repository class should have it’s dependencies injected as well, namely, the configuration information it needs to connect to Azure. A proper configuration helper class would do the trick and, once registered with Ninject, could also be accepted as a parameter on the constructor</li></ul><h2>Summary</h2><p>With the repository in place we can now lighten the load on the controller and more easily implement features with our concerns more clearly separated. In the next couple of posts, we’re going to start allowing the user to manipulate the entities in the table.</p><p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6621</wp:post_id>
		<wp:post_date>2015-07-18 14:32:58</wp:post_date>
		<wp:post_date_gmt>2015-07-18 14:32:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-3-extracting-a-service-to-interact-with-azure-table-storage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3946703088]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40961</wp:comment_id>
			<wp:comment_author><![CDATA[Day 0: 8 Days of Working With Azure Table Storage from ASP.NET MVC 5 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/01/day-0-8-days-of-working-with-azure-table-storage-from-asp-net-mvc-5/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.50</wp:comment_author_IP>
			<wp:comment_date>2015-07-18 14:34:09</wp:comment_date>
			<wp:comment_date_gmt>2015-07-18 14:34:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 3: Extracting a Service to Interact with Table Storage [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40981</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; July 20, 2015 (#2057) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/07/20/dew-drop-july-20-2015-2057/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.13</wp:comment_author_IP>
			<wp:comment_date>2015-07-20 12:09:46</wp:comment_date>
			<wp:comment_date_gmt>2015-07-20 12:09:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 3 – Extracting a Service to Interact with Azure Table Storage (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Response from Postsharp.net is not a Valid Nuget v2 Service Response</title>
		<link>http://jameschambers.com/2015/07/response-from-postsharp-net-is-not-a-valid-nuget-v2-service-response/</link>
		<pubDate>Wed, 22 Jul 2015 02:05:22 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6691</guid>
		<description></description>
		<content:encoded><![CDATA[<p>After installing PostSharp.net on my machine for a project (I did the MSI install) I started getting errors during the package restore that ended up blocking my builds. They looked a lot like this:</p><blockquote><p>Error: FindPackagesById: EntityFramework.Core Response from <a href="https://www.postsharp.net/nuget/packages/FindPackagesById()?id='EntityFramework.Core&rsquo;">https://www.postsharp.net/nuget/packages/FindPackagesById()?id=’EntityFramework.Core’</a> is not a valid NuGet v2 service response.</p></blockquote><p><img width="579" height="222" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image1.png" border="0"></p><p>Now, an important note here: I’m on a machine that’s seen various updates and changes to VS 2015, and this was a version of PostSharp that wasn’t originally built for the RTM version of Visual Studio. So…this may be entirely circumstantial, but it’s what I ran into.</p><p>And it wasn’t just on that one package (others would give the same result) and it wasn’t just on one project. I tried to isolate this, but couldn’t find the source. Why was PostSharp getting in the way of my package restore? Even using DNU from the command line, <strong><em>after</em></strong> I explicitly uninstalled it? I started setting compiler variables to block PostSharp on those projects, but that got frustrating quickly, so I resorted to uninstalling everything I could find of it.</p><p>After the uninstall, I still was stumped, same errors all over again. With the help of my friend <a href="https://twitter.com/dbelcham" target="_blank">Donald Belcham</a>, I was able to find traces of PostSharp still on my machine, located in the system-wide NuGet package source feed configuration:</p><p><img width="489" height="114" title="image" style="display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image2.png" border="0"></p><p>Unchecking that box above does the trick.</p><p>Might be an edge case if you run into this, but if you do, and this helps, consider buying Don a scotch! </p><p>Happy coding. <img class="wlEmoticon wlEmoticon-smile" style="" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6691</wp:post_id>
		<wp:post_date>2015-07-22 02:05:22</wp:post_date>
		<wp:post_date_gmt>2015-07-22 02:05:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>response-from-postsharp-net-is-not-a-valid-nuget-v2-service-response</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="compiling"><![CDATA[compiling]]></category>
		<category domain="post_tag" nicename="nuget"><![CDATA[NuGet]]></category>
		<category domain="post_tag" nicename="postsharp"><![CDATA[PostSharp]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3958004923]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Upgrading a Real-World MVC 5 Application to MVC 6</title>
		<link>http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/</link>
		<pubDate>Thu, 23 Jul 2015 19:19:13 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6752</guid>
		<description></description>
		<content:encoded><![CDATA[<p>These are exciting times for web development on the Microsoft stack, but perhaps a little confusing as well. For many years the cycle of moving from one solution and project system to the next hasn’t been overly complex. Sure, there have been breaking changes, I’ve felt those pains myself, but provided the framework you were using continued to live on, there was a reasonable migration path.</p>
<p>Moving to MVC 6 is going to be a big shift for a lot of development teams, but that doesn’t mean it needs to be scary, complicated or introduce instability into your project.</p>
<p>It does, however, mean that you’re going to need an attitude of learning, that you’ll pick up some new tooling, you’ll have to brush up on your JavaScript and work with some new concepts.</p>
<h2>Let’s Make it Happen</h2>
<p>I’m super excited to now be part of the excellent crew at <a href="http://clear-measure.com/" target="_blank">Clear Measure</a>, where this type of attitude seems to be fostered, encouraged and embodied by other members of the team and, more importantly, the management.</p>
<p>We’re now undertaking the process of converting from MVC5 =&gt; MVC6 with our <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp" target="_blank">Bootcamp workshop project</a> and I have the privilege of blogging my experience with it as I go. <a href="http://jameschambers.com/wp-content/uploads/2015/07/image7.png"><img width="244" height="173" title="image" align="right" style="margin: 5px 0px 10px 10px; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image_thumb2.png" border="0"></a>We’re going to keep the project building and operable as we go, such that at an point it can be shipped to production or branched for feature development.&nbsp; We’ll be using GitFlow, feature branches, continuous integration and continuous deployment.&nbsp; Our check-ins will be code that builds cleanly with passing tests.</p>
<p><strong>And,</strong> for those of you who come join in our our MVC Masters Bootcamp sessions, you’ll also get to work on this code base with all the tools, exposure to pair programming, a dedicated product owner and 3 days of intense coding.</p>
<p class="side-note"><a href="http://clear-measure.com/" target="_blank"><img width="40" height="39" title="image" align="left" style="margin: 14px 9px 7px 0px; border: 0px currentcolor; border-image: none; float: left; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image8.png" border="0"></a><strong>Shameless plug</strong>: If you want to level up your team of developers, please reach out to <a href="mailto:gina@clear-measure.com??Subject=MVC%20Masters%20Bootcamp" target="_blank">Gina Hollis</a> at Clear Measure to plan an on- or off-site event. We promise to melt your minds.</p>
<h2>How We’re Getting There</h2>
<p><a href="http://jameschambers.com/wp-content/uploads/2015/07/image9.png"><img width="244" height="188" title="image" align="right" style="margin: 5px 0px 10px 10px; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image_thumb3.png" border="0"></a>Well, to start it off, we’re beginning with our initial commit as the MVC 5 project <a href="https://twitter.com/jeffreypalermo" target="_blank">Jeffrey Palermo’s</a> been using in the Masters Bootcamp for some time.</p>
<p>The application is hosted on <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp" target="_blank">GitHub</a> and you can <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/issues/" target="_blank">see the issues</a> that we’re identifying and working through. We’re doing the whole thing as open source in hopes that other teams can learn from what we learn in the process.</p>
<p>And, as I knock items off the issue list I’ll be posting about them here, covering the challenges, pitfalls and wins we encounter along the way. You can bookmark this post for updates in the project. Feel free to ask questions on the issues in the repository, or ping me on Twitter (<a href="https://twitter.com/CanadianJames/" target="_blank">@CanadianJames</a>).</p>
<p>Stay tuned!</p>
<ul>
<li>Part 1: <a href="http://jameschambers.com/2015/07/moving-to-vs-2015-from-vs-2013/" target="_blank">Moving to VS2015 from VS2013</a></li>
<li>Part 2: <a href="http://jameschambers.com/2015/07/getting-your-build-server-ready-for-vs-2015/" target="_blank">Getting Your Build Server Ready for VS2015</a></li><li>Part 3: <a href="http://jameschambers.com/2015/07/upgrading-projects-to-net-4-6/" target="_blank">Retargeting Projects to .NET 4.6</a></li><li>Part 4: <a href="http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/" target="_blank">Multitargeting Projects with VS2015 Projects</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6752</wp:post_id>
		<wp:post_date>2015-07-23 19:19:13</wp:post_date>
		<wp:post_date_gmt>2015-07-23 19:19:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrading-a-real-world-mvc-5-application-to-mvc-6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clearmeasure"><![CDATA[ClearMeasure]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<category domain="post_tag" nicename="mvc6"><![CDATA[MVC6]]></category>
		<category domain="category" nicename="mvc6-conversion"><![CDATA[MVC6 Conversion]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3963964477]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_11676617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_11676610</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41051</wp:comment_id>
			<wp:comment_author><![CDATA[Moving to VS 2015 from VS 2013 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/07/moving-to-vs-2015-from-vs-2013/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.16.187</wp:comment_author_IP>
			<wp:comment_date>2015-07-24 21:01:33</wp:comment_date>
			<wp:comment_date_gmt>2015-07-24 21:01:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the intro page. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41081</wp:comment_id>
			<wp:comment_author><![CDATA[David Paquette]]></wp:comment_author>
			<wp:comment_author_email>david.paquette@usask.ca</wp:comment_author_email>
			<wp:comment_author_url>http://www.davepaquette.com</wp:comment_author_url>
			<wp:comment_author_IP>173.225.210.106</wp:comment_author_IP>
			<wp:comment_date>2015-07-27 02:00:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-27 02:00:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like you're going to have your work cut out for you with this one. I have heard that this is not a simple upgrade as there are many things that have changed in MVC6.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2158555515]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41121</wp:comment_id>
			<wp:comment_author><![CDATA[shanthu]]></wp:comment_author>
			<wp:comment_author_email>shanthuk@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>104.7.154.119</wp:comment_author_IP>
			<wp:comment_date>2015-07-28 13:51:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-28 13:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My MVC 5 application is using

Is it supported in MVC 6?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2161186389]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41131</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-28 14:03:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-28 14:03:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great question! No, it was removed, but we actually have cleaner, more powerful mechanisms today than pagebasetype. In MVC6 we get directive-based inheritance (which is also supported in _ViewImports.cshtml). As well, for introducing functionality, you have the @imports directive for services, etc. I will be covering some of these topics in this series.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41121</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2161186389]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2161205270]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41141</wp:comment_id>
			<wp:comment_author><![CDATA[Upgrading Projects to .NET 4.6 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/07/upgrading-projects-to-net-4-6/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.16.187</wp:comment_author_IP>
			<wp:comment_date>2015-07-28 21:59:19</wp:comment_date>
			<wp:comment_date_gmt>2015-07-28 21:59:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the intro page. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438120759.520993;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438651722.9081509;s:5:"event";s:15:"status-approved";s:4:"user";s:14:"james.chambers";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41151</wp:comment_id>
			<wp:comment_author><![CDATA[shanthu]]></wp:comment_author>
			<wp:comment_author_email>shanthuk@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>104.7.154.119</wp:comment_author_IP>
			<wp:comment_date>2015-07-28 22:52:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-28 22:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Like many web applications, my application uses 'Session' as well. If you could cover that topic as well, it will help many people.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41131</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2161205270]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2162188081]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41201</wp:comment_id>
			<wp:comment_author><![CDATA[JohnConnorTM]]></wp:comment_author>
			<wp:comment_author_email>john.connor.freedomfighter@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.167.49.53</wp:comment_author_IP>
			<wp:comment_date>2015-08-06 17:52:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-06 17:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I very much look forward to the completion of this effort. I am planning on doing the same with my web project, as a first step I moved the client side library handling to Grunt, Bower and Gulp. I don't use a build server and use Tfs instead of GitHub so those steps do not apply to me. What worries me the most is my custom Application User (using long as id instead of guid) and moving from entity framework 6 to 7 with my custom solution with the app user models in its own project. I hope you guys will get into that.

I want to do this because of performance, ASP.NET 5 is much more lightweight than the previous versions. Anyway, I'll be following you, keep up the good work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2178015942]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41231</wp:comment_id>
			<wp:comment_author><![CDATA[Links of the month (July Edition) | Jan @ Development]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://janatdevelopment.com/2015/08/08/links-of-the-month-july-edition-2015/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.82.116</wp:comment_author_IP>
			<wp:comment_date>2015-08-08 21:10:58</wp:comment_date>
			<wp:comment_date_gmt>2015-08-08 21:10:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Upgrading a Real-World MVC 5 Application to MVC 6 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439068259.1175351;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41381</wp:comment_id>
			<wp:comment_author><![CDATA[Upgrading Projects to .NET 4.6 - Canadian Developer Connection - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2015/08/20/upgrading-projects-to-net-4-6.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.143</wp:comment_author_IP>
			<wp:comment_date>2015-08-20 15:00:04</wp:comment_date>
			<wp:comment_date_gmt>2015-08-20 15:00:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this series we&rsquo;re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the intro page. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1440082810.487776;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41401</wp:comment_id>
			<wp:comment_author><![CDATA[Moving to VS 2015 from VS 2013 - Canadian Developer Connection - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2015/08/20/moving-to-vs-2015-from-vs-2013.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.146</wp:comment_author_IP>
			<wp:comment_date>2015-08-25 16:07:08</wp:comment_date>
			<wp:comment_date_gmt>2015-08-25 16:07:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this series we&rsquo;re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the intro page. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1440518831.5045121;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41441</wp:comment_id>
			<wp:comment_author><![CDATA[Getting Your Build Server Ready for VS 2015 - Canadian Developer Connection - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2015/09/01/getting-your-build-server-ready-for-vs-2015.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.144</wp:comment_author_IP>
			<wp:comment_date>2015-09-01 13:43:15</wp:comment_date>
			<wp:comment_date_gmt>2015-09-01 13:43:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this series we&rsquo;re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the intro page. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441114995.3019011;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41571</wp:comment_id>
			<wp:comment_author><![CDATA[Converting .NET 4.6 Projects to the VS 2015 Project System - Canadian Developer Connection - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2015/09/08/converting-net-4-6-projects-to-the-vs-2015-project-system.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.145</wp:comment_author_IP>
			<wp:comment_date>2015-09-08 14:30:02</wp:comment_date>
			<wp:comment_date_gmt>2015-09-08 14:30:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] In this series we&rsquo;re working through the conversion of Clear Measure&rsquo;s Bootcamp MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the intro page. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441722602.136986;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Workaround: NuGet Packages Failing to Download in Visual Studio 2015 RTM</title>
		<link>http://jameschambers.com/2015/07/workaround-nuget-packages-failing-to-download-in-visual-studio-2015-rtm/</link>
		<pubDate>Thu, 23 Jul 2015 14:59:39 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6791</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I haven’t figured out a common theme yet, but certain packages are failing to restore when you attempt to install them from the NuGet primary feed via the project.json file in Visual Studio 2015. Thanks to <a href="https://twitter.com/BrockLAllen" target="_blank">Brock Allen</a> for confirming I wasn’t going insane.</p><p>A couple of things I’ve discovered:</p><ul><li>This seems to be more common for prerelease packages</li><li>It seems to work if the package has a previous release version (not in pre)</li></ul><p>As a workaround, you can add the packages manually via the dialog in Visual Studio, just make sure you hit that pre-release flag:</p><p><img width="511" height="232" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image3.png" border="0"></p><p>If that doesn’t work for you – sometimes I’m not seeing the package above in my feed – if you have it you can add another NuGet feed to an alternate package source, like I’ve done here with AutoFac’s nightly build feed:</p><p><a href="http://jameschambers.com/wp-content/uploads/2015/07/image4.png"><img width="431" height="249" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image_thumb1.png" border="0"></a></p><p>The other thing is that once you get it installed in your system cache, it will resolve it from there, which I imagine makes it harder to triage for anyone trying to figure out what’s going on.</p><p>I’m seeing various confirmations of this on Twitter:</p><p><img width="385" height="140" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image5.png" border="0"></p><p><img width="389" height="149" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image6.png" border="0"></p><p>With NuGet 3 being release (and part of VS 2015) I think some package authors are unsure if it’s their problem or what the case may be. Depending on the method you come at it, it’s possible that you can still get the package, but I would say it seems unpredictable right now.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6791</wp:post_id>
		<wp:post_date>2015-07-23 14:59:39</wp:post_date>
		<wp:post_date_gmt>2015-07-23 14:59:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>workaround-nuget-packages-failing-to-download-in-visual-studio-2015-rtm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3963189450]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moving to VS 2015 from VS 2013</title>
		<link>http://jameschambers.com/2015/07/moving-to-vs-2015-from-vs-2013/</link>
		<pubDate>Thu, 23 Jul 2015 20:45:48 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=6921</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The folks on the Visual Studio team have been making it increasingly easier to move from version-to-version with less impact on our projects. In this post I’m going to examine the process of moving from Visual Studio 2013 to Visual Studio 2015.</p>
<p class="side-note"><em>In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/" target="_blank"><em>intro page</em></a><em>.</em></p>
<h2>The Backstory</h2>
<p>First, a bit about our application. I said this was a real-world application, and it is. You can <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp" target="_blank">clone the repo</a> and run it locally if you like.</p>
<p><img width="473" height="236" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image10.png" border="0"></p>
<p>What we have is an expense report application, albeit a little on the light side for features. No worries, though, that is the intent! But the real pieces of an application sporting <a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/" target="_blank">Onion Architecture</a> are in place, and there’s quite a bit of commonly-used tech in this bad boy that you would likely find in any real-world app:</p>
<ul>
<li><a href="http://jameschambers.com/wp-content/uploads/2015/07/image11.png"><img width="219" height="202" title="image" align="right" style="float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image_thumb4.png" border="0"></a>Separate projects for separate concerns</li>
<li>A UI Project that stands with only a single reference (to Core)</li>
<li>An older version of NHibernate</li>
<li>Unit tests</li>
<li>HTTP Handlers</li>
<li>The Bootstrap CSS/JS library</li>
<li>StructureMap for dependency injection</li>
<li>A database migrations library</li>
<li>A custom workflow engine</li>
</ul>
<p>So, this is no File –&gt; New –&gt; Project here, this is the real deal.</p>
<h2>First Steps</h2>
<p>The first issue we’re going to address is the fact that our solution and project are currently in VS 2013 “mode”.&nbsp; In the past, you’d likely have to walk through some kind of conversion process and this was usually a compelling enough reason for people to back delay an upgrade. Did you ever have issues with incorrect file paths, incompatible project type identifiers, broken project references and builds broken due to missing dependencies? At times, I’ve even had to resort to manually editing the solution and project files to get a project back online.&nbsp; <strong>Thankfully, this is nothing like that</strong>. There is nothing major we need to do in order to get our project open in Visual Studio 2015, just load the solution from disk.</p>
<p>In the case of Bootcamp, our project opens cleanly and builds as we would expect. But you’ll notice right away a change in the repo.</p>
<p><img width="495" height="97" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image12.png" border="0"></p>
<p>Visual Studio 2015 runs IIS Express in a more specific context than previous versions, which is a huge win. The applicationhost.config is basically everything you need to get the web server up locally while you develop, debug and test, and it replaces what we would used to use for IIS Express for machine-wide configuration.</p>
<p>This file also happens to be in the .vs directory, used only for devs running Visual Studio on Windows. It’s also easily regenerated for other developers and we don’t need to check it into source control, lest we be endlessly trumping each others’ local changes. Instead of any project or solution modifications, we’re instead going to modify the .gitignore file, adding the following line:</p>
<pre class="csharpcode">**/src/.vs/</pre>
<p>Great stuff! Easy, and we’re running in the latest version of everyone’s favorite IDE. We haven’t yet made any project structure changes, haven’t targeted any new .NET bits, but now we’re ready to start those pieces.</p>
<p>The pull request for this post can be <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/pull/10" target="_blank">reviewed here</a>.</p>
<p class="side-note"><strong><font style="background-color: rgb(204, 204, 204);">&nbsp; Pro tip&nbsp; </font></strong> To get your solution to open in Visual Studio 2015 by default, instead of Visual Studio 2013, you can simply update the first few lines of your .sln file to include the following: <br> <font face="Lucida Console"># Visual Studio 14<br>
VisualStudioVersion = 14.0.23107.0</font></p><h2>Next Steps</h2>
<p>I’ve been running different incarnations of VS 2015 on my machine alongside Visual Studio 2013 (and for a period, VS 2010 as well) without any gotchas. There are some great new features that are worth checking out (it’s <a href="https://www.visualstudio.com/en-us/news/vs2015-vs.aspx" target="_blank">a long list</a>), and your team may be able to leverage them.</p>
<p>While this is a short and single-focused post, I hope you see that opening the project in VS 2015 may yield no negative side effects. Heck, if you’re not sure you want to try it on your metal, you can even jump on a free trial of Azure and attempt to open your project on a VM running 2015.</p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile2.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6921</wp:post_id>
		<wp:post_date>2015-07-23 20:45:48</wp:post_date>
		<wp:post_date_gmt>2015-07-23 20:45:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moving-to-vs-2015-from-vs-2013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clearmeasure"><![CDATA[ClearMeasure]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<category domain="post_tag" nicename="mvc6"><![CDATA[MVC6]]></category>
		<category domain="category" nicename="mvc6-conversion"><![CDATA[MVC6 Conversion]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3964193268]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_11676617</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_11676610</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41041</wp:comment_id>
			<wp:comment_author><![CDATA[Upgrading a Real-World MVC 5 Application to MVC 6 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.54</wp:comment_author_IP>
			<wp:comment_date>2015-07-23 21:12:43</wp:comment_date>
			<wp:comment_date_gmt>2015-07-23 21:12:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Part 1: Moving to VS2015 from VS2013 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41881</wp:comment_id>
			<wp:comment_author><![CDATA[Danielle Paquette-Harvey]]></wp:comment_author>
			<wp:comment_author_email>daniellepaquetteharvey@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.70.128.50</wp:comment_author_IP>
			<wp:comment_date>2015-10-13 14:57:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-13 14:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Got a question for you. I've got a .Net 4.5 C# website that works great under Visual Studio 2013 but for a reason I don't understand, doesn't run great under Visual Studio 2015. All the images, layou (css?) doesn't seem to load well when I debug in Visual Studio 2015 (and my menus don't work) but it works with Visual Studio 2013. The source is identical. Have any ideas?? I've been searching for days!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2305079404]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42051</wp:comment_id>
			<wp:comment_author><![CDATA[Visual Smarter]]></wp:comment_author>
			<wp:comment_author_email>zgzy2010@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>135.0.189.207</wp:comment_author_IP>
			<wp:comment_date>2015-10-29 22:31:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-29 22:31:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In case the solution needs to be downgraded, the Solution Transitioner of Visual Smarter may help:

http://visualsmarter.blogspot.com/2015/10/solution-transitioner-of-visual-studio.html]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2333881062]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Getting Your Build Server Ready for VS 2015</title>
		<link>http://jameschambers.com/2015/07/getting-your-build-server-ready-for-vs-2015/</link>
		<pubDate>Fri, 24 Jul 2015 22:33:57 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7022</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you’re modernizing your project, one of the things you’ll surely want to do is to make sure that your build server is upgraded to support VS 2015. Regardless of what CI engine you’re using, there will be at least a little bit of effort required to get your project building again.</p>
<p class="side-note"><em>In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/" target="_blank"><em>intro page</em></a><em>.</em></p><p>For the purpose of this exercise, we’re using TeamCity to run our builds based on a VSC checkin. We’ll get TeamCity prepped to run our build and then update our repository so that we show our build status indicator on the readme home page.</p><h2>The TL;DR Details</h2><p>Here’s the basics of what was required to get the builds back online:</p><ul><li>Backup and upgrade TeamCity</li><li>Allow the agents to upgrade, or upgrade them manually</li><li>Install .NET 4.6 and the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159" target="_blank">VS 2015 tools</a></li><li>Ensure that build targets live on your build agents</li><li>Run your build</li></ul><h2>Upgrading the Server</h2><p>I engaged my teammate <a href="http://www.clear-measure.com/our-team/" target="_blank">James Allen</a> here to help with some best practices, namely getting the server backed up. You can either back up the TeamCity data from the web interface or one of the other <a href="https://confluence.jetbrains.com/display/TCD9/TeamCity+Data+Backup" target="_blank">recommended approaches</a>, or you could snapshot your server for a reset should one be required. During this process, it’s a good idea to spin down your build agents so that you’re not wrecking anyone’s builds.</p><p>Next, we needed to move to version 9.1 of TeamCity, so we ran the <a href="https://confluence.jetbrains.com/display/TCD9/Upgrade" target="_blank">upgrade process</a> via the web site. This is a painless task and takes only a fraction of the time it took to back up the data. Failing any troubles (we saw none), your build server should be back online in no time, and the build agents were notified (and complied!) to update themselves as well.</p><p><a href="http://jameschambers.com/wp-content/uploads/2015/07/image13.png"><img width="240" height="191" title="image" align="right" style="margin: 0px 0px 0px 10px; border: 0px currentcolor; border-image: none; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image_thumb5.png" border="0"></a>Next, I downloaded and installed the .NET 4.6 installer and the VS 2015 tooling, which can be found on the <a href="https://www.visualstudio.com/downloads/download-visual-studio-vs" target="_blank">VS 2015 download page</a>. You’ll need to explore through the available downloads on the page, as you can see on this screenshot, to grab the relevant files. </p><p>These installs will need to be run on every build agent.</p><p>One thing to note was that my original attempt to get the build running failed because of missing build targets at an expected location. I ended up having to copy files from my local machine, where Visual Studio 2015 is installed, from the path: C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0 on the build server.</p><p class="side-note">UPDATE: With the availability of the MS Build Tools for Visual Studio 2015 you no longer have to manually zip up and copy the files. You can download the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48159" target="_blank">MS Build Tools 2015 here</a>.</p><h2>Verifying the Install</h2><p>You’ll know the tools have been installed correctly if you return to the build configuration settings and add a new build step for msbuild (you don’t have to save it). You’ll see that you’ll have the new options in place:</p><p><img width="519" height="227" title="image" style="display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image14.png" border="0"></p><p>The build server should be good to go now! For us, we’re not using an MSBuild build runner, our application is build with a PowerShell script via a batch file. This allows our build to be executed locally with only a small parameter change, and the CI process is entirely encapsulated in code (and under source control).</p><p>Provided your project is pointing at the repository, you’ll have a good shot at running the build at this point. For our project, everything worked as expected.</p><p><img width="531" height="142" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image15.png" border="0"></p><h2>Showing Some Bling</h2><p>Now it’s time to beef up our repo, at least a little. What I’m talking about is wearing our CI on our sleeve, letting everyone on the team (or other watchers of the repository) that our builds are healthy or, perhaps, needing some love; let’s display the build status indicator on our readme, like this:</p><p><img width="462" height="89" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image16.png" border="0"></p><p>First, drill into the build configuration and locate the advanced options under “General Settings”. You need to enable the status widget. </p><p><img width="582" height="115" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image17.png" border="0"></p><p>Also, from this screen, take note of your Build Configuration ID. This is important because you’ll need to include it in the server request to generate the badge.</p><p>Finally, include the following markdown, which is essentially a formatted link with an image inside of it:</p><pre class="csharpcode">Current Build Status [![](http://YOUR_SERVER/app/rest/builds/buildType:(id:YOUR_BUILD_CONFIGURATION_ID)/statusIcon)](http://teamcity/viewType.html?buildTypeId=btN&amp;guest=1)</pre><p><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>Be sure to replace the obvious placeholder tokens with your own information.</p><h2>Next Steps</h2><p>With our build server updated and our builds back online, it’s time to start shifting our targets. In the next post, we’re going to update our projects and recover from any errors/challenges we may discover along the way.</p><p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile3.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7022</wp:post_id>
		<wp:post_date>2015-07-24 22:33:57</wp:post_date>
		<wp:post_date_gmt>2015-07-24 22:33:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-your-build-server-ready-for-vs-2015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<category domain="post_tag" nicename="mvc6"><![CDATA[MVC6]]></category>
		<category domain="category" nicename="mvc6-conversion"><![CDATA[MVC6 Conversion]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3967888289]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3967888289]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3967888289]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41061</wp:comment_id>
			<wp:comment_author><![CDATA[Upgrading a Real-World MVC 5 Application to MVC 6 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.50</wp:comment_author_IP>
			<wp:comment_date>2015-07-25 14:58:18</wp:comment_date>
			<wp:comment_date_gmt>2015-07-25 14:58:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Part 2: Getting Your Build Server Ready for VS2015 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1437836298.3216131;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41091</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; July 27, 2015 (#2061) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/07/27/dew-drop-july-27-2015-2061/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.122</wp:comment_author_IP>
			<wp:comment_date>2015-07-27 12:17:26</wp:comment_date>
			<wp:comment_date_gmt>2015-07-27 12:17:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Getting Your Build Server Ready for VS 2015 (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1437999446.6201341;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41111</wp:comment_id>
			<wp:comment_author><![CDATA[The Morning Brew - Chris Alcock &raquo; The Morning Brew #1912]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2015/07/28/the-morning-brew-1912/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.109.184</wp:comment_author_IP>
			<wp:comment_date>2015-07-28 08:02:15</wp:comment_date>
			<wp:comment_date_gmt>2015-07-28 08:02:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Getting Your Build Server Ready for VS 2015 &#8211; James Chambers [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438070536.030988;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41311</wp:comment_id>
			<wp:comment_author><![CDATA[Rob White]]></wp:comment_author>
			<wp:comment_author_email>rob.j.white@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://theoldsewingfactory.com/</wp:comment_author_url>
			<wp:comment_author_IP>77.101.132.77</wp:comment_author_IP>
			<wp:comment_date>2015-08-13 10:18:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-13 10:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you manage to find a better way of installing the targets files? I'm currently stuck with the same issue. The only other option I'm aware of is to install the whole of VS 2015, which I really don't want to do.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2190359056]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41312</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-08-13 15:21:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-13 15:21:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, but they mentioned this issue on the ASP.NET Community Standup, so it's at least a known issue. I can see an installer for this as they've had in the past, it's just not released yet, particularly the DNX stuff (still one more beta before the RC of ASP.NET 5.0). It might actually work with a .NET 4.6 target because it wouldn't (likely) use DNU.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41311</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2190359056]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2190799026]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41321</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-08-13 15:21:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-13 15:21:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, but they mentioned this issue on the ASP.NET Community Standup, so it's at least a known issue. I can see an installer for this as they've had in the past, it's just not released yet, particularly the DNX stuff (still one more beta before the RC of ASP.NET 5.0). It might actually work with a .NET 4.6 target because it wouldn't (likely) use DNU.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41311</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2190359056]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2190799026]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41761</wp:comment_id>
			<wp:comment_author><![CDATA[TeamCity Digest | JetBrains TeamCity Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.jetbrains.com/teamcity/2015/10/teamcity-digest/</wp:comment_author_url>
			<wp:comment_author_IP>54.154.198.240</wp:comment_author_IP>
			<wp:comment_date>2015-10-02 13:20:38</wp:comment_date>
			<wp:comment_date_gmt>2015-10-02 13:20:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] This one guides you through preparing your build server to build VS 2015 projects: Getting Your Build Server Ready for VS 2015. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443792038.2653511;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41851</wp:comment_id>
			<wp:comment_author><![CDATA[Niklas Ringdahl]]></wp:comment_author>
			<wp:comment_author_email>niklasringdahl@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.235.3.218</wp:comment_author_IP>
			<wp:comment_date>2015-10-12 09:15:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-12 09:15:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Maybe I missed something, but TeamCity 9.1.3 supports VS2015 sln-files out of the box: https://confluence.jetbrains.com/pages/viewpage.action?pageId=54334712]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2302617409]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41861</wp:comment_id>
			<wp:comment_author><![CDATA[Niklas Ringdahl]]></wp:comment_author>
			<wp:comment_author_email>niklasringdahl@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.235.3.218</wp:comment_author_IP>
			<wp:comment_date>2015-10-12 10:55:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-12 10:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Never mind, I should have  tried it first... Of course I also hade to install .Net 4.6

 and Microsoft Build Tools 2015. After a reboot everything worked - I actually didn't need to copy the target folder]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41851</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2302617409]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2302692922]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41871</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-10-13 01:50:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-13 01:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, the MS Build Tools didn't yet exist at the time of the original post, but you're right that is the golden approach today. Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41861</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2302692922]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2304271345]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42021</wp:comment_id>
			<wp:comment_author><![CDATA[Kashyap Shah]]></wp:comment_author>
			<wp:comment_author_email>kashyap_us@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.193.196.194</wp:comment_author_IP>
			<wp:comment_date>2015-10-23 17:19:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-23 17:19:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One of the things you have to install on older sever like Sever 2008 R2 or Server 2012 is that Windows 10 SDK (especially when targeting C# 6.0). I had to install this because I had some licensed controls with their license file embedded into assembly using lc.exe. But this can happen to any other compile time component which depends on Windows SDK v10.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2323205704]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Upgrading Projects to .NET 4.6</title>
		<link>http://jameschambers.com/2015/07/upgrading-projects-to-net-4-6/</link>
		<pubDate>Mon, 27 Jul 2015 15:07:33 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7131</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The updates in the .NET Framework provide many improvements, including support for new language features in c#, garbage collection, enhancements in cryptography support, feature toggles, new classes in the BCL and others. The RyuJIT compiler adds significant performance gains for 64bit applications, even those not originally targeting the 4.6, improves startup times and can reduce the memory footprint of your application.</p><p class="side-note"><em>In this series we’re working through the conversion of an MVC 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/" target="_blank"><em>intro page</em></a><em>.</em></p><p>While the explicit modification of your projects may not be required to gain some of the 4.6 benefits, there may be other organizational factors that lead you down that path. We’ll work through the mechanics of the upgrade to 4.6 in this post.</p><h2><i class="fa fa-warning"></i> A Word of Caution</h2><p>UPDATE: July 28, 2015 There is a known issue with certain 64bit applications running on .NET 4.6, under certain circumstances, with certain parameter types and sizes. You can read more <a href="http://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/" target="_blank">about the bug finding here</a> and the issue is being <a href="https://github.com/dotnet/coreclr/issues/1296" target="_blank">tracked on GitHub</a>, followed by Microsoft’s <a href="http://blogs.msdn.com/b/dotnet/archive/2015/07/28/ryujit-bug-advisory-in-the-net-framework-4-6.aspx" target="_blank">response and recommendation</a>. </p><p class="side-note">For this reason <strong>I am not recommending an upgrade to 4.6</strong> unless you understand the implications and how to properly vet the scenarios described in your environment.</p><h2>Getting Your Projects Up-to-date</h2><p>Every project we create references a specific version of the .NET Framework. This has been true throughout the history of .NET, and though the way we will do it in the future will change with the new project system, the premise remains the same. </p><p>For now, you can simply open the properties tab for your project and change the target Framework.</p><p><img width="398" height="210" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image18.png" border="0"></p><p>You will be prompted to let you know that some changes may be required.</p><p><img width="354" height="184" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image19.png" border="0"></p><p>Note that in my case, I had 7 projects with varying types of references and dependencies, and no modifications were required to the code. Your mileage may vary, of course, but this is a simple change and one that you can test quickly. With proper source control in place, this is a zero-risk test that should take only a moment or two.</p><p>Now, if you were to try to build the Bootcamp project when you’re only partway through the upgrade, you’d see something similar to the following:</p><p><img width="491" height="154" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image20.png" border="0"></p><p>With a message that reads:</p><blockquote><p>The primary reference “x” could not be resolved because it was built against the “.NETFramework,Version=v4.6” framework. The is a higher version than the currently targeted framework “.NETFramework,Version=4.5.1”.</p></blockquote><p>You may run into this in other scenarios, as well, especially if you you have references to packages or libraries that get out of sync in your upgrade process. <strong>A project that takes on dependencies must be at (or higher than) the target framework of the compiled dependencies</strong>. To remedy this, we simply need to complete the upgrade process on the rest of the projects.</p><p><img width="434" height="161" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image21.png" border="0"></p><p>This was pretty painless. <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile5.png"></p><h2>Reasons to Upgrade?</h2><p>Moving from 4.5.x to 4.6 is not a required step in our conversion to an MVC 6 project. In fact, MVC 6 indeed runs on a different framework altogether. To that end, any environment where you have 4.6 installed will “pull up” other assemblies because it is a drop-in replacement for pervious versions. </p><p>Perhaps your primary motivator to move to 4.6 is the perf bump in the runtime, or it might be the new language features (which only require a framework install, not a version bump in your target). But it also ensures we’re compatible with other projects in our organization, particularly when we consider the default target for new projects in VS 2015 is against 4.6. If we want to leverage these from other projects in our organization, we want to make sure that we’re not the lowest common denominator in the mix.</p><h2>The Next Step</h2><p>However, there are a couple of other points that we should note, namely that our compiler isn’t tied to the installed framework or the runtime, it’s just used to <em>target</em> a specific set of instructions that the runtime can digest. So, if our MVC 6 will be running on DNX46, or we have other .NET 4.6 projects we’re all set (though, we’d have to use DNU wrap to consume our library at this point in DNX).</p><p>But what if we have different projects across our organization, or we have external teams using our libraries? The answer lies in multi-targeting, which is what we’ll address in the next post in this series.</p><p>Until then, happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile5.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7131</wp:post_id>
		<wp:post_date>2015-07-27 15:07:33</wp:post_date>
		<wp:post_date_gmt>2015-07-27 15:07:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrading-projects-to-net-4-6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="mvc6-conversion"><![CDATA[MVC6 Conversion]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3981037189]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41271</wp:comment_id>
			<wp:comment_author><![CDATA[Upgrading a Real-World MVC 5 Application to MVC 6 | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.56</wp:comment_author_IP>
			<wp:comment_date>2015-08-10 15:30:29</wp:comment_date>
			<wp:comment_date_gmt>2015-08-10 15:30:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Part 3: Retargeting Projects to .NET 4.6 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439220629.469991;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>ASP.NET 5 Beta 6 Is In The Wild</title>
		<link>http://jameschambers.com/2015/07/asp-net-5-beta-6-is-in-the-wild/</link>
		<pubDate>Tue, 28 Jul 2015 14:52:38 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7201</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The Beta 6 release of ASP.NET 5 is now available. Run the following command to upgrade from a previous version:</p><pre class="csharpcode">dnvm upgrade</pre><p><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>After that, a “dnvm list” command will give you the following:</p><p><img width="576" height="98" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image22.png" border="0"></p><p>You can also upgrade dnvm itself with the following command:</p><pre class="csharpcode">dnvm update-self</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>Which will get you up to the beta 7 version (build 10400) of DNVM.<p><a href="http://jameschambers.com/wp-content/uploads/2015/07/image23.png"><img width="556" height="206" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image_thumb6.png" border="0"></a></p><p>You’ll also need the updated VS 2015 tooling, which is available here (along with the DNVM update tools if you want them seperately): <a href="http://www.microsoft.com/en-us/download/details.aspx?id=48222" target="_blank">Microsoft Visual Studio 2015 Beta 6 Tooling Download</a>.</p><h2>Why This is Important</h2><p>As part of my progression in porting an MVC 5 app to MVC 6, one scenario that I needed support for was to have libraries targeting .NET 4.6 reference-able from a DNX project. MVC 6, up to this point, only supported 4.5.1, which meant that you’d have to roll back your targeting if you were on 4.5.2 or 4.6. </p><p>Of course, multi-targeting is a better option, but requires the time and capacity to either slave over the old code base and NuGet packaging nuances, or port to the new project format where you have much greater in-project support for targeting multiple frameworks.</p><h2>What You Get</h2><p>As previously detailed by <a href="https://twitter.com/DamianEdwards" target="_blank">Damien Edwards</a>, there are bug fixes, features and improvements in the following areas: <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A1.0.0-beta6">Runtime</a>, <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A6.0.0-beta6">MVC</a>, <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A4.0.0-beta6">Razor</a>, <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=user%3Aaspnet+is%3Aissue+label%3Aenhancement+milestone%3A3.0.0-beta6">Identity</a>. In addition to supporting .NET 4.6 in DNX, they have also added localization and have been working on other things like distributed caching, which you can <a href="https://github.com/aspnet/Announcements/issues/43" target="_blank">read about here</a>.</p><h2>What To Watch Out For</h2><p>This is still a beta, and there are many moving parts.</p><p>Be sure to check out the <a href="https://live.asp.net/" target="_blank">community standup today</a> and head over to <a href="https://github.com/aspnet/" target="_blank">GitHub</a> for the announcements on <a href="https://github.com/aspnet/Announcements/issues" target="_blank">breaking changes</a>.</p><p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile4.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7201</wp:post_id>
		<wp:post_date>2015-07-28 14:52:38</wp:post_date>
		<wp:post_date_gmt>2015-07-28 14:52:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asp-net-5-beta-6-is-in-the-wild</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3979776796]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41161</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; July 29, 2015 (#2063) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/07/29/dew-drop-july-29-2015-2063/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.13</wp:comment_author_IP>
			<wp:comment_date>2015-07-29 12:03:48</wp:comment_date>
			<wp:comment_date_gmt>2015-07-29 12:03:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ASP.NET 5 Beta 6 Is In The Wild (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438171429.041445;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438651716.843699;s:5:"event";s:15:"status-approved";s:4:"user";s:14:"james.chambers";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>How Do You Measure Up? Find out in 60 Days!</title>
		<link>http://jameschambers.com/2015/07/how-do-you-measure-up-find-out-in-60-days/</link>
		<pubDate>Wed, 29 Jul 2015 09:32:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7281</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I am super geeked to be heading down to Austin, TX to speak at <a href="http://measureup.io/" target="_blank">Measure Up</a> this coming September 26th. Measure Up 2015 is the inaugural skills and career development conference put on by the folks at <a href="http://clear-measure.com/" target="_blank">Clear Measure</a>.</p><p><a href="http://measureup.io/" target="_blank"><img width="468" height="142" title="image" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image24.png" border="0"></a></p><p>This conference is packed with all kinds of great speakers and covers a variety of topics related to business development, dev ops, personal growth and, of course, how to be mind-bendingly awesome at making software. I am going to be talking about the things you need to know when <a href="http://measureup2015.azurewebsites.net/mvc6/" target="_blank">you’re moving to MVC 6</a>, and sharing about my experiences as <a href="http://measureup2015.azurewebsites.net/success-as-a-remote-worker/" target="_blank">a remote worker</a>.</p><h2>If You Live in the Austin Area…</h2><p>…you have no excuses to miss this event. Register <em><u>today</u></em>, <a href="https://www.eventbrite.com/e/measureup-2015-tickets-16666653409?ref=ecount" target="_blank">it’s only $10</a>, and dedicate one day this year to getting yourself closer to your dream career.</p><h2>If You Don’t Live in the Austin Area…</h2><p>…you should probably talk to your boss about getting down there for the day. It’s hard to find a conference with this kind of content and (essentially) only have to pay for a bit of travel, perhaps a hotel room. Professional development does not come with this value for this little.</p><h2>So, What Are You Waiting For?</h2><p><strong>Check out the conference agenda</strong>. Dev ops, docker. vNext, continuous deployment, load testing, microsevices, infrastructure as code <a href="http://measureup2015.azurewebsites.net/speakers/" target="_blank">and more</a>. </p><p><strong>Register for the event</strong>. Seriously, <a href="https://www.eventbrite.com/e/measureup-2015-tickets-16666653409?ref=ecount" target="_blank">ten bucks</a><em>. </em></p><p>See you in September! ‘Til then, happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/07/wlEmoticon-smile6.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7281</wp:post_id>
		<wp:post_date>2015-07-29 09:32:00</wp:post_date>
		<wp:post_date_gmt>2015-07-29 09:32:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-do-you-measure-up-find-out-in-60-days</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="measureup"><![CDATA[MeasureUp]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3982484991]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Launching An ASP.NET 5 Application from Visual Studio 2015</title>
		<link>http://jameschambers.com/2015/07/launching-an-asp-net-5-application-from-visual-studio-2015/</link>
		<pubDate>Wed, 29 Jul 2015 14:00:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7331</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you are trying to use any DNX (DotNet Execution) runtime other than dnx451 (i.e. dnx452, dnx46) you will run into the following error when running the application from Visual Studio 2015, when used with the initial release of the Beta 6 tooling:</p><blockquote><p><strong>The current runtime target framework is not compatible with 'YourWebApplication'.</strong></p><p>Current runtime Target Framework: 'DNX,Version=v4.5.1 (dnx451)'<br> Type: CLR<br> Architecture: x64<br> Version: 1.0.0-beta6-12256</p></blockquote><p>If you’re instead running with a debugger attached, you won’t hit a breakpoint, you’ll only get a 500. It doesn’t matter what framework runtimes you have installed on your machine. It doesn’t matter what your global.json says or what dependencies or frameworks you take or specify in project.json.<p>This is because the default runtime for launching IIS Express from Visual Studio is indeed dnx451. You can get around this in one of two ways:<ol><li>Launch the website from the command line in your project directory using the command “dnx . web”. Web is a command that is exposed in your project.json and shares the needed info (config) to launch a project-specific instance of IIS.</li><li>In your project properties (right-click, properties from Solution Explorer), add the following environment variable in the Debug tab:<br>&nbsp;&nbsp;&nbsp;&nbsp; DNX_IIS_RUNTIME_FRAMEWORK = dnx46</li></ol><p><img width="532" height="277" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/07/image25.png" border="0"></p><p>A huge thanks goes out to <a href="https://twitter.com/anurse" target="_blank">Andrew Nurse</a> for providing a resolution on <a href="http://stackoverflow.com/questions/31671851/vs-2015-setting-right-target-framework-for-asp-net-5-web-project/31687529#31687529" target="_blank">this matter</a> and responding to <a href="https://github.com/aspnet/dnx/issues/2367" target="_blank">my issue</a> on GitHub.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7331</wp:post_id>
		<wp:post_date>2015-07-29 14:00:00</wp:post_date>
		<wp:post_date_gmt>2015-07-29 14:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>launching-an-asp-net-5-application-from-visual-studio-2015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3983186950]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41171</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; July 30, 2015 (#2064) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/07/30/dew-drop-july-30-2015-2064/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.19</wp:comment_author_IP>
			<wp:comment_date>2015-07-30 11:50:12</wp:comment_date>
			<wp:comment_date_gmt>2015-07-30 11:50:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Launching An ASP.NET 5 Application from Visual Studio 2015 (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438257013.408267;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438651717.9944019;s:5:"event";s:15:"status-approved";s:4:"user";s:14:"james.chambers";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41741</wp:comment_id>
			<wp:comment_author><![CDATA[proggrockcode]]></wp:comment_author>
			<wp:comment_author_email>proggrockcode@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.87.234.202</wp:comment_author_IP>
			<wp:comment_date>2015-09-30 19:34:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-30 19:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[saved me a lot of time, thanks so much for this!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2282555269]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Converting .NET 4.6 Projects to the VS 2015 Project System</title>
		<link>http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/</link>
		<pubDate>Mon, 10 Aug 2015 14:47:06 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7451</guid>
		<description></description>
		<content:encoded><![CDATA[<p>To take advantage of multi-targeted outputs from our project – allowing our assemblies to be used from multiple frameworks across the organization – we want to upgrade our projects to use the new project system in Visual Studio 2015. Previously, we would have needed a base project and then a separate project for each framework target (PCL, 4.5, 3.5, 4.5.2, etc), but in today’s solutions we can have a single project output all of the assets we wish to support.</p>
<p class="side-note"><em>In this series we’re working through the conversion of <a href="http://clear-measure.com/" target="_blank">Clear Measure’s</a> <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/" target="_blank">Bootcamp MVC</a> 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/" target="_blank"><em>intro page</em></a><em>.</em></p>
<h2>Recreating the Solution and Projects</h2>
<p>As of right now, there are no tools in place that would support an in-place migration from the old project system to the new one. Because we wanted to preserve project naming and namespaces, I copied everything out into a new directory – the solution and the projects – and rebuilt the solution from scratch.</p>
<p>I would anticipate a project conversion process at some point, even one that was able to provide the basics (like moving package dependencies to project.json) and guidance on the remaining pieces (like why part of the project wasn’t able to convert, and how you might approach it). This post will walk through those steps of the conversion, but it will be done manually.</p>
<p>I wanted to maintain all the same names of the assemblies, namespaces and outputs, and the only way to currently do this is to clear out the src folder and start over. Don’t worry, our code is still good, we just have to wrangle it into new containers.</p>
<h2>Step 0: Folder Reorganization</h2>
<p>One of the first changes that I made was a reorganization of the tooling that is used to support the build. Some of the build script relied on packages existing on disk (NUnit’s console runner, AliaSql) but this is an order-of-operations problem. When you grab the solution from the repo, you’re not actually able to build it until you restore the packages. Further, these assets are <strong>solution-level </strong>concerns, not project-level concerns, so which project do you install them into? NuGet does not have the concept of solution-level packages that apply to the solution itself, so while it works perfectly well for projects, NuGet is inherently not ideal for incorporating solution dependencies.</p>
<p>To remedy this, I have moved these types of assets into a tools folder and updated the build scripts accordingly. This approach is likely a matter of opinion more than anything, but the reality is that we want the directory structure to reflect which concerns <strong><u>are in</u></strong> the solution versus which concerns <strong><u>work on</u></strong> the solution.</p>
<p>I would like to note that there are still improvements to be made here – for instance, I know many teams actually have build scripts that are capable of not only restoring packages, but have the ability to go and grab NuGet itself – so expect some more changes as we continue to move through this migration. Automation is <em>awesome</em>.</p>
<h2>Step 1 – Core</h2>
<p><a href="http://jameschambers.com/wp-content/uploads/2015/08/image.png"><img width="347" height="244" title="image" align="right" style="margin: 0px 0px 0px 10px; border: 0px currentcolor; border-image: none; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/08/image_thumb.png" border="0"></a>Our Core project was a breeze to port because it’s at the heart of the system in an <a href="jeffreypalermo.com/blog/the-onion-architecture-part-1/" target="_blank">Onion Architecture</a> and takes on very few dependencies. I started the conversion by going through the motions of creating a new Core project, using the DLL project from the "Web Templates" part of the dialog.&nbsp; The first project also creates the solution, and the convention for the way the solutions are laid out on disk has changed.</p>
<p>So…the build broke.</p>
<p>Thankfully, this was easy to resolve with just a couple of quick fixes, but you’ll likely have to take similar steps on your project:</p>
<ul>
<li>First, update your paths to point at the correct location on disk</li>
<li>Second, comment out all the build steps that have to come later, like running unit or integration tests</li>
</ul>
<p><a href="http://jameschambers.com/wp-content/uploads/2015/08/image1.png"><img width="170" height="230" title="image" align="right" style="margin: 0px 0px 10px 10px; border-image: none; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/08/image_thumb1.png" border="0"></a>We can’t run unit tests quite yet (we need to convert those projects as well), but we can make sure that the project is building correctly.</p>
<p>We’re not modifying code at this point, so provided we can get the solution building we can have a good level of confidence – but not a guarantee – that our code is still in good shape. We want those tests back online before we merge this branch back to develop.</p>
<p>With the build running, I was able to jump back into Visual Studio and start adding back the code. In my case, nearly everything worked just by copying in the files from my backup location and pasting them into the project. It’s a bit tedious, but it’s by no means difficult or complicated.</p>
<p>The only package that I had to add at this point was a legacy dependency from NHibernate, namely the Iesi.Collections package. This is done by opening up the project.json for Core and updating the “dependencies” part of the project file. As soon as you save the file out, Visual Studio goes off and runs a background install of the packages that it finds you’ve put in there, along with any dependencies of those packages.</p>
<p><img width="426" height="140" title="image" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/08/image2.png" border="0"></p>
<p>Finding the right package and most recent version is quite easy in the project.json world. As you start typing a package name, in-line search kicks in and starts suggesting matches. Available versions of the packages are displayed, and VS indicates if those packages are available locally in a cache or found on a remote NuGet repository, indicated by the icon you see. All packages sources are queried for package information, so you can get packages and their version information from private repositories as well.</p>
<p>Once the packages were restored the solution built fine in Visual Studio 2015 and I was able to return to my console to run the build script.</p>
<p><img width="419" height="116" title="image" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/08/image3.png" border="0"></p>
<h2>Step 2: Data Access</h2>
<p>Other than the fact that Data Access has a few more dependencies, it was really more of the same to get the Data Access project online and building through our script. I added another DLL to the solution, added the source files and installed the dependencies via project.json.</p>
<p>When I compiled the project at this point, some of the changes of the .NET Framework and the strategy of the team started to surface. For instance, typically you might find a reference to System.Data from your GAC in a project, however, in the new cross-platform project system and under the assumption that you may not have a GAC at all, the .NET folks have taken the mantra of “NuGet all the things.” To get access to the System.Data namespace and the IDataReader interface that was used in the DataAccess project, I had to add a reference to System.Data version 4.0.0 from NuGet (via project.json).</p>
<p>Other projects will have similar hits on moved packages. It is likely safe to use the GAC in situations where you know what the build environment looks like and are sure that build agents and other developers will have access to the required dependencies. But it is a more stable approach – and a better chance to successful compile our application – to instead reference those binaries from a package repository.</p>
<p>The other notable piece was in how we reference other projects in our own solution; today they look a lot like referencing other packages. Whether you go through the Add Reference dialog or if you prefer to edit the project file by hand, you’re going to also need to introduce a dependency on Core, which is done simply by adding the following line to the dependencies:</p>
<pre class="csharpcode"><span class="str">"Core"</span>: <span class="str">"1.0.0-*"</span></pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<p>Excellent! Almost ready to build!</p>
<h2>Step 3: Clean Up</h2>
<p>Just a couple of other notes that I took and a couple of tips I’ve learned as I created these projects:</p>
<ul>
<li>You’ll have to set the default namespaces so that new classes that are introduced adhere to your conventions</li>
<li>You need to enable the “Produce outputs on build” in order for your project to build a NuGet package (this is in the build options)</li>
</ul>
<p>You’re also in charge of wiring up any dependencies your modules need where they aren’t satisfied with a single package for all output types. For instance, when I tried a small gamut of output targets I ran into this problem:</p>
<p><img width="501" height="160" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/08/image4.png" border="0"></p>
<p>The new .NET Platform (the base for Windows, web, mobile and x-plat) was not supported given the dependencies I have listed in my project, namely it is the IESI Collections that is the problem here. Ideally, you want to be able to support as many runtimes as possible, so you want to target the lowest common denominator. That is likely going to be “dotnet” going forward (which could in turn be used to build up applications for web, Windows or phone) but more realistically things like “net46”, which is just the 4.6 version of .NET, or “dnx46”, which is the new bits (think MVC Framework) running on top of .NET 4.6. In the cases where you don’t have a package that matches the target you need, you have a couple of choices, listed in order of easiest to most difficult:</p>
<ul>
<li>Contact the package authors to see if there is a new version coming</li>
<li>If it’s open source, contribute and get an output built for dotnet</li>
<li>Add runtime-specific dependencies to get the project building, then use compiler switches to implement different blocks of code based on the target framework</li>
<li>Switch off of that version of the package, or switch to an alternate package to get the same functionality and then update your code as required</li>
</ul>
<p>Sadly, that last one is likely the way we’re going to need to go, especially if we want to target x-plat development. This is not an easy task, but getting to this point in the migration is and only takes a couple of hours. If you haven’t done this sanity check in your project to identify packages that may cause issues during migrations, I would suggest that your assessment is not complete.</p>
<p>For the time being, we are concerned about supporting .NET 4.6 and DNX running on 4.6 for our project, so that is where I have left things. This is a reasonable compromise allowing continued development in web and Windows.</p>
<h2>Moving On</h2>
<p>The main tenets of our application are now alive and kicking in our Visual Studio 2015 solution with the new project system in place. In the next post in this series we’ll have a look at getting the tests online and updating the build script to execute our tests.</p>
<p>If you’d like to follow along with the progression as we get this fully converted you can check out <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/tree/refactor/move-to46-with-multitargetting" target="_blank">the branch on GitHub</a>.</p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/08/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7451</wp:post_id>
		<wp:post_date>2015-08-10 14:47:06</wp:post_date>
		<wp:post_date_gmt>2015-08-10 14:47:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-net-4-6-projects-to-the-vs-2015-project-system</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc6"><![CDATA[MVC6]]></category>
		<category domain="category" nicename="mvc6-conversion"><![CDATA[MVC6 Conversion]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4019923185]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41371</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Dump &#8211; August 17, 2015 (#2070) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/08/17/dew-dump-august-17-2015-2070/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.122</wp:comment_author_IP>
			<wp:comment_date>2015-08-17 11:03:56</wp:comment_date>
			<wp:comment_date_gmt>2015-08-17 11:03:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Converting .NET 4.6 Projects to the VS 2015 Project System (james.chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439809436.2745039;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Writing Custom Commands for DNX with ASP.NET 5.0</title>
		<link>http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/</link>
		<pubDate>Tue, 11 Aug 2015 02:30:07 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7531</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you are a developer on the .NET stack, you’ve now got access to a great new extension to your development environment. DNX, or the .NET Execution Environment, is a powerful new extensibility point that you can leverage to build project extensions, cross-platform utilities, build-time extensions and support for automation. In this article I’ll walk you through the process of building your own custom DNX command on top of ASP.NET 5.0.</p><h2>Where You’ve Seen It</h2><p>DNX has the ability to scan a project.json and look for commands that you install as packages or that you create yourself. If you’ve started following the examples of the MVC Framework or perhaps with Entity Framework, you may have seen things like this in your project.json:</p><pre class="csharpcode">  <span class="str">"commands"</span>: {
    <span class="str">"web"</span>: <span class="str">"Microsoft.AspNet.Hosting --config hosting.ini"</span>,
    <span class="str">"ef"</span>: <span class="str">"EntityFramework.Commands"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p><a href="http://jameschambers.com/wp-content/uploads/2015/08/image5.png"><img width="356" height="232" title="image" align="right" style="margin: 10px 0px 10px 13px; border: 0px currentcolor; border-image: none; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/08/image_thumb2.png" border="0"></a>These entries are here so that DNX understands the alias you assign (such as “web” or “ef”) and how it maps to an assembly that you’ve created or taken on as a dependency.&nbsp; The EF reference is quite straightforward above, simply saying that any call to “ef” via DNX will go into the entry point in EntityFramework.Commands.&nbsp; You would invoke that as follows from the directory of your <em>project</em>:</p><pre class="csharpcode">dnx . ef </pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>All parameters that are passed in are available to you as well, so if you were to instead use:</p><pre class="csharpcode">dnx . ef help migration</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Then EF would be getting the params “help migrations” to parse and process. As can be clearly seen in the “web” alias, you can also specify defaults that get passed into the command when it is executed, thus, the call to web in the above project.json passes in the path and filename of the configuration file to be used when starting IIS express. </p><p>There is no special meaning to “ef” or “web”. These are just names that you assign so that the correct mapping can be made. If you changed “ef” to “right-said-fred” you would be able to run migrations from the command line like so:</p><pre class="csharpcode">dnx . right-said-fred migration add too-sexy</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Great! So you can create commands, pass in parameters and share these commands through the project.json file. But now what?</p><h2>Now What?</h2><p>I’m so glad you asked!</p><p>So far things really aren’t too different from any other console app you might create. I mean, you can parse args and do whatever you like in those apps as well.</p><p>But here’s the winner-winner-chicken-dinner bits: did you notice the “.” that is passed into DNX? That is actually the path to the project.json file, and this is important. </p><p class="side-note"><strong>Important Note</strong>: From beta 7 onward (or already if you’re on the nightly builds) DNX will implicitly run with an appbase of the current directory, removing the need for the “.” in the command. I’ll try to remember to come back to this post to correct that when beta 7 is out in the wild. Read more about the change on the <a href="https://github.com/aspnet/Announcements/issues/52" target="_blank">ASP.NET Announcement repo</a> on GitHub.</p><p>DNX doesn’t actually do a lot on its own, not other than providing an execution context under which you can run your commands. But this is a good thing! By passing in the path to a project.json, you feed DNX the command mappings that you want to use, and in turn, DNX provides you with all of the benefits of running inside of the ASP.NET 5.0 bits. Your console app just got access to Dependency Injection as a first-class citizen in your project, with access to information about whichever app it was that contained that project.json file.&nbsp; </p><p>Consider the EF command mapping again for migrations for a second: what is going on when you tell it to add a migration?&nbsp; It goes something like this:</p><ol><li>DNX looks for the project.json at the path you provide</li><li>It parses the project.json file and finds the command mapping associated with your statement</li><li>I <strong><em>creates an instance</em></strong> of the class that contains your command, injecting environment and project information as is available</li><li>It checks the rest of what you’ve passed in, and invokes the command, passing in any parameters that you’ve supplied</li></ol><h2>How to Build Your Own</h2><p>This is actually super easy!&nbsp; Here’s what you need to do:</p><ol><li>Create a new ASP.NET 5 Console Application in Visual Studio 2015</li><li>Add any services interfaces you need as parameters to the constructor of the Program class – but this is optional in the “hello dnx” realm of requirements</li><li>Add your logic to your Main method – start with something as simple as a Console.WriteLine statement</li></ol><p>From there, you can drop to a command line and run your command. That’s it!</p><p class="side-note"><strong>Pro Tip</strong> You can easily get a command line in your project folder by right-clicking on the project in Solution Explorer and selecting “Open Folder in File Explorer”. When File Explorer opens, simply type in “cmd” or “powershell” in the location bar and you’ll get your shell.</p><p>The secret as to why it works from the console can be found in your project.json: when you create a console app from the project templates, the command alias mapping for your project is automatically added to your project.&nbsp; In this same way, along with referencing your new command project, <em>other projects</em> can now consume your command.</p><h2>Beyond Hello World</h2><p>It is far more likely that you’re going to need to do something in the context of the project which uses your command. Minimally, you’re likely going to need some configuration drawn in as a default or as a parameter in your command. Let’s look at how you would take that hello world app you created in three steps and do something a little more meaningful with it.</p><p>First, let’s add some dependencies to your project.json:</p><pre class="csharpcode">  <span class="str">"dependencies"</span>: {
    <span class="str">"Microsoft.Framework.Runtime.Abstractions"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.Abstractions"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.Json"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.UserSecrets"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.CommandLine"</span>: <span class="str">"1.0.0-beta6"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Now let’s add a new JSON file to our project called config.json with the following contents:</p><pre class="csharpcode">{
  <span class="str">"command-text"</span>: <span class="str">"Say hello to my little DNX"</span>
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Getting there. Next, let’s bulk up the constructor of the Program class, add a private member and a Configuration property:</p><pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">readonly</span> IApplicationEnvironment _appEnv;

<span class="kwrd">public</span> Program(IApplicationEnvironment appEnv)
{
    _appEnv = appEnv;
}

<span class="kwrd">public</span> IConfiguration Configuration { get; set; }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>We also need to add a method to Program that handles loading the config, taking in what it can from the config file, but loading on top of that any arguments passed in from the console:</p><pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">void</span> BuildConfiguration(<span class="kwrd">string</span>[] args)
{
    var builder = <span class="kwrd">new</span> ConfigurationBuilder(_appEnv.ApplicationBasePath)
        .AddJsonFile(<span class="str">"config.json"</span>)
        .AddCommandLine(args);

    Configuration = builder.Build();
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Finally, we’ll add a little more meat to our our Main method:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
{
    BuildConfiguration(args);

    Console.WriteLine(Configuration.Get(<span class="str">"command-text"</span>));
    Console.ReadLine();
}</pre><p><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>The above sample can now be executed as a command. I’ve got the following command mapping in my project.json file (yes, the same project you use to create the command can also expose the command):</p><pre class="csharpcode">  <span class="str">"commands"</span>: {
    <span class="str">"DnxCommands"</span>: <span class="str">"DnxCommands"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>This means that from the console in the dir of my project I can just type in the following: </p><pre class="csharpcode">dnx . DnxCommands</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>I can also now reference this project from any other project (or push my bits to NuGet and share them to any project) and use the command from there. Other projects can add the “command-text” key to their config.json files and specify their own value, or they can feed in the parameter as an arg to the command:</p><pre class="csharpcode">dnx . DnxCommands command-text=<span class="str">"'Pop!' goes the weasel"</span></pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>In my <a href="https://github.com/MisterJames/DnxCommands/" target="_blank">sample solution on GitHub</a>, I also have a second project which renames the alias and has it’s own config file that is read in by the command.</p><h2>Next Steps</h2><p>All of this opens the doors for some pretty powerful scenarios. Think about what you can do in your build pipeline without having to write, expose and consume custom msbuild targets. You can create commands that are used to build up local databases for new environments or automate the seeding of tables for integration tests. You could add scaffolders and image optimizers and deployment tools and send text messages to your Grandma. </p><p>What you should do next is to look at the kinds of things you do when you’re working on your solution – not in it – and think about how you might be able to simplify those tasks. If there are complex parts of your build scripts that you encounter from one project to the next, perhaps you can abstract some of those bits away into a command and then shift to using simplified build scripts that invoke your commands via DNX.</p><p>To get some inspiration, check out my <a href="https://github.com/MisterJames/DnxCommands/" target="_blank">sample project on GitHub</a>, the DNX commands for other libraries (such as <a href="https://github.com/aspnet/EntityFramework/tree/dev/src/EntityFramework.Commands" target="_blank">EF</a> or <a href="https://github.com/xunit/dnx.xunit/" target="_blank">xUnit</a>) and try writing a few of your own.</p><p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/08/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7531</wp:post_id>
		<wp:post_date>2015-08-11 02:30:07</wp:post_date>
		<wp:post_date_gmt>2015-08-11 02:30:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-custom-commands-for-dnx-with-asp-net-5-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4021476678]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41281</wp:comment_id>
			<wp:comment_author><![CDATA[Calvin Allen]]></wp:comment_author>
			<wp:comment_author_email>calvin@calvinallen.net</wp:comment_author_email>
			<wp:comment_author_url>http://calvinallen.net</wp:comment_author_url>
			<wp:comment_author_IP>65.60.166.87</wp:comment_author_IP>
			<wp:comment_date>2015-08-11 02:35:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-11 02:35:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Goodbye, rake?!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2185678928]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41291</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-08-11 02:42:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-11 02:42:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think there will still be a place for rake for people who already know it and those who have built their processes around it. But this is dead-simple if you're not into rake already, and any dev who's on the .NET stack inherently already knows how to build DNX commands, they just don't know that yet. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41281</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2185678928]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2185707342]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41391</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET Community Standup - August 18, 2015 - .NET Web Development and Tools Blog - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/webdev/archive/2015/08/20/asp-net-community-standup-august-18-2015.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.146</wp:comment_author_IP>
			<wp:comment_date>2015-08-20 16:17:11</wp:comment_date>
			<wp:comment_date_gmt>2015-08-20 16:17:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] James Chambers has a blog post showing how to write custom dnx commands [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1440087432.0335491;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41521</wp:comment_id>
			<wp:comment_author><![CDATA[Links of the month (August Edition) | Jan @ Development]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://janatdevelopment.com/2015/09/04/links-of-the-month-august-edition-2015/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.83.69</wp:comment_author_IP>
			<wp:comment_date>2015-09-04 22:21:30</wp:comment_date>
			<wp:comment_date_gmt>2015-09-04 22:21:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Writing Custom Commands for DNX with ASP.NET 5.0 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441405294.217515;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41631</wp:comment_id>
			<wp:comment_author><![CDATA[zhuravl]]></wp:comment_author>
			<wp:comment_author_email>roman.pushkin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.85.2.34</wp:comment_author_IP>
			<wp:comment_date>2015-09-17 17:52:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-17 17:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey James, thanks for post.

Do you know how to build solution from scratch without VS2015?

I've created a question at SO, but there's no any answers at the moment

http://stackoverflow.com/q/32591764/337085]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2259023161]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Upgrading NPM in Visual Studio 2015</title>
		<link>http://jameschambers.com/2015/09/upgrading-npm-in-visual-studio-2015/</link>
		<pubDate>Wed, 02 Sep 2015 03:15:17 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7621</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Visual Studio 2015 (<u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank">download here</a></u>) ships with it’s own version of several external tools, such as grunt, node and npm.&nbsp; If you are wanting to take advantage of newer versions of these tools, you have three options:</p><ol><li>Wait for VS 2015 to upgrade the tooling and ship an update.</li><li>Hack the tooling proxies used by Visual Studio.</li><li>Use the built-in external tool path editor to slip your updated versions in.</li></ol><p>Waiting for updates is no fun. Let’s hack a little.</p><h2>Wait a minute! Why are we doing this?</h2><p><a href="http://jameschambers.com/wp-content/uploads/2015/09/image.png"><img width="187" height="239" title="image" align="right" style="margin: 0px 0px 11px 10px; border: 0px currentcolor; border-image: none; float: right; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/09/image_thumb.png" border="0"></a>For me the primary motivator was the path length limitations in Windows. Nested node_modules folders buried 19 levels deep is no fun when you hit the max path length. For me, I was trying to share the files on OneDrive and hit 255 characters pretty quickly.</p><p>Older versions of npm resolved package dependencies by pulling in a package, creating a node_modules folder inside of it, then putting all the packages in there. Except, of course, if one of those packages contained more dependencies, then we were into the recursive bits of package resolution and very deep paths, ultimately toppling a lot of Windows tooling.</p><p>The latest major version of npm – version 3.0.x and above – creates a flat store of packages (very similar to what we know in NuGet) and only pulls one copy of each required version of each required package. Much nicer. So, back to the dicing!</p><h2>Hacking up the VS Tooling Proxies</h2><p>These are pretty straightforward, once you find them. For me, they were located in the following directory:</p><p>C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\Web Tools\External</p><p>For example, here the entire contents of npm.cmd:</p><pre class="csharpcode"><span class="str">@"%~dp0\node\node"</span> <span class="str">"%~dp0\npm\node_modules\npm\bin\npm-cli.js"</span> %*</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>The %~dp0 is the old command line way of bringing the current drive letter (the d in the command), the path (the letter p here) and the current directory of the executing script (represented by 0) into context. So, basically, “start from where you’re running”. It’s a very hard-to-read version of “.” in most other notations. So, the command is running node (which is an exe), passing in the VS version of npm, and pushing into it the rest of the parameters that were passed along. So, when VS issues an “npm install”, this command kicks in, runs npm via node and passes “install” as the command to npm. </p><p>With that knowledge, we can simply update the call that is proxied through to our current version. I installed node (which includes npm), then updated npm to the latest version (thanks to <a href="https://www.npmjs.com/package/npm-windows-upgrade" target="_blank"><u>this module</u></a>) and updated my npm.cmd to the following:</p><pre class="csharpcode"><span class="str">@"C:\Program Files (x86)\nodejs\node.exe"</span> <span class="str">"C:\Program Files (x86)\nodejs\node_modules\npm\bin\npm-cli.js"</span> %*</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Of course, here be dragons: I have no idea how stable this will be with updates to VS, and/or how badly you may be crippling features if you mess this up. So, make sure you take a backup of your scripts before modifying them.&nbsp; This will be super-handy if you have some other requirement – like the order of params on tooling changes – but otherwise likely isn’t needed. Thankfully, there is a UI-way of doing this, too.</p><h2>Not Hacking Your Visual Studio Tooling</h2><p>Probably a more pleasing solution for your boss.</p><p>This one is pretty straightforward as well, and can be done by right-clicking on the “Dependencies” node in Solution Explorer, or by typing “external web tools” in the QuickLaunch bar. </p><p>From here, just add a new entry and move it to the top. For me, npm is located in the nodejs install directory, and this is good enough to get VS to see it first.</p><p><a href="http://jameschambers.com/wp-content/uploads/2015/09/image1.png"><img width="521" height="245" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/09/image_thumb1.png" border="0"></a></p><p>Note, I did seem to have some issues with caching and/or gremlins here, so you may need to restart Visual Studio for the tooling paths to be picked up.</p><h2>What I Don’t Like</h2><p>Couple of things here that I don’t care for:</p><ol><li><strong>Not consistent between team members</strong>: there seems to be no way to put in your solution/project a hint at the version of tooling you wish to use. In my case, a developer with npm 2 trying to run an install off of OneDrive would fail.</li><li><strong>Visual Studio external tools are internal</strong>: yeah, you read that right. I’m not a fan of the way these projects are packed in, in such a way that the path to update them or pick versions is non-obvious.</li></ol><h2>Next Steps</h2><p>Not too much to do, but if you run into long paths, nested node_modules kicking your butt or other out-of-date tooling, this should get you on your way.</p><p>Make sure you grab your <u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank">copy of VS 2015</a></u> and start diving into the next phase of our careers!</p><p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/09/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7621</wp:post_id>
		<wp:post_date>2015-09-02 03:15:17</wp:post_date>
		<wp:post_date_gmt>2015-09-02 03:15:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrading-npm-in-visual-studio-2015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[node]]></category>
		<category domain="post_tag" nicename="npm"><![CDATA[npm]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4088992245]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41451</wp:comment_id>
			<wp:comment_author><![CDATA[Dew Drop &#8211; September 2, 2015 (#2082) | Morning Dew]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.alvinashcraft.com/2015/09/02/dew-drop-september-2-2015-2082/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.48.33</wp:comment_author_IP>
			<wp:comment_date>2015-09-02 11:54:09</wp:comment_date>
			<wp:comment_date_gmt>2015-09-02 11:54:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Upgrading NPM in Visual Studio 2015 (James Chambers) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441194849.7951269;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41452</wp:comment_id>
			<wp:comment_author><![CDATA[Justin James]]></wp:comment_author>
			<wp:comment_author_email>digitaldrummerj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.90.181.77</wp:comment_author_IP>
			<wp:comment_date>2015-09-02 13:40:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-02 13:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Another way to do this is by moving the $(path)  line to above the visual studio tools location.  Then it will pick up all of your system install tools before using the visual studio versions.  

http://digitaldrummerj.me/visual-studio-2015-external-web-tools/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2231819357]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41491</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-09-04 02:27:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-04 02:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Justin, looks like that works a treat as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41452</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2231819357]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2235163994]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41791</wp:comment_id>
			<wp:comment_author><![CDATA[Ben]]></wp:comment_author>
			<wp:comment_author_email>b.b.goerdt@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.54.118.140</wp:comment_author_IP>
			<wp:comment_date>2015-10-08 22:04:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-08 22:04:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Visual Studio runs very slow for me after doing this. My CPU usage shoots up to 100% and a lot (4 up to 15) of node.exe's are running simultaneously, which is basically crippling my whole computer. Has anyone else run into this issue?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41452</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2231819357]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2297356026]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41801</wp:comment_id>
			<wp:comment_author><![CDATA[Justin James]]></wp:comment_author>
			<wp:comment_author_email>digitaldrummerj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://digitaldrummerj.me</wp:comment_author_url>
			<wp:comment_author_IP>108.171.132.189</wp:comment_author_IP>
			<wp:comment_date>2015-10-08 22:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-08 22:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have seen this since Node 4.x has come out.  It worked like a charm for me with Node 0.12.x.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41791</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2297356026]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2297381954]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41821</wp:comment_id>
			<wp:comment_author><![CDATA[Ben]]></wp:comment_author>
			<wp:comment_author_email>b.b.goerdt@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.54.118.140</wp:comment_author_IP>
			<wp:comment_date>2015-10-09 16:45:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-09 16:45:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I downgraded to 0.12.7 but I'm still having the same problems. Do you know of anything else that could be causing it?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41801</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2297381954]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2298600561]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41831</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-10-10 19:25:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-10 19:25:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I ran into the same thing. As crazy as this sounds, adding a full location and moving it to the top of the list worked for me, rather than moving the path up. That said, I've seen the runaway process since, but it has seemed to be less frequent. This is completely anecdotal...sorry I can't offer more help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41821</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2298600561]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2300391746]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Supporting Options and Arguments in Your dnx Commands</title>
		<link>http://jameschambers.com/2015/09/supporting-options-and-arguments-in-your-dnx-commands/</link>
		<pubDate>Tue, 08 Sep 2015 13:00:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7671</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Grab yourself your copy of <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank"><u>Visual Studio 2015</u></a> and buckle up! Today we’re going to create our own dnx command with support for options and arguments.</p><p>In my <a href="http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/" target="_blank"><u>previous post</u></a> on dnx commands I showed how you could create your own command as part of your project that could be invoked via the .Net Execution Environment, a.k.a., dnx. While this works fine in simple scenarios, chances are you might need to have more than one “command” embedded in your tooling. Right away you have concerns for parsing the arguments and options that are passed in, which will quickly lead to a more complex application than you were originally intending.</p><p class="side-note"><strong>Important Note</strong>&nbsp; I am building the samples here in this post on Beta 6, knowing that there are two changes coming in, the first is that they are dropping the project path argument to dnx (the period, or “current directory”), and the second being the high likelihood that there will continue to be refinements in the namespaces of these libraries. I’ll update these when I complete my upgrade to Beta 7.</p><h2>A Real-world Example</h2><p>Consider Entity Framework, where you can access a number of different commands. It provides tooling to your application by making a number of commands related to your project, your entities, your database and your context available from the command line. This is great, because it also means that you can use it in automation tasks.</p><p><img width="397" height="214" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/09/image2.png" border="0"></p><p>Here’s the command as executed from the command line, followed by a call to get the help on a specific command, migration:</p><pre class="csharpcode">dnx . ef
dnx . ef migration -h</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>So, think about those switches for a second, and the mistakes and string manipulation you’d need to do to pull that all together. What about supporting help and organizing your commands? Being able to accept different options and arguments can grow to be an exhausting exercise in bloat…</p><h2>Unless!</h2><p>…unless, of course, you had an abstraction over those parsing bits to work with.&nbsp; Quite wonderfully, Microsoft has made available the bits you need to take away those pains, and it all starts with the following package (and a bit of secret sauce):</p><pre class="csharpcode">Microsoft.Framework.CommandLineUtils.Sources</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>And here’s the secret sauce…instead of using something like “1.0.0-*” for your version, use this instead: { "version": "1.0.0-*", "type": "build" }. This notation bakes the abstractions into your application so that you don’t have to bundle and distribute multiple DLLs/dependencies when you author and share commands.</p><p class="side-note">The full version of the final, working project in this post is <a href="https://github.com/MisterJames/DnxCommandsWithOptsArgs/" target="_blank">available on GitHub</a>. Feel free to pull down a copy and try this out for yourself!</p><p>Let’s get started.</p><h2>Creating a Project</h2><p>As <a href="http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/" target="_blank"><u>previously covered</u></a>, creating an ASP.NET 5 command line app is all that is required to get started with creating your commands. We have to add that package as a dependency as well, which should look like this in it’s entirety in your project.json:</p><pre class="csharpcode"><span class="str">"dependencies"</span>: {
  <span class="str">"Microsoft.Framework.CommandLineUtils.Sources"</span>: { <span class="str">"version"</span>: <span class="str">"1.0.0-*"</span>, <span class="str">"type"</span>: <span class="str">"build"</span> }
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Next, we need to make sure that our command is available and named as we’d like it to be called, which is also done in the project.json. Mine looks like this:</p><pre class="csharpcode"><span class="str">"commands"</span>: {
  <span class="str">"sample-fu"</span>: <span class="str">"DnxCommandArguments"</span>
},</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>You can imagine, of course, that it will be invoked much like Entity Framework, but with “sample-fu” instead of “ef”. Feel free to name yours as you wish. With that out of the way, we can start to do the heavy lifting in getting our commands exposed to external tooling.</p><h2>Working with the CommandLineUtils Objects</h2><p>Here is a bare-bones application that just displays it’s own help message:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">int</span> Main(<span class="kwrd">string</span>[] args)
{
    var app = <span class="kwrd">new</span> CommandLineApplication
    {
        Name = <span class="str">"sample-fu"</span>,
        Description = <span class="str">"Runs different methods as dnx commands"</span>,
        FullName = <span class="str">"Sample-Fu - Your Do-nothing dnx Commandifier"</span>
    };

    <span class="rem">// show the help for the application</span>
    app.OnExecute(() =&gt;
    {
        app.ShowHelp();
        <span class="kwrd">return</span> 2;
    });

    <span class="kwrd">return</span> app.Execute(args);
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>You can see that our Main method is basically creating an instance of the CommandLineApplication class, initializing some properties and finally wiring up a Func to be executed at some point in the future.&nbsp; Main returns the result of app.Execute, which in turn handles the processing of anything passed in and itself returns the appropriate value (0 for success, anything else for non-success).&nbsp; Here it is in action (the completed version), simply by typing dnx . sample-fu at the commandline:</p><p><img width="487" height="91" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/09/image3.png" border="0"></p><p>A quick note here as well…the OnExecute() is called if no other command turns out to be appropriate to run, as determined by the internal handling in CommandLineApplication. In effect, we’re saying, “If the user passes nothing in, show the help.” Help is derived from the configuration of commands, so to illustrate that, we need to add one.</p><h2>Wiring Up a Command</h2><p>Now we get into the fun stuff. Let’s write a command that takes a string as an argument and echos it right back out, and add an option to reverse the string.</p><pre class="csharpcode">app.Command(<span class="str">"display"</span>, c =&gt;
{
    c.Description = <span class="str">"Displays a message of your choosing to console."</span>;

    var reverseOption = c.Option(<span class="str">"-r|--reverse"</span>, <span class="str">"Display the message in reverse"</span>, CommandOptionType.NoValue);
    var messageArg = c.Argument(<span class="str">"[message]"</span>, <span class="str">"The message you wish to display"</span>);
    c.HelpOption(<span class="str">"-?|-h|--help"</span>);

    c.OnExecute(() =&gt;
    {
        var message = messageArg.Value;
        <span class="kwrd">if</span> (reverseOption.HasValue())
        {
            message = <span class="kwrd">new</span> <span class="kwrd">string</span>(message.ToCharArray().Reverse().ToArray());
        }
        Console.WriteLine(message);
        <span class="kwrd">return</span> 0;
    });
});
</pre><p><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>Command takes a name and an action in which we can add our options and arguments and process the input as required.&nbsp; We write a Func for OnExecute here as well, which will be called if the user types the command “display”.&nbsp; The option is implemented as a “NoValue” option type, so the parser is not expecting any value…it’s either on the command line or it isn’t.</p><p>The order of args is important, using the pattern:</p><p><font face="Lucida Console">&nbsp;&nbsp;&nbsp; COMMAND OPTIONS ARGUMENTS</font></p><p>You’ll get some errors if you don’t follow that order (and there are some open GitHub issues to help make better parsing and error messages available).</p><h2>A More Complicated Example</h2><p>Next up, let’s implement a command that can do one of two operations based on the option specified, and takes two values for an argument. Here a basic implementation of a calc method, supporting addition and multiplication:</p><pre class="csharpcode"><span class="rem">//  the "calc" command</span>
app.Command(<span class="str">"calc"</span>, c =&gt;
{
    c.Description = <span class="str">"Evaluates arguments with the operation specified."</span>;

    var operationOption = c.Option(<span class="str">"-o|--operation &lt;OPERATION&gt;"</span>, <span class="str">"You can add or multiply the terms specified using 'add' or 'mul'."</span>, CommandOptionType.SingleValue);
    var termsArg = c.Argument(<span class="str">"[terms]"</span>, <span class="str">"The numbers to use as a term"</span>, <span class="kwrd">true</span>);
    c.HelpOption(<span class="str">"-?|-h|--help"</span>);

    c.OnExecute(() =&gt;
    {
        <span class="rem">// check to see if we got what we were expecting</span>
        <span class="kwrd">if</span> (!operationOption.HasValue())
        {
            Console.WriteLine(<span class="str">"No operation specified."</span>);
            <span class="kwrd">return</span> 1;
        }
        <span class="kwrd">if</span> (termsArg.Values.Count != 2)
        {
            Console.WriteLine(<span class="str">"You must specify exactly 2 terms."</span>);
            <span class="kwrd">return</span> 1;
        }

        <span class="rem">// perform the operation</span>
        var operation = operationOption.Value();
        var term1 = <span class="kwrd">int</span>.Parse(termsArg.Values[0]);
        var term2 = <span class="kwrd">int</span>.Parse(termsArg.Values[1]);
        <span class="kwrd">if</span> (operation.ToLower() == <span class="str">"mul"</span>)
        {
            var result = term1 * term2;
            Console.WriteLine($<span class="str">" {term1} x {term2} = {result}"</span>);
        }
        <span class="kwrd">else</span>
        {
            var result = term1 + term2;
            Console.WriteLine($<span class="str">" {term1} + {term2} = {result}"</span>);
        }
        <span class="kwrd">return</span> 0;
    });
});</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Of note are the differences between the options and the arguments versus the first command. The option accepts one of two values, and the argument can accept exactly two values. We have to do a bit of validation on our own here, but these are the basic mechanics of getting commands working.</p><p>Taking it to the next level, you may wish to encapsulate your code in a class, or leverage the fact that DNX (and thus, your commands) are aware of the project context that you are running in…remember that if you are running in a project directory, you have the ability to read from the project.json.</p><h2>Next Steps</h2><p>Be sure to grab <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank"><u>Visual Studio 2015</u></a> and then start experimenting with commands. You can have a look at some of the other repos/projects that leverage CommandLineUtils, or check out the <u><a href="https://github.com/MisterJames/DnxCommandsWithOptsArgs/" target="_blank">completed project from this post on GitHub</a></u>.</p><p>Happy Coding! <img class="wlEmoticon wlEmoticon-smile" style="" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/09/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7671</wp:post_id>
		<wp:post_date>2015-09-08 13:00:00</wp:post_date>
		<wp:post_date_gmt>2015-09-08 13:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>supporting-options-and-arguments-in-your-dnx-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="dnx"><![CDATA[DNX]]></category>
		<category domain="post_tag" nicename="visual-studio-2015"><![CDATA[Visual Studio 2015]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4110117353]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41572</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET Community Standup - September 8, 2015 - .NET Web Development and Tools Blog - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/webdev/archive/2015/09/10/asp-net-community-standup-september-8-2015.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.143</wp:comment_author_IP>
			<wp:comment_date>2015-09-10 15:52:56</wp:comment_date>
			<wp:comment_date_gmt>2015-09-10 15:52:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] James Chambers is digging into dnx options and arguments in your own commands [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441900378.5496299;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41602</wp:comment_id>
			<wp:comment_author><![CDATA[Shawn Wildermuth]]></wp:comment_author>
			<wp:comment_author_email>shawn@wildermuth.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.54.70.128</wp:comment_author_IP>
			<wp:comment_date>2015-09-15 20:30:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-15 20:30:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article, but you might want to update it for Beta 7 (dnx no longer takes a directory as a default argument, so it'd be "dnx ef add migrations ..." for example.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2255445650]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41621</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-09-17 14:18:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-17 14:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, great, thanks Shawn. I had started this article right before Beta 7 was released, thus this disclaimer (both in this post and my previous one) about the path argument. I'll get these updated shortly. Thanks for the read/comment!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41602</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2255445650]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2258567951]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41681</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET Community Standup - September 15, 2015 - .NET Web Development and Tools Blog - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/webdev/archive/2015/09/22/asp-net-community-standup-september-15-2015.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.147</wp:comment_author_IP>
			<wp:comment_date>2015-09-22 16:03:51</wp:comment_date>
			<wp:comment_date_gmt>2015-09-22 16:03:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] James Chambers detailed how to support options and argument in custom dnx commands [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442937831.838366;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41701</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET Community Standup - September 15, 2015 - Learnxpress.com | Learnxpress.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.learnxpress.com/asp-net-community-standup-september-15-2015.html</wp:comment_author_url>
			<wp:comment_author_IP>103.53.43.40</wp:comment_author_IP>
			<wp:comment_date>2015-09-24 21:20:29</wp:comment_date>
			<wp:comment_date_gmt>2015-09-24 21:20:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] James Chambers detailed how to support options and argument in custom dnx commands [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443129629.751662;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41771</wp:comment_id>
			<wp:comment_author><![CDATA[Stafford Williams]]></wp:comment_author>
			<wp:comment_author_email>stafford.williams@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.atqu.in</wp:comment_author_url>
			<wp:comment_author_IP>58.84.196.68</wp:comment_author_IP>
			<wp:comment_date>2015-10-08 06:14:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-08 06:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had a scenario where I wanted to run commands from a Class Library against objects defined in that library, however, DNX was expecting a static Main to exist as an entry point.  I solved this by switching my Class Library (Package) to a Console Application (Package).  Is that the way to go, or is there a way to make DNX execute commands inside a Class Library (Package)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2295978298]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41781</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-10-08 13:20:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-08 13:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That is indeed the current way to go, I'll stress "current" there as that may change (I don't have any insight there to share). You are free, of course, to call into other DLLs from your console app, but for the commands, at this point, you have to remember that DNX is the "host" environment that executes your own exe. I'm curious though...you shouldn't need a static Main...I'm using public int Main, for example, and that works fine.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41771</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2295978298]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2296404762]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41811</wp:comment_id>
			<wp:comment_author><![CDATA[Stafford Williams]]></wp:comment_author>
			<wp:comment_author_email>stafford.williams@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.atqu.in</wp:comment_author_url>
			<wp:comment_author_IP>58.84.196.68</wp:comment_author_IP>
			<wp:comment_date>2015-10-08 23:48:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-08 23:48:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cheers for the clarification.  Static Main here is in reference to the exception message thrown by attempting to execute a command on a Class Library (Package).  The full error reads "'ClassLibrary1' does not contain a static 'Main' method suitable for an entry point" and is thrown regardless of whether a class with static 'Main' method exists or not.


Switching to a Console Application does indeed allow public int Main though as per your example.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41781</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2296404762]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2297483698]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>ApiController in ASP.NET 5? Nopesauce.</title>
		<link>http://jameschambers.com/2015/11/apicontroller-in-asp-net-5-nopesauce/</link>
		<pubDate>Mon, 02 Nov 2015 22:39:31 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7711</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you’re developing in ASP.NET Web API you are familiar with the concept of inheriting from the base ApiController class. This class is still around in ASP.NET 5, but it is likely not meant for you to use.&nbsp; Here’s why your cheese has moved.</p><p class="side-note"><strong>TL;DR</strong>: Going forward, you’re going to inherit from Controller instead of ApiController, or from nothing at all. </p><h2>How We Used to Do It</h2><p>This is pretty much the bread and butter of a new controller in an old Web API 2.0 project:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ValuesController : ApiController
{
    [HttpGet]
    <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">string</span>&gt; Get()
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">"value1"</span>, <span class="str">"value2"</span> };
    }
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Nothing really too interesting here. We’re inheriting from a base class so we get some methods to leverage for return types, we can access the identity of the user through an IPrincipal and we have an HttpContext available to inspect the request and modify the response.</p><h2>How to Do it Now</h2><p>In ASP.NET 5 we don’t have the ApiController to inherit from, at least not out of the box. Instead we inherit from the Controller class.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ValuesController : Controller
{
    [HttpGet]
    <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">string</span>&gt; Get()
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">"value1"</span>, <span class="str">"value2"</span> };
    }
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>Pretty easy, right? We actually have three less characters. Some pieces have moved around such as Request and Response objects that live as properties at the class level, and our User is now a ClaimsPrincipal instead of an IPrincipal. You’ll also find that there’s a host of other things that do not seem really relevant at first glance to Web API (things like the service resolver and TempData).</p><p>These extra bits are peripheral, however; the takeaway is actually that we no longer have two separate sets of classes that represent concerns like controllers or routing, and we can go about getting at the important parts of the request in the same way from both types of controllers – there really is just one now.</p><h2>If You Still Want to Do It Now How We Used To</h2><p>There are perfectly good reasons to keep using the old format, perhaps you’re at the start of a port project or some have some other reason to stay as-was. No problem, you’re just going to have to pull in another package as it’s not part of your project template by default. Simply edit your project.json to include the following package:</p><pre class="csharpcode">Microsoft.AspNet.Mvc.WebApiCompatShim</pre><style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><p>While this <em>is</em> here and you <em>can </em>use it, it’s also likely a good time to evaluate if you <em>need</em> to use it. There are only a small set of refactorings that are required in order to use the unified interface and you can be </p><h2>Next Steps</h2><p>Make sure you’ve got <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank">Visual Studio 2015</a>, you have <a href="http://docs.asp.net/en/latest/getting-started/installing-on-windows.html" target="_blank">the latest beta installed</a> (at time of writing, beta 8), and give it a try. Happy coding <img class="wlEmoticon wlEmoticon-smile" style="" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/11/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7711</wp:post_id>
		<wp:post_date>2015-11-02 22:39:31</wp:post_date>
		<wp:post_date_gmt>2015-11-02 22:39:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apicontroller-in-asp-net-5-nopesauce</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc6"><![CDATA[MVC6]]></category>
		<category domain="post_tag" nicename="web-api"><![CDATA[Web API]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4284125031]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>42091</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Timms]]></wp:comment_author>
			<wp:comment_author_email>stimms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.73.154.130</wp:comment_author_IP>
			<wp:comment_date>2015-11-03 04:21:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-03 04:21:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've never had a great deal of time for web api preferring MVC style controllers. ASP.net MVC 6 seems to blurr the line between the two technologies. What features of web api have appeared in controllers which weren't there before?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2340062414]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42111</wp:comment_id>
			<wp:comment_author><![CDATA[scottt732]]></wp:comment_author>
			<wp:comment_author_email>scottt732@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sholo.net/</wp:comment_author_url>
			<wp:comment_author_IP>73.198.110.229</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 02:42:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 02:42:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[MVC 6 is effectively a replacement for both MVC 5.x and WebAPI 2.x.  It is completely decoupled from System.Web now.  That, along with the effort of merging the two required some breaking API changes.  The clean break will make the MVC 6 API more straightforward and easier to learn for newcomers, but will take some getting used to for people coming from earlier versions.  As a bonus, you get cross platform support and significantly improved runtime performance.  The WebApiCompatShim is probably best if you are porting code from WebAPI 2.x to MVC 6, but you should probably plan to decommission it down the road.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2341759115]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42121</wp:comment_id>
			<wp:comment_author><![CDATA[The Morning Brew - Chris Alcock &raquo; The Morning Brew #1961]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cwa.me.uk/2015/11/04/the-morning-brew-1961/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.109.184</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 09:13:55</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 09:13:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ApiController in ASP.NET 5? Nopesauce &#8211; James Chambers [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446628435.479676;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42131</wp:comment_id>
			<wp:comment_author><![CDATA[Kristof Mattei]]></wp:comment_author>
			<wp:comment_author_email>disqus@kristofmattei.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.kristofmattei.be/</wp:comment_author_url>
			<wp:comment_author_IP>156.109.18.122</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 14:57:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 14:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do not, I repeat, do not return an IEnumerable from your controllers. It is bound to shoot you in the foot one day or another.



Imagine a system where you contact some backend where returns you an IEnumerable. You pass that on to your client, maybe do some transformation along the way. 


Now, before it hits the client, the system needs to 'execute' your IEnumerable. 


And sometimes bad things happen. The backend system fails to execute his part, your code fails for that one edge case where you need to do a different lookup, it all happens, no shame there. You get the stacktrace, you inspect it, you fix the issue. Everybody happy. 


Unless you let WebAPI execute your IEnumerable. Try to find the issue then. In that stack. When you are on production. 


Just do a simple ToList/ToArray before you return it. You'll save yourself a headache in the future. 


I should write a blogpost about this topic...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342419890]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42141</wp:comment_id>
			<wp:comment_author><![CDATA[Craig Wagner]]></wp:comment_author>
			<wp:comment_author_email>craig.wagner@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.246.208.5</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 15:29:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 15:29:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That makes no sense as you never "execute" an IEnumerable. I think you're confusing it with IQueryable, in which case I agree with you, you should not return an IQueryable.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42131</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342419890]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342468425]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42151</wp:comment_id>
			<wp:comment_author><![CDATA[Nick G]]></wp:comment_author>
			<wp:comment_author_email>nick@nickgilbert.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nickgilbert.com</wp:comment_author_url>
			<wp:comment_author_IP>89.105.105.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 15:36:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 15:36:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What do you mean by "execute an IEnumerable"?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42131</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342419890]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342480484]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42161</wp:comment_id>
			<wp:comment_author><![CDATA[Kristof Mattei]]></wp:comment_author>
			<wp:comment_author_email>disqus@kristofmattei.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.kristofmattei.be/</wp:comment_author_url>
			<wp:comment_author_IP>156.109.18.122</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 16:14:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 16:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Invoke if you will. An IEnumerable is nothing more than a promise of a sequence of values. 


Imagine this:

```
public IEnumerable GetChars() 
{ 
    yield 'd';
    yield 'q';
    throw new Exception();
}
```


Now return that from your API Controller, and watch it fail.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42141</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342468425]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342569032]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42181</wp:comment_id>
			<wp:comment_author><![CDATA[dotnetchris]]></wp:comment_author>
			<wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Marisic.Net/</wp:comment_author_url>
			<wp:comment_author_IP>208.185.193.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 22:12:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 22:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OP <b>is</b> returning an array.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42131</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342419890]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2343197881]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42191</wp:comment_id>
			<wp:comment_author><![CDATA[dotnetchris]]></wp:comment_author>
			<wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Marisic.Net/</wp:comment_author_url>
			<wp:comment_author_IP>208.185.193.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 22:13:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 22:13:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[And? That's what should happen. It should fail.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42161</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342569032]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2343198508]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42201</wp:comment_id>
			<wp:comment_author><![CDATA[dotnetchris]]></wp:comment_author>
			<wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Marisic.Net/</wp:comment_author_url>
			<wp:comment_author_IP>208.185.193.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 22:14:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 22:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've always told people to not use WebApi, there was no need for it ever. There was one exception, self-hosting. You couldn't (previously) self-host MVC. Other than self-hosting, there was no need for WebApi at all. Everything it did, MVC always did.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42111</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2341759115]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2343200731]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42211</wp:comment_id>
			<wp:comment_author><![CDATA[dotnetchris]]></wp:comment_author>
			<wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Marisic.Net/</wp:comment_author_url>
			<wp:comment_author_IP>208.185.193.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 22:16:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 22:16:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There never was really any reason to use WebApi in lieu of MVC other than for self-hosting. The only thing it had otherwise was built in Content-Negotiation, but you could roll your own ConnNeg or use nuget for it in MVC. I've had ConnNeg in MVC for over 3 or 4 years.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42091</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2340062414]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2343203255]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42231</wp:comment_id>
			<wp:comment_author><![CDATA[Andrei Dragotoniu]]></wp:comment_author>
			<wp:comment_author_email>eidand@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.eidand.com</wp:comment_author_url>
			<wp:comment_author_IP>217.154.66.11</wp:comment_author_IP>
			<wp:comment_date>2015-11-05 15:10:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-05 15:10:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't understand your concern to be honest. 


You don't "execute" an IEnumerable.


Someone else asked if you're thinking about IQueryable and if you are then yes you are correct. Right now you are huffing and puffing at the wrong thing though :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42131</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342419890]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2344197726]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42251</wp:comment_id>
			<wp:comment_author><![CDATA[Szumma #015 &#8211; 2015 45. hét | d/fuel]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://chevenix.wordpress.com/2015/11/07/szumma-015-2015-45-het/</wp:comment_author_url>
			<wp:comment_author_IP>66.155.38.26</wp:comment_author_IP>
			<wp:comment_date>2015-11-07 13:30:25</wp:comment_date>
			<wp:comment_date_gmt>2015-11-07 13:30:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ApiController in ASP.NET 5? Nopesauce. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446903025.4657099;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42301</wp:comment_id>
			<wp:comment_author><![CDATA[Lyubomir Velchev]]></wp:comment_author>
			<wp:comment_author_email>lyubomir.velchev@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.13.185.70</wp:comment_author_IP>
			<wp:comment_date>2015-11-09 17:12:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-09 17:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It is better to use nuget to add WebAPI instead of modifying the project file. - Install-Package Microsoft.AspNet.WebApi]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2350327193]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42321</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>12.173.182.250</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 05:10:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 05:10:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, this is the same boat I'm in as well...just out of curiosity, are you using any kind of wrapper around it? I've taken to TopShelf over the last year or so.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42211</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2343203255]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2351309367]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42331</wp:comment_id>
			<wp:comment_author><![CDATA[dotnetchris]]></wp:comment_author>
			<wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Marisic.Net/</wp:comment_author_url>
			<wp:comment_author_IP>208.185.193.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 15:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 15:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wrapper around WebApi? No, i wouldn't see any value in that. It would be like putting a wrapper around EF inside your data-layer. I'm all for EF never being used outside the data layer, but i would never want someone to wrap EF.


I am actually currently using WebApi in TopShelf also.


If i misunderstood your question please let me know.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42321</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2351309367]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2351902706]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42341</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>12.173.182.250</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 15:52:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 15:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No...I'm meaning TopShelf :o) I was meaning as a service wrapper for the self-host bits, in the way that TopShelf makes the Windows Service bits easy.  Good to hear others are on the same page.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42331</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2351902706]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2351908009]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42351</wp:comment_id>
			<wp:comment_author><![CDATA[dotnetchris]]></wp:comment_author>
			<wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.Marisic.Net/</wp:comment_author_url>
			<wp:comment_author_IP>208.185.193.222</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 16:50:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 16:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Windows Service Installers are beyond a pain, topshelf makes life painless.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42341</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2351908009]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352001928]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>The Humanitarian Toolbox AllReady Code-a-Thon</title>
		<link>http://jameschambers.com/2015/11/the-humanitarian-toolbox-allready-code-a-thon/</link>
		<pubDate>Wed, 18 Nov 2015 09:22:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=7831</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I was recently in Seattle for the MVP Summit, one of the best ways to connect to product teams and really smart people from around the world. Every year I get to meet more of the team that builds the tools I use daily, reconnect with peers and catch up with friends. And I eat at Magiano’s.</p><p>But this year, the MVP Summit was trumped in awesomeness as quickly at it came to a close as the very next morning the code-a-thon for the Humanitarian Toolbox kicked into high gear.</p><p class="side-note"><strong><font color="#333333">Want to join the cause?</font></strong> The easiest way to get started is to join our weekly Saturday morning call. We are online from 10AM CST to Noon CST every Saturday. <a href="http://twitter.com/CanadianJames" target="_blank">Watch Twitter –&gt;</a> for the link just before 10AM. </p><p>There are a lot of great projects out there. AllReady is great software with great purpose as well.</p><h2>Hack for a Cause</h2><p>Whenever disaster strikes a community – a forest fire, a tsunami, an earthquake – lives are impacted. Sadly, those with the fewest resources are often the ones at most risk after the disaster.</p><p>From November 6th to the 8th I was privileged to join in with about twenty other individuals from around the world to work on <a href="http://www.htbox.org/blog/allready-project-launched-at-visual-studio-2015-release-event" target="_blank">AllReady</a>, an open source project that is curated by the Humanitarian Toolbox. AllReady is software that helps communities <em>organize</em> and <em>execute</em> efforts in preparedness so that those who are at risk are better equipped to make it out of a disaster in the best shape possible.</p><p><a href="http://jameschambers.com/wp-content/uploads/2015/11/image.png"><img width="448" height="257" title="image" style="display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/11/image_thumb.png" border="0"></a></p><p>The group of us descended to the Garage at Building 27 on Microsoft Campus. We hunkered down, plowed through hundreds of commits and many dozens of issues and pull requests.</p><p>It was an amazing experience. It was a group of really smart people, supported by folks on the ASP.NET team, building software that is going to change lives.</p><p class="side-note">To find out more about the awesome work that The Humanitarian Toolbox is doing, please <a href="http://htbox.org" target="_blank">visit their site</a>.</p><h2>Hack for Yourself</h2><p>There is a huge draw to dive in and help with a project that can affect so many people and thwart the negative impact of unfortunate conditions. Preparedness is so much more effective than disaster recovery.</p><p><a href="http://jameschambers.com/wp-content/uploads/2015/11/image1.png"><img width="452" height="247" title="image" style="display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/11/image_thumb1.png" border="0"></a></p><p>So…it’s a good reason to get involved. But if that’s not enough, check out this tech stack:</p><ul><li>ASP.NET 5</li><li>MVC Framework 6</li><li>Azure Web Apps (Sites and Jobs)</li><li>Azure Storage (Tables and Queues)</li><li>AutoFac as the IoC container</li><li>MediatR as a messaging bus &amp; pub/sub provider</li><li>Entity Framework 7</li><li>GitHub and AppVeyor</li><li>SendGrid and Twilio</li></ul><p>I mean, <em>just look at that list</em>. That’s like…<strong>all</strong> the buzzwords. And jumping in to help on this project is also jumping in to learn. This is an opportunity to work with world-class developers on a project that is striving to have great architecture. It runs on the cloud in cloud-like ways and uses technology that is going to be used for the next 5-10 years and beyond. </p><p><a href="http://jameschambers.com/wp-content/uploads/2015/11/image2.png"><img width="455" height="209" title="image" style="display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/11/image_thumb2.png" border="0"></a></p><p>After the weekend, we drew to a close by having a retrospective where we worked through the next steps and where this project is headed. It’s exciting to see the momentum building as more community members come on board and start making commits.</p><p><a href="http://jameschambers.com/wp-content/uploads/2015/11/image3.png"><img width="455" height="182" title="image" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" alt="image" src="http://jameschambers.com/wp-content/uploads/2015/11/image_thumb3.png" border="0"></a></p><p>We’ve got a lot done in just a few weeks, and I’m excited to see it moving forward <em>daily</em>.&nbsp; </p><h2>Join In and Start Hacking</h2><p>The best part about the software is that everyone can contribute. I’m not going to lie, there are some advanced aspects of the project that will be hard to work through for junior developers. There are more aspects, still, that need the love of some senior developers. Regardless of where you are in the world or in your career, there is likely a task where you can get started. </p><ul><li>Fork the <a href="https://github.com/HTBox/allready" target="_blank"><u>AllReady repo</u></a> on GitHub</li><li>Follow <a href="https://twitter.com/htbox" target="_blank"><u>HTbox on Twitter</u></a></li><li>Read the <a href="http://www.htbox.org/blog" target="_blank"><u>HTbox blog</u></a></li></ul><p>If you have questions, reach out to me <a href="http://twitter.com/CanadianJames" target="_blank"><u>on Twitter</u></a> and I’ll help to get you started. </p><p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2015/11/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7831</wp:post_id>
		<wp:post_date>2015-11-18 09:22:00</wp:post_date>
		<wp:post_date_gmt>2015-11-18 09:22:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-humanitarian-toolbox-allready-code-a-thon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@CanadianJames]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4329184951]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
