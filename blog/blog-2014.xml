<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.3.1" created="2015-11-29 06:15" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>They Call Me Mister James</title>
	<link>http://jameschambers.com</link>
	<description>Building the Web on the Cloud (and other musings)</description>
	<pubDate>Sun, 29 Nov 2015 06:15:20 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://jameschambers.com</wp:base_site_url>
	<wp:base_blog_url>http://jameschambers.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>james.chambers</wp:author_login><wp:author_email>james@jameschambers.com</wp:author_email><wp:author_display_name><![CDATA[james.chambers]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.3.1</generator>

	<item>
		<title>MVA Jump Start &#8211; Windows Azure Web Sites Deep Dive</title>
		<link>http://jameschambers.com/2014/01/mva-jump-start-windows-azure-web-sites-deep-dive/</link>
		<pubDate>Wed, 01 Jan 2014 15:49:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2311</guid>
		<description></description>
		<content:encoded><![CDATA[<p>If you tuned into the MVA Jump Start for Windows Azure Web Sites, you’ll know that we covered a lot of ground in a short period of time. I promised to share all the resources I mentioned and all the code that I shared throughout the day, so here it is!</p> <h2>If You Haven’t Seen the Session…</h2> <p>You can watch it on <a href="http://www.microsoftvirtualacademy.com/training-courses/windows-azure-web-sites-deep-dive-jump-start?prid=ca_mvpjc&amp;mtag=MVP4038205" target="_blank">Microsoft Virtual Academy</a> on demand, then follow along with the resources below.</p> <h2>Know Thy Tools</h2> <ul> <li><a href="http://www.windowsazure.com/en-us/downloads/">The Azure SDK</a></li> <li><a href="http://www.windowsazure.com/en-us/downloads/#cmd-line-tools">Command Line Tools</a></li> <li><a href="http://www.microsoft.com/web/webmatrix/">Web Matrix</a></li> <li><a href="http://www.visualstudio.com/en-us/downloads/">Visual Studio</a></li> <li><a href="http://vswebessentials.com/">Web Essentials</a></li></ul> <h2>Continuous Deployment</h2> <ul> <li><a href="http://www.visualstudio.com/">Visual Studio Online</a></li> <li><a href="http://nvie.com/posts/a-successful-git-branching-model/">GitFlow Workflow Information</a></li> <li><a href="https://github.com/">GitHub</a></li></ul> <h2>Go-Live Checklist</h2> <ul> <li><a href="http://webdevchecklist.com/">Web Developer Checklist</a></li> <li><a href="https://www.owasp.org/index.php/Cheat_Sheets">OWASP Cheat Sheets</a></li></ul> <h2>Lightning Round</h2> <ul> <li><a href="http://www.asp.net/mvc">Asp.Net MVC Framework</a></li> <li><a href="https://nodejstools.codeplex.com/">Node.js Tools for Visual Studio</a></li> <li><a href="http://www.asp.net/signalr">SignalR</a></li></ul> <h2>Also, you can get all the code I was demo’ing here:</h2> <blockquote> <p><a href="https://github.com/MisterJames/MvaAzureWebSites" target="_blank">MisterJames on GitHub</a></p></blockquote> <h2>Next Steps…More MVA!</h2> <p>If you haven’t already done so you can <a href="http://www.microsoftvirtualacademy.com/?prid=ca_mvpjc&amp;mtag=MVP4038205">register for Microsoft Virtual Academy here</a>. As well, here are some courses I recommend (<a href="http://www.microsoftvirtualacademy.com/training-courses/windows-azure-web-sites-deep-dive-jump-start?prid=ca_mvpjc&amp;mtag=MVP4038205" target="_blank">along with my session</a>, of course <img class="wlEmoticon wlEmoticon-winkingsmile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Winking smile" src="http://jameschambers.com/wp-content/uploads/2014/01/wlEmoticon-winkingsmile.png"> ):</p> <ul> <li><a href="http://www.microsoftvirtualacademy.com/training-courses/developing-asp-net-mvc-4-web-applications-jump-start?prid=ca_mvpjc&amp;mtag=MVP4038205">Developing ASP.NET MVC4 Web Applications Jump Start</a></li> <li><a href="http://www.microsoftvirtualacademy.com/training-courses/html5-css3-fundamentals-development-for-absolute-beginners?prid=ca_mvpjc&amp;mtag=MVP4038205">HTML5 &amp; CSS3 Fundamentals: Development for Absolute Beginners</a></li> <li><a href="http://www.microsoftvirtualacademy.com/training-courses/learn-html5-with-javascript-css3-jumpstart-training?prid=ca_mvpjc&amp;mtag=MVP4038205">Developing in HTML5 with JavaScript and CSS3 Jump Start</a> </li> <li><a href="http://www.microsoftvirtualacademy.com/training-courses/create-web-apps-with-asp-net?prid=ca_mvpjc&amp;mtag=MVP4038205">Building Web Apps with ASP.NET Jump Start</a> </li></ul> <p>Cheers, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2311</wp:post_id>
		<wp:post_date>2014-01-01 15:49:00</wp:post_date>
		<wp:post_date_gmt>2014-01-01 15:49:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mva-jump-start-windows-azure-web-sites-deep-dive</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="azure-websites"><![CDATA[Azure Websites]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3796178901]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My First Time: A Non-Android Developer&#8217;s Tale of Development with Xamarin</title>
		<link>http://jameschambers.com/2014/02/my-first-time-a-non-android-developers-tale-of-development-with-xamarin/</link>
		<pubDate>Tue, 04 Feb 2014 03:51:02 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2411</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Even though I largely sit on the Microsoft technology stack, it would be without reason to leave development on other stacks unexplored. The old adage – jack of all trades is a master of none – used to plague me as a younger developer as I tried to get my hands into <em>everything</em> and found it hard to become a master of <em>anything</em>.&nbsp; So, though I’ve kept abreast of what my development brethren on iOS and Android have been up to (and taking much notice of their market share compared to my platform of choice) I have only dabbled to insignificant measure with either.&nbsp; </p> <p>I would like to give a shout to my buddies Mike and Brad who have entertained me at length with conversations and code comparisons on both iOS and Android, respectively, as I work on Windows Phone.</p> <p>But there’s a cross-over class now – highly functional, feature-rich and, better still, it’s “native” to the development experience I know and love in Visual Studio.</p> <p>My previous comparison was quite jagged; the Visual Studio Express SKU for Windows Phone is free and installs with a double click. “Hello World” is literally seconds away, post-installation when you’re cutting a Windows Phone app. But, when I last tried Android development with Eclipse, there were several downloads, patches, a video card update (yes, seriously, for my L502X) and numerous animal sacrifices required to get the development environment and emulator running.&nbsp; And I really like my cat, so that didn’t go so well.</p> <p>Enter into the mix Xamarin’s solution to building apps, with a twist that .Net developers are going to love.</p> <h3>I’m Going to Need a Few Things</h3> <p><a href="http://jameschambers.com/wp-content/uploads/2014/02/image.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image_thumb.png" width="244" align="right" height="229"></a>From the get-go, the Xamarin install experience is smart and well-informed. People still make bad installers in 2014, but I can’t accuse Xamarin of that. Like any good citizen, this one knows what it needs to know to get your PC up-and-running. A quick inventory to avoid downloading the parts you already have, then it’s off to cyberspace to fetch the bits. Grab a coffee.</p> <p>After pulling about 1.5GB down (thank goodness for fast interwebs) the installer runs without much prompting and preps your box with the goods.</p> <p>Compared to my last experience? So far, this is aces, baby. Each of the installed target platforms even pops up web pages corresponding to the latest version in the Xamarin Developer Center. No errors, only confirmations. Seamless install.</p> <p>I open up Visual Studio and from my File –&gt; New Project experience I get this:</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image1.png" width="514" height="200"></p> <p>Creating the project gives me a prompt for my Xamarin credentials, which then activates my subscription.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image2.png" width="386" height="305"></p> <p>Visual Studio is well equipped to give me the lay of the land through the Solution Explorer. You can see the project layout, look at files that make up the solution and even drill into classes to get at the method level-of-detail. I see some interesting bits and drill in.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image3.png" width="296" height="380"></p> <p>I do the most natural thing in the world to any dev familiar with Visual Studio and hit F5. I want to see what this baby does. I get the comically honest message:</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image4.png" width="453" height="200"></p> <blockquote> <p>You are about to launch the MonoForAndroid_API_10 emulator. Google Android emulators are slow. Do you wish to proceed?</p></blockquote> <p>Yes. Yes, I do. <strong>But!!</strong> First I need to make sure that I’m using the correct emulator. In my case I had selected an Ice Cream Sandwich project template, so I needed to update my emulator selection to the MonoForAndroid_API_15 option. On my little 2 core i7 with 8GB RAM, the first-start for the virtual device and deployment took about 8 minutes, so, that previous message about taking a little time to get things going is pretty true. That said, the first run also needs to fire up the emulator, push the SDK out, then install the app and sync the assemblies. Seconds later, I have a working app. Hello World!</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image5.png" width="726" height="473"></p> <h2>Bells and Whistles. Because Awesome.</h2> <p>I return to the IDE, press the Stop control for the debugger and dig into the code. I set a breakpoint on an interesting line of code and re-run the app.&nbsp; Are you kidding me? Sweet! I’m debugging an Android application in Visual Studio.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image6.png" width="626" height="159"></p> <p>That interesting line of code allowed me to assume something given the project structure I had previously seen, so I drilled into the folder called “Resources” where you wouldn’t be too surprised to find a “Layout” folder, followed by a “Main.axml”. Double-clicking this file gave me a well-equipped toolbox and a rich designer with draw and source modes and a convenient device selection for preview purposes.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image7.png" width="605" height="348"></p> <h2>Wrapping Up</h2> <p>“Guess what, Mom, I’m an Android developer!” That right there, that is <strong>not </strong>on the top of the list of phone calls I am going to make in 2014. There’s obviously lots more to familiarize myself with, but this establishes a coherent base: I have a great development experience from a trusted company (Xamarin and Microsoft <a href="http://blog.xamarin.com/microsoft-and-xamarin-partner-globally/" target="_blank">announced partnership details</a>) that is <a href="https://xamarin.com/visual-studio" target="_blank">winning awards</a> for the work they do, in the best integrated development environment PERIOD working with a language I love.</p> <p>In the months ahead I’m going to be talking a <em>lot</em> more about Reactive Applications, and one of my goals is to make sure that I’m providing examples for cross-platform experiences. I’m working closely with my good friend <a href="https://twitter.com/stimms" target="_blank">Simon Timms</a> to explore concepts related to RA on the Microsoft stack in the <em>back end</em>, but these applications are designed for scale and the reality is that most of your potential client base may exist on a different platform.</p> <p>Sure, it’s easy to be nervous when you do it for the first time, but then you realize you were likely making a bigger deal out of it than necessary. When you’re well-equipped, there’s really no reason to feel any kind of anxiety over experimentation. Oh, and for the record, I’m still talking about Android development.</p> <h2>Next Steps</h2> <p>I’ll be writing soon on my other adventures, particularly with building out cloud-based solutions. These will really, <em>really</em> scale well to serve as the platform for client apps on all kinds of platforms, Android included. If you want to get in on the mix of things, be sure to prep yourself with the following:</p> <ol> <li>Hit the <a href="http://xamarin.com/" target="_blank">Xamarin web site</a> and sign up for your trial. #WorthIt.</li> <li>Get familiar with your target: Android design specs are <a href="http://developer.android.com/design/get-started/principles.html" target="_blank">readily available</a>.</li> <li>Check out the excellent starter community on <a href="http://docs.xamarin.com/" target="_blank">Xamarin’s site</a>.&nbsp; Docs, to recipes, to tutorials, and all in the context you choose – xplat or platform-specific. </li></ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2411</wp:post_id>
		<wp:post_date>2014-02-04 03:51:02</wp:post_date>
		<wp:post_date_gmt>2014-02-04 03:51:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-time-a-non-android-developers-tale-of-development-with-xamarin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="visual-studio-2013"><![CDATA[Visual Studio 2013]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208598]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34941</wp:comment_id>
			<wp:comment_author><![CDATA[Brad]]></wp:comment_author>
			<wp:comment_author_email>brad@badams.ca</wp:comment_author_email>
			<wp:comment_author_url>http://www.baconsauce.ca</wp:comment_author_url>
			<wp:comment_author_IP>142.161.181.30</wp:comment_author_IP>
			<wp:comment_date>2014-02-17 22:39:40</wp:comment_date>
			<wp:comment_date_gmt>2014-02-17 22:39:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Android in Visual Studio eh? While it sounds pretty cool, im curious on what sorts of things are different when compared to Eclipse. Is it designed in a way that would make people such as myself, who basically live on Eclipse, easy to switch without having to start completely over? Also, if I'm not mistaken, Visual Studio is a paid application while Eclipse is free, so that begs my next question of whether it is worth it for a guy like me to go that route, or if the target audience is specifically multiplatform developers? From your screenshot, things look extremely identical though. I think we need to get together for a hack night Mister James so I can compare the two ;-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812766]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Scheduled Jobs in Windows Azure Web Sites</title>
		<link>http://jameschambers.com/2014/02/scheduled-jobs-in-windows-azure-web-sites/</link>
		<pubDate>Sat, 15 Feb 2014 23:24:45 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2551</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last year I published a pretty good primer on Windows Azure Web Sites (available on Amazon as <a href="http://www.amazon.ca/gp/product/B00E5BI5L6/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=15121&amp;creative=330641&amp;creativeASIN=B00E5BI5L6&amp;linkCode=as2&amp;tag=chasthelist-20">Windows Azure Web Sites</a><img style="border-top-style: none !important; border-bottom-style: none !important; border-right-style: none !important; margin: 0px; border-left-style: none !important" border="0" alt="" src="http://ir-ca.amazon-adsystem.com/e/ir?t=chasthelist-20&amp;l=as2&amp;o=15&amp;a=B00E5BI5L6" width="1" height="1"> ) but the Azure team keeps coming out with new features. This post will walk you through the creation of scheduled jobs on Windows Azure Web Sites.</p> <h2>Tasks That Aren’t Part of Your Web Site’s UI</h2> <p>On demand reports are a great feature but don’t give your users as-at reporting. Artifacts from operations on your site can use up disk space. Sometimes, you’d prefer to have a digest of information sent out, rather than a notification on every interesting event.</p> <p>If you need to run some kind of process on a regular interval a solution might be this handy feature on Azure Web Sites: scheduled jobs. These types of requirements can sometimes be met with BI tools, but might cover any kind of activity which may or may not be associated with data, such as:</p> <ul> <li>a nightly report  <li>a cleanup script  <li>sending an email  <li>pushing an SMS message hourly to your phone for new account signups</li></ul> <p>I have a console app for the purpose of this article that I’ve created that runs some reports.&nbsp; You’ll see later similar output as the logs from the cloud-run copy of this application.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image8.png" width="487" height="246"></p> <p>Yes, my reports start at 0. Don’t judge, my brothers and sisters.</p> <p>I’m using an EXE here, but you can use any of the following:</p> <ul> <li>Windows CMD (.cmd, .bat or .exe)  <li>Node.js (.js)  <li>PowerShell (.ps1)  <li>PHP Scripts (.php)  <li>Python (.py), or  <li>Bash (.sh)</li></ul> <p>Your script or executable needs to be in a ZIP file which can also include any other files you need for processing such as configuration, images to embed in email messages, etc.</p> <h2>Configuring the Job</h2> <p>Click on the Web Jobs tab in the web site’s dashboard, then click “Add” from the command bar at the bottom of the site or from the dashboard page that loads up.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/02/image9.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image_thumb1.png" width="530" height="135"></a></p> <p>If you haven’t already signed up for the Schedule preview program, you’ll not yet be able to create scheduled jobs, but’s it’s trivial to setup and the link is provided on the Web Job screen.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image10.png" width="515" height="323"></p> <p>Follow the link and complete the sign up; it’s a straightforward button click.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image11.png" width="530" height="175"></p> <p>With that in place you can continue with creating the job. I wrap up all my needed files into a zip, and then I pick my options on the first page of the job setup:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image12.png" width="366" height="372"></p> <p>Finally, I create my schedule and configure it to run every day for a year:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image13.png" width="385" height="365"></p> <p>Your job is added to the list and then runs on schedule, or you can run it on demand from the command bar. After executing, logs are added to your account:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image14.png" width="506" height="73"></p> <p>Clicking the link brings you to the history of job runs where any console output is available for viewing. Error logs, should any rise, are also saved out here. </p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image15.png" width="502" height="78"></p> <p>You can see the output by drilling into the log, which is unsurprisingly similar to what we saw from our console&nbsp; output at the start of this article.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image16.png" width="513" height="129"></p> <h2>Understanding Job Storage Requirements</h2> <p>The job ZIP that you create can be up to 200MB and will be stored in your web site’s corresponding file system. Logs are also saved out, albeit in a slightly different path. </p> <p>Job scripts are saved at: D:\home\site\wwwroot\App_Data\jobs\triggered\JOB_NAME</p> <p>Job logs are saved out at: D:\home\data\jobs\triggered\JOB_NAME</p> <p>This is actually really great info to know, because with your job script saved in your application’s App_Data directory, you have the ability to manipulate the configuration files (if any) for your script.</p> <p>Keep in mind that the storage needs for your jobs are factored into your web site’s storage restrictions, so jobs that generate output need to be monitored to make sure you’re not exceeding your quota.</p> <h2>Getting at the Raw Files</h2> <p>There is a great – and growing – administrative back door called Kudu to your Windows Azure Web Site that you may not be aware of. It helps with all kinds of things like SCM checkin hooks, deployment tasks, or viewing logs. You can reach it at this location:</p> <blockquote> <p>http://your_site_name.scm.azurewebsites.net</p></blockquote> <p>It’s basically the URL that you use to access the host on azurewebsites.net, but you plug in the scm.&nbsp; There is a debug console that gives you the ability to plug away through your files in the Kudu menu.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image17.png" width="484" height="146"></p> <h2>Wrapping Up &amp; Next Steps</h2> <p>Windows Azure Web Sites now easily allows you to create and manage jobs that can be executed on demand or on a schedule. You ZIP up your files, feed them into the site and then configure the execution times for each of your scripts through the dashboard for your site.</p> <p>Now go solve some scheduled job need, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2551</wp:post_id>
		<wp:post_date>2014-02-15 23:24:45</wp:post_date>
		<wp:post_date_gmt>2014-02-15 23:24:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scheduled-jobs-in-windows-azure-web-sites</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure-websites"><![CDATA[Azure Websites]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208615]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34931</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>mbest@live.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.7.160.175</wp:comment_author_IP>
			<wp:comment_date>2014-02-15 23:43:01</wp:comment_date>
			<wp:comment_date_gmt>2014-02-15 23:43:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome James!  (Great topic, too)  thank you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812780]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35021</wp:comment_id>
			<wp:comment_author><![CDATA[Roberto Cappelletti | Community Days 2014]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.robertocappelletti.com/2014/03/community-days-2014/</wp:comment_author_url>
			<wp:comment_author_IP>94.245.107.113</wp:comment_author_IP>
			<wp:comment_date>2014-03-01 15:50:57</wp:comment_date>
			<wp:comment_date_gmt>2014-03-01 15:50:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] i Backup, l&#8217;Auto scaling e Scheduled Jobs. I Web Site si avvicinano sempre di più ai Web [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35061</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>simonwaymouth@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.fairmarket.co.nz</wp:comment_author_url>
			<wp:comment_author_IP>222.154.245.38</wp:comment_author_IP>
			<wp:comment_date>2014-05-05 23:58:16</wp:comment_date>
			<wp:comment_date_gmt>2014-05-05 23:58:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi there

In your article at the point 

"You can see the output by drilling into the log, which is unsurprisingly similar to what we saw from our console  output at the start of this article."

you show the content of the Azure webjob output from your exe.

You don't happen to know how to get that output into the log from a Powershell script do you..?

So far I've found that "write-host" makes the script fall over.

Not asking for any research, just inquiring if you know.

Cheers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812779]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Changing the Namespace With Entity Framework 6.0 Code First Databases</title>
		<link>http://jameschambers.com/2014/02/changing-the-namespace-with-entity-framework-6-0-code-first-databases/</link>
		<pubDate>Thu, 20 Feb 2014 03:54:48 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2621</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Sometimes a refactoring of your project includes changing the namespaces used throughout your project. If you’re using Entity Framework 6.0, this type of change can have an impact on EF’s ability to detect the current status of your namespace. This article helps you to mitigate any conflicts and allows your migrations to stand as-are. </p> <p>I cover a bit of background, but you can jump to the end to see two or three possible fixes.</p> <p>Also, sending a thanks out to my good friend <a href="https://twitter.com/Dave_Paquette" target="_blank">David Paquette</a> for the review on this post.</p> <h2>My Beef With Existing Fixes</h2> <p>If you change namespaces and run into problems, you might see an error similar to the following:</p> <blockquote> <p><font face="Lucida Console">An exception of type 'System.Data.SqlClient.SqlException' occurred in EntityFramework.dll but was not handled in user code</font></p> <p><font face="Lucida Console">Additional information: There is already an object named 'AspNetRoles' in the database.</font></p></blockquote> <p>I’m not sure I would call this misleading, but it certainly doesn’t explain the problem in the clearest of terms. Here’s what I would prefer to see, particularly in the Additional Information section of the error message:</p> <blockquote> <p><font face="Lucida Console">Additional information: The namespace for the Entity Framework migration does not have any corresponding migrations in the target database. It is possible that your connection string is not configured correctly, that you are attempting to update a database that was created without migrations enabled, or that your namespace for your configuration class has been modified. Query the migrations table on database *database_name* to review current migration state.</font></p></blockquote> <p>Sure, it’s verbose, but it lets you in on what might be happening.</p> <p>Specifically, migrations are tracked by ContextKey in the __MigrationHistory table and the key includes namespace information. When your namespace changes, you also need to update the records in the DB that correspond to migrations that have already been executed.</p> <p>My beef with existing fixes? Most of the time when you see similar errors come up the answer seems to ignore the fact that people might be using this stuff in production. Namely, the fix tends to be “drop your database and let the Framework rebuild it”, which, sure, I mean, it solves the problem. It’s just not good for business.</p> <h2>Behind the Scenes</h2> <p>For each change to your database tracked with with a migration, a hash representing your model is computed and stored in order to detect the next set of changes that occur. As you execute the migration, the hash is added, along with the MigrationId and ContextKey to the migrations table.</p> <p>When you attempt to access your data through the DbContext and you’re using, for example, an initializer such as MigrateDatabaseToLatestVersion, the Framework will attempt to play catch-up and make sure the database reflects the current model in your application. To do this, it queries the database to see where the database thinks it’s at, and it uses both reflection over and information from your configuration and context classes. You can see the queries that run if you capture the chatter with SQL Profiler:</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/02/image18.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image_thumb2.png" width="621" height="173"></a></p> <p>And if you drill into the details you’ll see something like the following as the Framework tries to figure out where you’re at:</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/02/image19.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/02/image_thumb3.png" width="592" height="74"></a></p> <p>I’ve dashed out my namespace as this was work for a client, but you can see the root of the problem here. The Configuration class is in the <font face="Lucida Console">Root_Namespace.Migrations</font> namespace; if you move the class to a new namespace, this query is modified to reflect it, but previous migrations stored in the database are not.</p> <p>Your configuration is automatically created for you when you enable migrations; it’s a class that exists in a namespace which is based on the default namespace of your project. <font face="Lucida Console">Root_Namespace.Migrations.Congifuration</font> is also the value that is written to the migrations table as the value for ContextKey. </p> <p>That is our vector to correct the problem.</p> <h2>Building Out The Fix</h2> <p>The first and easiest approach is one that works locally, and could meet your needs if you have access to all affected databases. All you have to do is execute a modified version of the SQL script below:</p><pre class="csharpcode"><span class="kwrd">UPDATE</span> [dbo].[__MigrationHistory] 
   <span class="kwrd">SET</span> [ContextKey] = <span class="str">'New_Namespace.Migrations.Configuration'</span>
 <span class="kwrd">WHERE</span> [ContextKey] = <span class="str">'Old_Namespace.Migrations.Configuration'</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You should be golden at that point, however, this won’t work if you’re doing continuous integration with a team of developers, or if you have a continuous deployment strategy in place. For that, the solution lies in adding the following code to your database Configuration constructor class:</p><pre class="csharpcode"><span class="kwrd">public</span> Configuration()
{
    AutomaticMigrationsEnabled = <span class="kwrd">false</span>;
    <span class="kwrd">this</span>.ContextKey = <span class="str">"Old_Namespace.Migrations.Configuration"</span>;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This strategy is more durable and will help prevent any of your teammates (or production servers) from running into the same issue. Of course, this keeps your old namespace hanging around in your migrations table, but it does the trick.</p>
<p>A potentially more elegant solution would be to create a database initializer that takes the old and new namespace into account and corrects the migrations table if necessary. This could end up being considerably more work, so you’d have to evaluate if it makes sense for your project and timeline. You can reference an example implementation here: </p>
<p><a title="https://entityframework.codeplex.com/SourceControl/latest#src/EntityFramework/MigrateDatabaseToLatestVersion`.cs" href="https://entityframework.codeplex.com/SourceControl/latest#src/EntityFramework/MigrateDatabaseToLatestVersion`.cs" target="_blank">MigrateDatabaseToLatestVersion Source on CodePlex</a></p>
<p>Cheers, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2621</wp:post_id>
		<wp:post_date>2014-02-20 03:54:48</wp:post_date>
		<wp:post_date_gmt>2014-02-20 03:54:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>changing-the-namespace-with-entity-framework-6-0-code-first-databases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207285]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34981</wp:comment_id>
			<wp:comment_author><![CDATA[Decaying Code | Community Update 2014-02-25 – #EntityFramework with @CanadianJames and some #ElasticSearch]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.decayingcode.com/post/Community-Update-2014-02-25-EntityFramework-with-CanadianJames-and-some-ElasticSearch</wp:comment_author_url>
			<wp:comment_author_IP>96.31.33.37</wp:comment_author_IP>
			<wp:comment_date>2014-02-25 21:17:24</wp:comment_date>
			<wp:comment_date_gmt>2014-02-25 21:17:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Changing the Namespace With Entity Framework 6.0 Code First Databases | They Call Me Mister James (j... [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35031</wp:comment_id>
			<wp:comment_author><![CDATA[Friday Five - February 28, 2014 - The Microsoft MVP Award Program Blog - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/mvpawardprogram/archive/2014/03/02/friday-five-february-28-2014.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.148</wp:comment_author_IP>
			<wp:comment_date>2014-03-02 22:52:52</wp:comment_date>
			<wp:comment_date_gmt>2014-03-02 22:52:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 2.&nbsp;Changing the Namespace With Entity Framework 6.0 Code First Databases [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37561</wp:comment_id>
			<wp:comment_author><![CDATA[Solomon]]></wp:comment_author>
			<wp:comment_author_email>solomon_201@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.150.176.78</wp:comment_author_IP>
			<wp:comment_date>2014-08-19 21:53:19</wp:comment_date>
			<wp:comment_date_gmt>2014-08-19 21:53:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you a Trillion!!!!!!!!!!!!!!!!!!!!!!!! you have saved me days of head scratching. all other solutions i found suggested deleting the database. Once again Thank you!!!!!!! Mister James. God Bless you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811813]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37571</wp:comment_id>
			<wp:comment_author><![CDATA[Solomon]]></wp:comment_author>
			<wp:comment_author_email>solomon_201@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.150.176.78</wp:comment_author_IP>
			<wp:comment_date>2014-08-19 22:06:46</wp:comment_date>
			<wp:comment_date_gmt>2014-08-19 22:06:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mister James, now my app runs but when i query the collection that had the "there is already an object named ‘Children’ in the database". i get an empty result. I opened the database and can actually see my records.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811815]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37591</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-08-21 01:31:16</wp:comment_date>
			<wp:comment_date_gmt>2014-08-21 01:31:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Solomon,

There's likely a lot of context that I'm missing here. Where I would start in the troubleshooting is to ensure that another db or connection string didn't come into play here. Is the parent data available? Are there any other hints as to what's going on?

I have to admit that I've only had to encounter this and deal with it a small number of times, and haven't seen the trouble you're describing.

Hope you're able to troubleshoot, sorry I can't help more with the info I have.

-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37571</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811815]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811818]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39071</wp:comment_id>
			<wp:comment_author><![CDATA[Alex dresko]]></wp:comment_author>
			<wp:comment_author_email>me@alexdresko.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.alexdresko.com</wp:comment_author_url>
			<wp:comment_author_IP>66.83.118.174</wp:comment_author_IP>
			<wp:comment_date>2014-12-15 15:57:34</wp:comment_date>
			<wp:comment_date_gmt>2014-12-15 15:57:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Holy holey holes, Batman! Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811814]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39661</wp:comment_id>
			<wp:comment_author><![CDATA[Wilhem]]></wp:comment_author>
			<wp:comment_author_email>wilhemverano@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>137.52.185.145</wp:comment_author_IP>
			<wp:comment_date>2015-03-10 14:43:15</wp:comment_date>
			<wp:comment_date_gmt>2015-03-10 14:43:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for your post, but I continue having issues. I'm trying to add just one  new column to one table and the error is saying "There is already an object named '__MigrationHistory' in the database". This is using your code: "this.ContextKey = "Old_Namespace.Migrations.Configuration";" or without using your code says "Invalid object name 'dbo.__MigrationHistory' ". Any idea.
Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811812]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41031</wp:comment_id>
			<wp:comment_author><![CDATA[EF6: Renaming namespace using Code First Migrations - codeengine]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://codeengine.org/ef6-renaming-namespace-using-code-first-migrations/</wp:comment_author_url>
			<wp:comment_author_IP>162.220.241.39</wp:comment_author_IP>
			<wp:comment_date>2015-07-22 18:30:40</wp:comment_date>
			<wp:comment_date_gmt>2015-07-22 18:30:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] http://jameschambers.com/2014/02/changing-the-namespace-with-entity-framework-6-0-code-first-databas&#8230; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41691</wp:comment_id>
			<wp:comment_author><![CDATA[Mikkel]]></wp:comment_author>
			<wp:comment_author_email>nowayaaaaa@nope.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>5.83.28.162</wp:comment_author_IP>
			<wp:comment_date>2015-09-23 08:51:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-23 08:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just want to share my solution for this here. After I have changed the namespace I'd also got an empty result when querying the database.

The solution here was pretty simple: When I changed the namespace I did also rename the DbContext class. And the connection-string in the app.config file were pointing at the old name. I changed that and all my data was available again :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37571</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811815]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2268717917]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Resolving Build Errors When Targeting Mulitple Framework Versions</title>
		<link>http://jameschambers.com/2014/03/resolving-build-errors-with-mulitple-framework-targets/</link>
		<pubDate>Sat, 01 Mar 2014 17:41:48 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2682</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here’s a tip that I hope can help some other folks when working on a solution that targets multiple versions of the .Net Framework.</p> <p>As a developer, I tend to have a short memory and flush it often. When I start using framework features, I let myself easily move on, mentally, from the time when said features didn’t exist. 2010 is <em>sooo</em> last year. Or four years ago, but who’s keeping count.</p> <p>This morning, I started getting the following error while working on <a href="http://github.com/glimpse/glimpse" target="_blank">Glimpse</a>, where the primary project is authored in .Net 4.5:</p> <blockquote> <p>System.Enum does not contain a definition for ‘TryParse’.</p></blockquote> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/03/image.png" width="1011" height="96"></p> <p>A quick check on MSDN shows that <a href="http://msdn.microsoft.com/en-us/library/dd783499(v=vs.110).aspx" target="_blank">System.Enum</a> <em>does indeed</em> contain a definition for TryParse, but only in 4.0 and higher.</p> <p>&nbsp;<a href="http://jameschambers.com/wp-content/uploads/2014/03/image1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/03/image_thumb.png" width="240" height="174"></a></p> <p>If you peek back at the Error List screen cap, you’ll see the hint to what was going on in the “Project” column. Namely, one of the projects in the Glimpse solution used for backwards compatibility targets an older version of the .Net Framework.</p> <p>So, this is actually pretty easy to resolve, and I have two obvious choices:</p> <ol> <li>I can test to see if the NET35 compilation symbol is defined and write two copies of the code, one with, one without the use of TryParse, or,</li> <li>Just use the cross-framework supported approach from way back in the day (2010), where we would wrap up the Enum.Parse call in a try-catch block.</li></ol> <p>For brevity of code, I chose #2. </p><pre class="csharpcode">    <span class="kwrd">try</span>
    {
        order = (ScriptOrder)Enum.Parse(<span class="kwrd">typeof</span>(ScriptOrder), orderName);
    }
    <span class="kwrd">catch</span> (ArgumentException)
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> StatusCodeResourceResult(404, <span class="kwrd">string</span>.Format(<span class="str">"Could not resolve ScriptOrder for value provided '{0}'."</span>, orderName));
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Should Glimpse drop support for .Net 3.5 down the road, this would be an easy pull request to update and make use of the new(ish) TryParse method.</p>
<p>Filed under the category of “things to keep fresh in your mind when working on open source”.</p>
<p>For more on multi-targeted solutions, you can check out <a href="http://msdn.microsoft.com/en-us/library/vstudio/bb398197(v=vs.120).aspx" target="_blank">this read on MSDN</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2682</wp:post_id>
		<wp:post_date>2014-03-01 17:41:48</wp:post_date>
		<wp:post_date_gmt>2014-03-01 17:41:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>resolving-build-errors-with-mulitple-framework-targets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3876576101]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Day 0: Bootstrapping Mvc for the Next 30 Days</title>
		<link>http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/</link>
		<pubDate>Sun, 01 Jun 2014 10:43:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2751</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In the coming weeks you’ll see a wide range of topics, tips, tricks and the ins-and-outs of working with the Bootstrap library and CSS framework with Asp.Net’s MVC Framework.&nbsp; This page will serve as the curated index of all posts for the month.</p> <p>These posts will focus on using three key bits that are pre-requisites for the month: Visual Studio 2013, MVC 5 and Bootstrap.&nbsp; Along the way we’re going to make use of jQuery and even have a look at leveraging Knockout.js to make the client development a little less mundane.</p> <p>Expect to start simple but be ready for a daily dose of content, presumably with something new for you each day, or at least a new twist on something you might be familiar with. Bring your&nbsp; willingness to try a bit of code, and I’ll try to bring some awesome.</p> <p style="padding-bottom: 10px; padding-top: 10px; padding-left: 10px; padding-right: 10px; background-color: #eee"><strong>Shameless plug</strong>: If you’re looking for professionally designed themes to replace your palette, you can help out this blogger (me!) by purchasing one over at <a href="https://wrapbootstrap.com/?ref=BootstrapOnMvc" target="_blank">{wrap}bootstrap</a>. They have a selection of great looking Bootstrap themes. A very affordable alternative to taking the time to create your own theme. Check out <a href="http://jameschambers.com/2014/06/day-23-choosing-your-own-look-and-feel/" target="_blank">Day 23</a> for more information on creating a site where users can choose which theme they see.</p> <p>I’m assuming you’re a dev with some web experience. I’ll try to include some helpful links where content might be new or if questions come up. Thanks for joining along!</p> <h2>The 30 Day Breakdown</h2> <h4>Warming Up</h4> <ul> <li>Day 1: <a href="http://jameschambers.com/2014/06/day-1-the-mvc-5-starter-project/" target="_blank">The MVC 5 Starter Project</a>  <li>Day 2: <a href="http://jameschambers.com/2014/06/day-2-examining-the-solution-structure/" target="_blank">Examining the Solution Structure</a>  <li>Day 3: <a href="http://jameschambers.com/2014/06/day-3-adding-a-controller-and-view/" target="_blank">Adding a Controller and View</a>  <li>Day 4: <a href="http://jameschambers.com/2014/06/day-4-making-a-page-worth-a-visit/" target="_blank">Making a Page Worth a Visit</a>  <li>Day 5: <a href="http://jameschambers.com/2014/06/day-5-bootstrap-for-the-asp-net-developer/" target="_blank">Bootstrap for the Asp.Net Developer</a> </li></ul> <h4>Enhancing Our Views</h4> <h4></h4> <ul> <li>Day 6: <a href="http://jameschambers.com/2014/06/day-6-reusing-design-elements-on-multiple-pages/" target="_blank">Reusing Design Elements on Multiple Pages</a>  <li>Day 7: <a href="http://jameschambers.com/2014/06/day-7-semi-automatic-bootstrap-display-templates/" target="_blank">Semi-Automatic Bootstrap – Display Templates</a>  <li>Day 8: <a href="http://jameschambers.com/2014/06/day-8-semi-automatic-bootstrap-editor-templates/" target="_blank">Semi-Automatic Bootstrap – Editor Templates</a>  <li>Day 9: <a href="http://jameschambers.com/2014/06/day-9-templates-for-complex-types/" target="_blank">Templates for Complex Types</a>  <li>Day 10: <a href="http://jameschambers.com/2014/06/day-10-htmlhelper-extension-methods/">HtmlHelper Extension Methods</a>  <li>Day 11: <a href="http://jameschambers.com/2014/06/day-11-realistic-test-data-for-our-view/">Realistic Test Data for Our View</a></li></ul> <h4>Exploring Bootstrap</h4> <ul> <li>Day 12: <a href="http://jameschambers.com/2014/06/day-12/">Implement Search Using Inline Forms and AJAX</a>  <li>Day 13: <a href="http://jameschambers.com/2014/06/day-13-standard-styling-and-horizontal-forms/">Standard Styling and Horizontal Forms</a>  <li>Day 14: <a href="http://jameschambers.com/2014/06/day-14-bootstrap-alerts-and-mvc-framework-tempdata/">Bootstrap Alerts and MVC Framework TempData</a>  <li>Day 15: <a href="http://jameschambers.com/2014/06/day-15-some-bootstrap-basics/">Some Bootstrap Basics</a>  <li>Day 16: <a href="http://jameschambers.com/2014/06/day-16-conceptual-organization-of-the-bootstrap-library/">Conceptual Organization of the Bootstrap Library</a></li></ul> <p><strong>Special Announcement!</strong></p> <ul> <li>Day 17: <a href="http://jameschambers.com/2014/06/day-17-free-training-for-all-the-peoples/" target="_blank">Free Training For All the Peoples!</a></li></ul> <p><strong>Adding Some Sparkle</strong></p> <ul> <li>Day 18: <a href="http://jameschambers.com/2014/06/day-18-customizing-and-rendering-bootstrap-badges/" target="_blank">Customizing and Rendering Bootstrap Badges</a>  <li>Day 19: <a href="http://jameschambers.com/2014/06/day-19-long-running-notifications-using-badges-and-entity-framework-code-first/" target="_blank">Long-Running Notifications Using Badges and Entity Framework Code First</a>  <li>Day 20: <a href="http://jameschambers.com/2014/06/day-20-an-actionfilter-to-inject-notifications/" target="_blank">An ActionFilter to Inject Notifications</a>  <li>Day 21: <a href="http://jameschambers.com/2014/06/day-21-cleaning-up-filtering-the-layout-the-menu/" target="_blank">Cleaning Up Filtering, the Layout &amp; the Menu</a></li></ul> <p><strong>So, You’ve Got People Logging In</strong></p> <ul> <li>Day 22: <a href="http://jameschambers.com/2014/06/day-22-sprucing-up-identity-for-logged-in-users/" target="_blank">Sprucing up Identity for Logged In Users</a>  <li>Day 23: <a href="http://jameschambers.com/2014/06/day-23-choosing-your-own-look-and-feel/" target="_blank">Choosing Your Own Look-And-Feel</a>  <li>Day 24: <a href="http://jameschambers.com/2014/06/day-24-storing-user-profile-information/" target="_blank">Storing User Profile Information</a>  <li>Day 25: <a href="http://jameschambers.com/2014/07/day-25-personalizing-notifications-bootstrap-tables/" target="_blank">Personalizing Notifications</a>  <li>Day 26: <a href="http://jameschambers.com/2014/07/day-26-bootstrap-tabs-for-managing-accounts/" target="_blank">Bootstrap Tabs for Managing Accounts</a>  <li>Day 27: <a href="http://jameschambers.com/2014/07/day-27-rendering-data-in-a-bootstrap-table/" target="_blank">Rendering Data in Bootstrap Table</a></li></ul> <p><strong>Wrapping Up With Some More Bootstrap</strong></p> <ul> <li>Day 28: <a href="http://jameschambers.com/2014/07/day-28-doing-more-interesting-things-with-buttons/" target="_blank">Doing More Interesting Things With Buttons</a>  <li>Day 29: <a href="http://jameschambers.com/2014/07/day-29-confirmation-dialogs-for-delete-actions/" target="_blank">Confirmation Dialogs for Delete Actions</a>  <li>Day 30: <a href="http://jameschambers.com/2014/07/day-30-loading-bootstrap-modal-content-via-ajax/" target="_blank">Loading Bootstrap Modal Content via AJAX</a></li></ul> <p>If you’d like a copy of the completed project, please be sure to check out the repo with the final version of this series’ code on <a href="https://github.com/MisterJames/BootstrappingMvc-Code" target="_blank">GitHub</a>.</p> <p>Happy Coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2751</wp:post_id>
		<wp:post_date>2014-06-01 10:43:00</wp:post_date>
		<wp:post_date_gmt>2014-06-01 10:43:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-0-boothstrapping-mvc-for-the-next-30-days</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207304]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35161</wp:comment_id>
			<wp:comment_author><![CDATA[Florian Sauer]]></wp:comment_author>
			<wp:comment_author_email>Mr.Acid@web.de</wp:comment_author_email>
			<wp:comment_author_url>http://floppi.net</wp:comment_author_url>
			<wp:comment_author_IP>78.132.2.169</wp:comment_author_IP>
			<wp:comment_date>2014-06-04 21:52:39</wp:comment_date>
			<wp:comment_date_gmt>2014-06-04 21:52:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your 30-day-bootstrapping-adventure is a great idea! Thanks for that.
Definitely will follow work along.

best wishes from Vienna, Austria,
Flo.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811829]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35731</wp:comment_id>
			<wp:comment_author><![CDATA[Tutorial]]></wp:comment_author>
			<wp:comment_author_email>vali@vestasoftware.com</wp:comment_author_email>
			<wp:comment_author_url>http://tuts.behamooz.com</wp:comment_author_url>
			<wp:comment_author_IP>5.202.175.11</wp:comment_author_IP>
			<wp:comment_date>2014-06-23 11:20:41</wp:comment_date>
			<wp:comment_date_gmt>2014-06-23 11:20:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks .very good idea!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811830]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35781</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>dave@pharma-mix.com</wp:comment_author_email>
			<wp:comment_author_url>http://pharma-mix.com</wp:comment_author_url>
			<wp:comment_author_IP>62.7.80.98</wp:comment_author_IP>
			<wp:comment_date>2014-06-24 11:33:09</wp:comment_date>
			<wp:comment_date_gmt>2014-06-24 11:33:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great series.  Some really useful stuff here.
What I'd like to see is how we can best use MVC Bootstrap templates when we are targetting IE8 as our main browser (Bootstrap 3.0+ isn't supported for IE8).
What polyfills / tweaks / changes do we have to make in order to still get a reasonable experience?

(We build web apps for NHS-UK where the most common browser by far is still IE8)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811828]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35951</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 01:34:18</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 01:34:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Dave, I think that the following shims (taken from the Bootstrap site) are your best bet to get a working site with Bootstrap:

<code>    &lt;!--[if lt IE 9]&gt;
      &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;
      &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;</code>

Hope this helps. -jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35781</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811828]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811839]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35991</wp:comment_id>
			<wp:comment_author><![CDATA[Robert]]></wp:comment_author>
			<wp:comment_author_email>robert.bonham@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.109.247.45</wp:comment_author_IP>
			<wp:comment_date>2014-06-27 16:05:49</wp:comment_date>
			<wp:comment_date_gmt>2014-06-27 16:05:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for doing this series James.  I can't tell you how much I've been enjoying sitting down in the evening and working through the days article.  Embarrassingly I've been working with asp.net MVC with bootstrap for the past year and a half and have still managed to  have a 'ah ha' moment with nearly every article. 

Thanks
Robert]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811831]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36001</wp:comment_id>
			<wp:comment_author><![CDATA[Diving into .NET &laquo; Cornelius Concepts]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.corneliusconcepts.com/diving-into-net/</wp:comment_author_url>
			<wp:comment_author_IP>50.87.144.113</wp:comment_author_IP>
			<wp:comment_date>2014-06-28 04:01:37</wp:comment_date>
			<wp:comment_date_gmt>2014-06-28 04:01:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] also support for popular frameworks and libraries such as jQuery, Angular, Backbone, Knockout, and Bootstrap&#8211;a demo of this last one showing adding themes was cool to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36021</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-29 02:12:35</wp:comment_date>
			<wp:comment_date_gmt>2014-06-29 02:12:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey that's wonderful to hear, thanks for following along Robert!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35991</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811831]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811842]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36121</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-06-30 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/notes-de-lecture/reading-notes-2014-06-30/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-02 18:43:57</wp:comment_date>
			<wp:comment_date_gmt>2014-07-02 18:43:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 0: Bootstrapping Mvc for the Next 30 Days (James Chambers) &#8211; Very promissing series. Day 1, Day 3 , Day 4 , Day 5, Day 6 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36421</wp:comment_id>
			<wp:comment_author><![CDATA[Robert]]></wp:comment_author>
			<wp:comment_author_email>robert.bonham@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.142.13.97</wp:comment_author_IP>
			<wp:comment_date>2014-07-11 06:18:54</wp:comment_date>
			<wp:comment_date_gmt>2014-07-11 06:18:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So...does 27 Canadian days = 30 US Days?  I'm always confused by this conversion stuff ;-)

Just kidding, looking forward to when you're able to finish this up

Robert]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36021</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811842]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811947]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36701</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:32:33</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:32:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Best. Comment. Evar.  

Thanks Robert. :)

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36421</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811947]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812169]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37391</wp:comment_id>
			<wp:comment_author><![CDATA[Beta]]></wp:comment_author>
			<wp:comment_author_email>xmenus@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.200.216.6</wp:comment_author_IP>
			<wp:comment_date>2014-08-17 08:14:54</wp:comment_date>
			<wp:comment_date_gmt>2014-08-17 08:14:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you very much for your nice series.
I wanted to ask if you'd able to provide a solution for cases when we integrate these bootstrap themes we want to keep left vertical submenu open once clicked.
I provided a link of a such template, when i integrate on MVC once i click on submenu it redirects to the particular page but the submenu gets closed.

http://thevectorlab.net/flatlab/calendar.html

Thanks once again]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811832]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37581</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-08-20 03:55:07</wp:comment_date>
			<wp:comment_date_gmt>2014-08-20 03:55:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Beta,

If you inspect the source at the link you provided, you'll notice that there is a class applied to the container called "sidebar-closed". When removed, the sidebar is displayed.

You could easily store the user selection (as we did with the themes) either in their profile, as a claim, or even in session (and you could make a good argument for session, in this case).

When you load a new page, the _layout.cshtml partial would either render the class, or not.

Hope this helps!

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37391</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811832]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811843]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37741</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:27:31</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:27:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] September 2014 vbobyr  (0)    They Call Him Mister James:http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/The 30 Day [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37851</wp:comment_id>
			<wp:comment_author><![CDATA[An Interesting List of Development Stuff (July 2014) | rionscode]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://rionscode.wordpress.com/2014/07/31/an-interesting-list-of-development-stuff-july-2014/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.167</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 15:50:43</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 15:50:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 30 Days with Bootstrapping ASP.NET MVC [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38101</wp:comment_id>
			<wp:comment_author><![CDATA[francisco]]></wp:comment_author>
			<wp:comment_author_email>franciscovega2010@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.203.218.130</wp:comment_author_IP>
			<wp:comment_date>2014-10-13 23:01:53</wp:comment_date>
			<wp:comment_date_gmt>2014-10-13 23:01:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, first thanks for you excellent blog

And my question is, i finished the 30 day and just bought a template in https://wrapbootstrap.com/, but i dont have idea how to implement in a site.

do you have an other tutorial for explain how you can use a template from https://wrapbootstrap.com/?

thanks in advanced]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811836]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38111</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-10-18 18:36:43</wp:comment_date>
			<wp:comment_date_gmt>2014-10-18 18:36:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, thanks for following along! I do offer one approach to adding themes to the site here:
http://jameschambers.com/2014/06/day-23-choosing-your-own-look-and-feel/

That should help some. Basically, you should be able to just replace the default assets (JS, images, CSS) with the ones from the theme you purchased. You don't need to do everything I suggest in Day 23.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38101</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811836]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811946]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38561</wp:comment_id>
			<wp:comment_author><![CDATA[Shane]]></wp:comment_author>
			<wp:comment_author_email>sbatkinson@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.222.114.221</wp:comment_author_IP>
			<wp:comment_date>2014-10-23 19:50:37</wp:comment_date>
			<wp:comment_date_gmt>2014-10-23 19:50:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[James

I have just found this blog series and am looking forward to working my way through it. It is programmers such as yourself that make our community great. I hope that one day I am in a position of such knowledge and experience so that I can give back as you are doing.

Thankyou for taking the time to present these musings.

regards

shane]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811834]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39321</wp:comment_id>
			<wp:comment_author><![CDATA[Resources | cherylhartman]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://cherylhartman.wordpress.com/2015/01/14/resources/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.254.66</wp:comment_author_IP>
			<wp:comment_date>2015-01-14 23:17:55</wp:comment_date>
			<wp:comment_date_gmt>2015-01-14 23:17:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] James Chambers: http://jameschambers.com [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39371</wp:comment_id>
			<wp:comment_author><![CDATA[An Interesting List of Development Stuff (July 2014) - Rion.IO]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://rion.io/2014/07/31/an-interesting-list-of-development-stuff-july-2014/</wp:comment_author_url>
			<wp:comment_author_IP>104.44.128.16</wp:comment_author_IP>
			<wp:comment_date>2015-01-22 18:21:18</wp:comment_date>
			<wp:comment_date_gmt>2015-01-22 18:21:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 30 Days with Bootstrapping ASP.NET MVC [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39791</wp:comment_id>
			<wp:comment_author><![CDATA[JoeyEff]]></wp:comment_author>
			<wp:comment_author_email>me@josephfleming.us</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>73.26.139.215</wp:comment_author_IP>
			<wp:comment_date>2015-03-18 01:00:15</wp:comment_date>
			<wp:comment_date_gmt>2015-03-18 01:00:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm behind the curve, but I'm looking forward to this series. Thank you for posting all this information!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811835]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39801</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-18 03:01:58</wp:comment_date>
			<wp:comment_date_gmt>2015-03-18 03:01:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You bet! Enjoy! If you have any questions along the way, feel free to ask!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39791</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811835]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811844]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40211</wp:comment_id>
			<wp:comment_author><![CDATA[Roberto]]></wp:comment_author>
			<wp:comment_author_email>robesms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.returnsmart.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>82.110.142.185</wp:comment_author_IP>
			<wp:comment_date>2015-05-15 15:47:25</wp:comment_date>
			<wp:comment_date_gmt>2015-05-15 15:47:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,

I found this resource simply great for starters in MVC. Really useful and I'm sharing your blog from my site.

Thanks a lot and looking forward seeing more posts here!
Roberto.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811833]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40571</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 01:55:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 01:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello;
I'm on the tail end of day one, about at the halfway point.  Really good stuff, been taking my time and just "playing" a lot.  One suggestion to anybody new and learning (probably why your here) - if you are using VS make sure you use the Page Inspector.  Clicking on "inspect" and just moving around really showed me how the page was being put together.  
Looking forward to tomorrow -- thanks for the great content!
Joe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2100688403]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 1: The MVC 5 Starter Project</title>
		<link>http://jameschambers.com/2014/06/day-1-the-mvc-5-starter-project/</link>
		<pubDate>Sun, 01 Jun 2014 10:56:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2801</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">Day 0 for an index</a>.</p> <p>Getting started in MVC is the easiest it’s ever been, and it’s even easier to look good doing it. Rather than building up yet another short-lived, likely passing design, Microsoft made another nod to open source software and adopted the Bootstrap library as a design language. We’ll get to all those bits shortly, but for now let’s see what happens when you get started in MVC 5.</p> <p>First off, select File –&gt; New Project from the Visual Studio 2013 menu.&nbsp; If you select the “Web” category you’ll see only one type of project, an “Asp.Net Web Application”. All web projects have been consolidated under the “One Asp.Net” banner, so the project type is an easy selection. The next dialog that pops up gets a little more interesting:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image.png" width="559" height="417"></p> <p>You’ll note that there are a few more options here. Click around on the project templates to see the description (we’re going to be focusing here on MVC). The notable options outside of your template selection are the Authentication, Core References and Azure options.</p> <p><strong>Authentication</strong> – If you’re targeting a general web audience you’ll likely want to make use of Individual User Accounts (the default), which opens the door for you to integrate with 3rd party providers such as Microsoft, Facebook, Twitter and Google. If this isn’t the route for you, click through and read about each of the other types.</p> <p><strong>Core References</strong> – With the removal of project type GUIDs came the arrival of much less hacking to get different types of web projects working in the same solution. You can now easily put Web Forms, MVC and Web API all in the same project. Also here is your ability to add a test project.</p> <p><strong>Windows Azure</strong> – This is the part I like, streamlined deployment baked directly into the project creation. While you can always change these options or even add them later, for those of you who have an Azure account, this is an easy way to get code running quickly in the cloud. If you don’t have an account, it’s easy to set one up.</p> <h2>Running the Project </h2> <p>Well, don’t wait! Just run the site! You’ll land on a welcome page (just a static HTML page in your project) but you can hit CTRL+F5 to see your wonderful new digital bits running locally.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image1.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb.png" width="507" height="353"></a></p> <p>Bang. You got yourself a web site. Let’s pause to consider what’s going on.</p> <p>The page that is delivered to the browser is straight HTML – image, script, p tags and all. In a nutshell, here’s how that content gets rendered to the client:</p> <ul> <li>A request for a specific resource (a page, in this case) hits the server and comes into the pipeline.  <li>A controller is selected, based on the routing configuration.  <li>Any dependencies for the controller are resolved and the controller is instantiated.  <li>Any payload from the request – form content, query string – is evaluated to see if it can be used to provide parameters for the method (action) that will be executed.  <li>The MVC Framework finds the most appropriate action to call based on the payload and method (POST, GET for example) of the request.  <li>The method is invoked, passing in the discovered parameters.  <li>The information you need (if any) is passed through to Razor, the default view engine.  <li>Razor prepares to render the CSHTML file (or VBHTML file) as requested by the framework using anything that was built up so far.  <li>Rendering occurs, which often and typically includes a “layout” or master page that is wrapped around the entire content.  <li>Happiness ensues.</li></ul> <p>There are actually a few more moving parts involved in the request as we’ll see in the coming weeks, and we haven’t even talked about application startup yet. The framework also provides a number of ways to intercept requests and participate in the executing pipeline, so we’ll cover that as well as the month unfolds.</p> <p>On day 2, we’ll breakdown the solution that was created and start twiddling some bits. See you tomorrow and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2801</wp:post_id>
		<wp:post_date>2014-06-01 10:56:00</wp:post_date>
		<wp:post_date_gmt>2014-06-01 10:56:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-1-the-mvc-5-starter-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208478]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36141</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-06-30 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/en/reading-notes/reading-notes-2014-06-30-2/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-02 18:45:49</wp:comment_date>
			<wp:comment_date_gmt>2014-07-02 18:45:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 0: Bootstrapping Mvc for the Next 30 Days (James Chambers) &#8211; Very promissing series. Day 1, Day 3 , Day 4 , Day 5, Day [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37261</wp:comment_id>
			<wp:comment_author><![CDATA[david]]></wp:comment_author>
			<wp:comment_author_email>davidstemkoski@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.davidstemkoski.net</wp:comment_author_url>
			<wp:comment_author_IP>75.140.126.155</wp:comment_author_IP>
			<wp:comment_date>2014-07-29 01:20:54</wp:comment_date>
			<wp:comment_date_gmt>2014-07-29 01:20:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mister James,

This site was recommended and I can see why. You have created a "5 star" technology explanation. Thank you for taking the time!

Sincerely,
Dave]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812703]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37861</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:45:52</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:45:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 1:&nbsp;The MVC 5 Starter Project [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39381</wp:comment_id>
			<wp:comment_author><![CDATA[Martin]]></wp:comment_author>
			<wp:comment_author_email>martinste@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.23.89.220</wp:comment_author_IP>
			<wp:comment_date>2015-01-24 21:38:14</wp:comment_date>
			<wp:comment_date_gmt>2015-01-24 21:38:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[just got here following a recommendation in the MVA Introduction-course about MVC.
I read day one and I love your style and explanations. 
No "and here is magic done...", just explaining the things as they are -&gt; this is the only way you can really learn a new  Technology if you have technical background. 
Understanding the underlying concepts..

Thank you very much and greetings from Vienna (Austria).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812704]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40041</wp:comment_id>
			<wp:comment_author><![CDATA[Anthony Grace]]></wp:comment_author>
			<wp:comment_author_email>anthony.grace@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.codersbarn.com</wp:comment_author_url>
			<wp:comment_author_IP>209.77.72.250</wp:comment_author_IP>
			<wp:comment_date>2015-04-23 19:34:45</wp:comment_date>
			<wp:comment_date_gmt>2015-04-23 19:34:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just followed the tutorial only to find that when running it with , cell mobile view is totally broken out of the box in IE11 (version: 11.0.9600.17728)

<a href="http://i.imgur.com/iklCCE7.jpg" title="Cell View" rel="nofollow">&nbsp;</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812701]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 2: Examining the Solution Structure</title>
		<link>http://jameschambers.com/2014/06/day-2-examining-the-solution-structure/</link>
		<pubDate>Mon, 02 Jun 2014 10:58:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2871</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">Day 0 for an index</a>.</p> <p>Now that we’ve had a chance to see what the default project looks like when running, let’s talk about the parts of the project that make it happen. We talked briefly about controllers, actions and views, so let’s figure out where those come from first before moving on to other important contributors to our project.</p> <h2>Controllers and Views, and Actions, Too</h2> <p>One of the things that the MVC Frameworks does reasonably well is to follow convention over configuration. That means that with very little effort you can make use of most of the features of the framework without having to set XML, change project configuration or the like…it just “works” out-of-box. Of course, this means that it is also fairly reasonable to assume that it is somewhat opinionated, especially when it comes to tooling. So, there are “right” ways and “choose your own pain” ways to approach development.</p> <p>Thankfully, controllers and views are easy pieces, you can find them in the apt-named folders, “Controllers” and “Views”, respectfully and consistently across most projects. </p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image2.png" width="298" height="341"></p> <p>Each controller has a corresponding folder inside of Views to help keep things organized further. If you’re generating views from the built-in tooling, they are created here as well. As the MVC Framework tries to find the view you would like rendered it checks here first and then falls back to the “shared” folder, also part of convention.</p> <p><strong>A controller is just a class and actions are just methods.</strong> This is an important detail, so keep that in mind as you develop. While you can use either version of either word and be correct, you’ll gain the favor of the lexicon if you try to use the terms as they are known in the framework. Other extension points, for example, reference these terms and they are good cues to help other developers (including the future version of you) survive your code down the road.</p> <p><strong>A view is typically HTML plus some optional code written using the Razor syntax.</strong> We don’t create “web pages” any more, we create applications. The view engine – Razor – using your view files and any supplied data to assemble and output HTML, which is returned to the client who initiated the request.</p> <p>Of special note is the Shared folder under Views, where you’ll find the layout file (_Layout.cshtml) that is used as a template or “master page” for your site, giving you a way to have pages that follow a similar look-and-feel without having to repeat the same layout instructions on each page.</p> <h2>Models</h2> <p>These guys are pretty easy: they are just classes. Models will have properties and helper methods. They may reflect data that is stored in the database, data that you wish to store in the database, or input from users. They may store options for users to choose from when inputting their data. There are a lot of things Models can be, but for the most part they are just plain old CLR objects (POCOs). </p> <p>Where things get interesting is when you “pass” a model to a view, allowing an HTML page to be rendered based on the properties of the information contained therein. </p> <h2>Scripts, Content and Fonts</h2> <p>Any web project is driven by a set of static or semi-dynamic resources such as CSS files, images, fonts and JavaScript sources. The solution gives you some basic structure to help keep these organized, but these are not contributors to the MVC project structure and they do not influence the framework. You are free to rename these and organize these types of files as you wish.</p> <p>The one caveat would be that the default template (mostly driven from your application startup files) does make use of this structure, as do some of the startup components. If you start to move these around, you’ll also need to update those aspects of your project.</p> <p>In these folders you’ll find the requisite pieces needed to ship a web site that reflects the Bootstrap design language, namely jQuery, the Bootstrap library and stylesheet, the glyphicons font and a few libraries to assist with browser incompatibilities and functionality polyfills to add capabilities that are missing in out-of-date or non-compliant browsers.</p> <h2>Application Building Blocks</h2> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image3.png" width="174" align="right" height="112">The App_Start folder is likely the most interesting from a code perspective as it provides the wiring to pull your application together. Bundles are a way to reduce and compress script and style resources in a non-lossy fashion (as far as the browser is concerned). Filters allow you to modify the execution pipeline of your application. Identity is the implementation of the built-in local user account manager. Routing allows friendly URLs and custom mapping of resources. And the Startup.Auth file (a partial class) is used to tell your app which types of user identies you’ll be using to pair with your local user accounts.</p> <p>There’s a lot in that last little paragraph, but we’ll unpack it as we go.</p> <h2>The Root of all Web</h2> <p>We wouldn’t be complete if we didn’t cover all the bits, including those in the root of our application.</p> <p>At the top of the solution explorer you’ll see “Properties” and “References”, standard in all .Net applications. These give you access to things like assembly information, the built-in web server configuration and references to external dependencies that you take.</p> <p>Towards the bottom of the list you’ll see a couple of files that are common on all Asp.Net sites, Global.asax and Web.Config. These give instructions to the MVC Framework, to the Asp.Net runtimes and to IIS itself as to how to execute requests and make use of resources. They allow you to store settings and provide values to libraries and assemblies you might be using. You’ll note that Global’s startup method calls out to some of the startup classes we covered in the last section as well.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image4.png" width="501" height="81"></p> <p>Favicon.ico is the image that will be displayed in a browser tab when someone visits your site.</p> <p>Packages.config is a list of all the packages that are required by your application. If you open&nbsp; a project and do not have these packages installed, Visual Studio will go and fetch them for you when you try to build.</p> <p>There’s one last class in there, a file named Startup.cs, which configures the authentication bits via a call to the Configure method in our Startup.Auth partial class. This one is interesting because it leverages an OwinStartupAttribute to get invoked before anything else in our app is executed. OWIN is a bigger topic that we’ll review later in this series.</p> <h2>Next Steps</h2> <p>Now that we have the lay of the land, tomorrow we’ll add a new page to our application so we can see a little more of the plumbing in play.</p> <p>Happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2871</wp:post_id>
		<wp:post_date>2014-06-02 10:58:00</wp:post_date>
		<wp:post_date_gmt>2014-06-02 10:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-2-examining-the-solution-structure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781462074]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36131</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-06-30 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/notes-de-lecture/reading-notes-2014-06-30/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-02 18:44:14</wp:comment_date>
			<wp:comment_date_gmt>2014-07-02 18:44:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 2: Examining the Solution Structure (James Chambers) &#8211; Mandatory post to any new (or less new) web developers, learn what&#039;s in an MVC project. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Day 3: Adding a Controller and View</title>
		<link>http://jameschambers.com/2014/06/day-3-adding-a-controller-and-view/</link>
		<pubDate>Tue, 03 Jun 2014 10:04:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3011</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>When we talk about “adding a page” to a site, what we usually are referring to is setting up some kind of response to a client request. Sometimes that request will be an HTML page, but it might be a dynamically created image, a file built on the fly, or any other HTTP compliant result.</p> <p>In any case, if the goal is to try to render something that the user is going to see on their screen, we’re likely talking about adding controllers and views.</p> <h2>Creating Controllers</h2> <p>As we already discussed, we will follow the conventions that have been laid out so that we can leverage the built in tooling. To get started, right-click on the Controllers folder in the solution explorer and follow the context menu to “Add –&gt; Controller…”.&nbsp; This is the process for using the scaffolding exposed by the framework, launching a dialog that prompts you for the information it needs to build out a starting point. There are a number of options, but let’s just look at first one for now: the Empty Controller.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb4.png"><img title="image_thumb[4]" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image_thumb[4]" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb4_thumb.png" width="410" height="275"></a></p> <p>This gives you a simple option to name a controller when selected.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb7.png"><img title="image_thumb[7]" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image_thumb[7]" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb7_thumb.png" width="393" height="82"></a></p> <p>I called mine “SimpleController”, which you’ll see has some significance in a moment.&nbsp; As a class, future James will know exactly what present James means by this name.&nbsp; Here’s the class that is generated for me.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> SimpleController : Controller
{
    <span class="rem">// GET: Simple</span>
    <span class="kwrd">public</span> ActionResult Index()
    {
        <span class="kwrd">return</span> View();
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>So, again, this is a class with a method, but we call it a controller with an action. In this case, my Index “action” returns the result of a call to the <strong>View</strong> method, which is found on my base class that I inherit from (Controller). <strong>ActionResult,</strong> the return type of <strong>Index</strong>, is a type located in the MVC Framework that we’ll look Because we’re following convention, the <strong>View</strong> method will attempt to locate a view named “Index” found in the Views folder, in the Simple subfolder.</p>
<p>Unfortunately, that view doesn’t yet exist. Thankfully, this isn’t hard to do.</p>
<h2>Creating Views</h2>
<p>In the code editor window, right-click on the Index method (right on the name of the method itself) to invoke the context menu. Select “Add View…” to get the dialog open to create your view.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb10.png"><img title="image_thumb[10]" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image_thumb[10]" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb10_thumb.png" width="411" height="250"></a></p>
<p>The nice thing here is that you don’t have to type in the name of your view. The tooling just assumes the name from the method.</p>
<p>At this point, use the “Empty” template to create your view and select the option to “Use a layout page” as I have above. Leave the name as-is so that we can follow along on that convention gravy train. When you click “Add”, a view file will be created for you with the cshtml (or vbhtml) extension, with something similar to the following code:</p><pre class="csharpcode">@{
    ViewBag.Title = <span class="str">"Index"</span>;
}

&lt;h2&gt;Index&lt;/h2&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The @{ … } notation is Razor syntax to say, “here’s a code block”. This is used to interact with the rendering of the view and in this case it’s simply setting the value of the page Title in the ViewBag. </p>
<p>With your cursor in the Razor editor, run your application by pressing CTRL+F5 (run without debugger), and navigate to your newly created page. For me, my application started up on port 48995 and the full URL was <font color="#0000ff"><strong><a href="http://localhost:48995/Simple/Index">http://localhost:48995/Simple/Index</a></strong></font>. You can think of that address as <font color="#0000ff"><strong>http://host/Controller/View</strong></font> for any page that is following the default convention for routing.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb15.png"><img title="image_thumb[15]" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image_thumb[15]" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb15_thumb.png" width="395" height="120"></a></p>
<p>New page for the win!</p>
<h2>Next Steps</h2>
<p>A page that says index will really only hold you over for so long, so up next we’ll find out how to send along more meaningful information to our client.</p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/06/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3011</wp:post_id>
		<wp:post_date>2014-06-03 10:04:00</wp:post_date>
		<wp:post_date_gmt>2014-06-03 10:04:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-3-adding-a-controller-and-view</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781462955]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37751</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:27:46</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:27:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 3:&nbsp;Adding a Controller and View [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40461</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Lavery]]></wp:comment_author>
			<wp:comment_author_email>Lav142@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.94.13.171</wp:comment_author_IP>
			<wp:comment_date>2015-06-18 09:12:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-18 09:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is my current 30 day challenge.  I have "followed" other tutorials before but I find this one very easy to read so far.  Looking forward to the rest of the tutorial.  One suggestions is to add some suggestions on how to play with what you just learned.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2085459536]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40471</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-06-19 01:37:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-19 01:37:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Mike, sounds like a great idea. I'll be working on a refresh with MVC 6 in the not-so-distant future and will definitely add the exercises/suggestions at the end. Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40461</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2085459536]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2087126533]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41461</wp:comment_id>
			<wp:comment_author><![CDATA[Karl]]></wp:comment_author>
			<wp:comment_author_email>ktheeten@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.22.112.122</wp:comment_author_IP>
			<wp:comment_date>2015-09-02 18:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-02 18:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That refresh would be great!  This is certainly one of the best tutorials i’ve ever followed!  Thanks a lot!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40471</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2087126533]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2232397423]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 4: Making a Page Worth a Visit</title>
		<link>http://jameschambers.com/2014/06/day-4-making-a-page-worth-a-visit/</link>
		<pubDate>Wed, 04 Jun 2014 10:04:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3061</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>A page instantly becomes more interesting with useful data and a bit of style. Today we’re going to stuff a bit of data into our view and rock it out a little bit with some Bootstrap style.</p> <h2>Introducing Some Data</h2> <p>If you’ve been <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">following along</a> you’ll have a controller called SimpleController with an Index method in it.&nbsp; I’m going to come back to that in a moment, but first we need a class to store our data in.&nbsp; Right-click on the Models folder in the solution and select Add –&gt; Class…, then name it Person from the dialog.&nbsp; Add FirstName, LastName, Birthdate, LikesMusic and Skills (an ICollection of string) properties, so it ends up looking like so:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Person
{
    <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
    <span class="kwrd">public</span> DateTime BirthDate { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">bool</span> LikesMusic { get; set; }
    <span class="kwrd">public</span> ICollection&lt;<span class="kwrd">string</span>&gt; Skills { get; set; }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
Those properties should give us some interesting data to look at.</p>
<p>Now, return to your Index method on the SimpleController and update the code to do the following:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Index()
{
    var person = <span class="kwrd">new</span> Person
    {
        FirstName = <span class="str">"Billy Jo"</span>,
        LastName = <span class="str">"McGuffery"</span>,
        BirthDate = <span class="kwrd">new</span> DateTime(1990, 6,1),
        LikesMusic = <span class="kwrd">true</span>,
        Skills = <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;() { <span class="str">"Math"</span>, <span class="str">"Science"</span>, <span class="str">"History"</span> }
    };

    <span class="kwrd">return</span> View(person);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We are initializing a new Person object and updating the call to View() to pass in the person object.</p>
<p><strong><em>Note of Awesome</em></strong> In previous versions of the MVC Framework and Visual Studio, we used to have to build our solution to get the types available to the tooling, this is no longer the case, allowing for a little less back-and-forth and confusion over missing types in the tooling dialogs. A nice new feature!</p>
<h2>Scaffolding a View</h2>
<p>Now, as nice as that <a href="http://jameschambers.com/2014/06/day-3-adding-a-controller-and-view/" target="_blank">Index page was</a> that we created in the Simple view folder, it’s just got to go! Select it from the Solution Explorer and delete it, then return to your SimpleController code file and create a new view in a similar fashion. This time, however, when you’re creating the view, you’ll need to select the “Details” template and the “Person” class.</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image5.png" width="437" height="264"></p>
<p>Now when you run your application and navigate to Simple/Index, you’ll see something like the following:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image6.png" width="487" height="348"></p>
<p>…which is more interesting, but it just doesn’t sing.&nbsp; We need it to look more like…</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image7.png" width="494" height="243"></p>
<p>Bang! Now we’re snapping!&nbsp; Let’s see how that breaks down.</p>
<h2>Bootstrapification</h2>
<p>The page is missing some <em>zing</em>&nbsp; and some data. So we need to fix that. The scaffolder does its best to drop properties on the page, but it doesn’t do so well with collections (without special instructions) and tends to just dump the properties in, more or less, a list. It’s a good place to start and helps get a minimal viable product out the door, but it’s not pretty.</p>
<p>To get the page looking like version 2 above, there are four main components that we need to address. The first is just the setup code for the page, where you set the model type, the page title and collect some information to help render the view.</p><pre class="csharpcode">@model WebApplication29.Models.Person

@{
    ViewBag.Title = <span class="str">"Index"</span>;
    var likesMusic = Model.LikesMusic ? <span class="str">"active"</span> : <span class="kwrd">null</span>;
    var notAMusicFan = !Model.LikesMusic ? <span class="str">"active"</span> : <span class="kwrd">null</span>;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Next is three divs, each with a slightly different purpose. The first is the page header, a place to block out some info on the page and relay context.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="page-header"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">h1</span><span class="kwrd">&gt;</span>Welcome to the Person Page <span class="kwrd">&lt;</span><span class="html">small</span><span class="kwrd">&gt;</span>Read all about @Model.FirstName<span class="kwrd">&lt;/</span><span class="html">small</span><span class="kwrd">&gt;&lt;/</span><span class="html">h1</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Then we push out the primary details of the person.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">h3</span><span class="kwrd">&gt;</span>@Model.FirstName @Model.LastName<span class="kwrd">&lt;/</span><span class="html">h3</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>@Model.FirstName was born on @Model.BirthDate.ToString("D").<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="btn-group"</span> <span class="attr">data-toggle</span><span class="kwrd">="buttons"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm @likesMusic"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">name</span><span class="kwrd">="options"</span> <span class="attr">id</span><span class="kwrd">="option1"</span><span class="kwrd">&gt;</span> Likes Music
            <span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm @notAMusicFan"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">name</span><span class="kwrd">="options"</span> <span class="attr">id</span><span class="kwrd">="option2"</span><span class="kwrd">&gt;</span> Suffers in a Distorted Reality
            <span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>And finally, we loop through all the skills the person has and set them up as labels.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
        Skills:
        @foreach (var skill in Model.Skills)
        {
            <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="label label-primary"</span><span class="kwrd">&gt;</span>@skill<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
        }
    <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Up Next…</h2>
<p>Now that we’re looking at pulling some real data into our views, it’s likely a good time to step back and get a feel for what Bootstrap is and how it can help us style our pages. Tomorrow we’ll take a look at what Bootstrap has to offer our UI.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3061</wp:post_id>
		<wp:post_date>2014-06-04 10:04:00</wp:post_date>
		<wp:post_date_gmt>2014-06-04 10:04:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-4-making-a-page-worth-a-visit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207586]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37881</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:46:25</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:46:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 4:&nbsp;Making a Page Worth a Visit [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38061</wp:comment_id>
			<wp:comment_author><![CDATA[Leke]]></wp:comment_author>
			<wp:comment_author_email>n2fole00@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>149.126.183.118</wp:comment_author_IP>
			<wp:comment_date>2014-10-01 10:19:37</wp:comment_date>
			<wp:comment_date_gmt>2014-10-01 10:19:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Needed to add <code>using YourProjectName.Models;</code> to the top of SimpleController.cs]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812002]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38791</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel van Flymen]]></wp:comment_author>
			<wp:comment_author_email>daniel@parcelninja.co.za</wp:comment_author_email>
			<wp:comment_author_url>http://www.parcelninja.co.za</wp:comment_author_url>
			<wp:comment_author_IP>196.210.185.245</wp:comment_author_IP>
			<wp:comment_date>2014-11-06 09:21:14</wp:comment_date>
			<wp:comment_date_gmt>2014-11-06 09:21:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Something that newcomers may miss:

Make your model Person.cs, then when you edit the controller, you need to add "using MyWebApp.Models;" to the top of your controller, else the controller won't know what a Person is.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812004]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41711</wp:comment_id>
			<wp:comment_author><![CDATA[TVSlob]]></wp:comment_author>
			<wp:comment_author_email>hikedance@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.104.147.119</wp:comment_author_IP>
			<wp:comment_date>2015-09-25 21:58:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-25 21:58:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, thank you!  Glad you posted that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38791</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812004]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2274418015]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41841</wp:comment_id>
			<wp:comment_author><![CDATA[مصعب صالح]]></wp:comment_author>
			<wp:comment_author_email>mussab.riani@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.252.170.45</wp:comment_author_IP>
			<wp:comment_date>2015-10-12 07:46:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-12 07:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks alot that was efficeint and simple]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2302554607]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 5: Bootstrap for the Asp.Net Developer</title>
		<link>http://jameschambers.com/2014/06/day-5-bootstrap-for-the-asp-net-developer/</link>
		<pubDate>Thu, 05 Jun 2014 10:20:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3131</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Starting with a blank slate and little direction on where to take things visually is a painful part of web development to overcome, especially for those of us who are in the “design challenged” camp.&nbsp; The <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a> front-end framework takes away a lot of the guessing and rework that head-ends most new projects and establishes a design language to work within, while still providing options for look-and-feel via themes.</p> <p>While we’ve had a number of options over the years as the Asp.Net templates have evolved, most of them have stuck out like sore, outdated thumbs and rarely would you let them find their way into production. Today, we have a starting point that marries us to a visual style that we can be happy with publishing.</p> <h2>Bootstrap is CSS and JavaScript</h2> <p>You’ll include two resources in a page that you want to build off of Bootstrap, the style sheet and the JavaScript library that make it work.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image8.png" width="337" height="272"></p> <p>The CSS aspect gives you a stock option with fonts, colors and components that work well together, a responsive layout grid, and the flexibility to completely modify the framework’s default colors, spacing and other variables. You can see how diverse things are at the <a href="http://expo.getbootstrap.com/" target="_blank">Bootstrap expo site</a>, and build your own theme variant using the <a href="http://getbootstrap.com/customize/" target="_blank">tools online</a>. You can also download freely available themes from various sites on the interwebs.</p> <p>The JavaScript library introduces a number of behaviors and widgets that augment the design with a user experience that most web surfers are now familiar with when working with alerts, tool tips, tabs buttons and more.</p> <h2>Bootstrap is Also Custom HTML Attributes </h2> <p>The next aspect to be aware of is that the framework relies on several custom HTML attributes to kick up the juice. The JavaScript library looks for these attributes to append functionality, help with layout and behaviors and attach events. </p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image9.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb1.png" width="504" height="174"></a></p> <p>The above example, from the docs site, shows how to create a “scroll spy” with no code. Note that all things you can do via attributes can be done with JavaScript as well, so you’re not locked into a model.</p> <p>What I really like about this approach is that the framework isn’t as opinionated as, say, jQuery UI about how you must go about your business. The attributes are an easy way with minimal code to augment your page.</p> <h2>Bootstrap is Built In</h2> <p>As of version 5, Microsoft has elected to make Bootstrap the framework of choice in every non-blank web application, making it easy to start working with.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image10.png" width="458" height="133"></p> <p>It’s included in the bundles, configured at app startup, and it’s included on all child pages that leverage the default layout, located in your Views\Shared folder.</p> <h2>Bootstrap is Pretty Easy</h2> <p>Once you get your head around the opinions that Bootstrap <em>does</em> have, you’ll find that creating a toggle button styled in the same way as everything else on your site becomes quite trivial.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image12.png" width="503" height="99"></p> <p>Of course, there is more to Bootstrap than just toggle buttons, and there is more to the MVC Framework than spitting out static HTML, so we have some work to do to finish exploring this dynamic duo.</p> <h2>Next steps</h2> <p>Tomorrow we’ll look at how we can start to change the way that we render our content, leveraging MVC and the Bootstrap library together.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3131</wp:post_id>
		<wp:post_date>2014-06-05 10:20:00</wp:post_date>
		<wp:post_date_gmt>2014-06-05 10:20:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-5-bootstrap-for-the-asp-net-developer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781327553]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35401</wp:comment_id>
			<wp:comment_author><![CDATA[MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2014/06/11/30-days-of-bootstrap-with-the-mvc-framework.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.146</wp:comment_author_IP>
			<wp:comment_date>2014-06-11 15:34:11</wp:comment_date>
			<wp:comment_date_gmt>2014-06-11 15:34:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 5: Bootstrap for the Asp.Net Developer [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37871</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:46:09</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:46:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 5:&nbsp;Bootstrap for the Asp.Net Developer [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41712</wp:comment_id>
			<wp:comment_author><![CDATA[TVSlob]]></wp:comment_author>
			<wp:comment_author_email>hikedance@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.104.147.119</wp:comment_author_IP>
			<wp:comment_date>2015-09-26 00:01:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-26 00:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So the toggle buttons are html. would bootstrap work with &lt;asp.net controls?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2274557887]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 6: Reusing Design Elements on Multiple Pages</title>
		<link>http://jameschambers.com/2014/06/day-6-reusing-design-elements-on-multiple-pages/</link>
		<pubDate>Fri, 06 Jun 2014 10:53:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3201</guid>
		<description></description>
		<content:encoded><![CDATA[This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.

While it’s important to learn the mechanics of the underlying technology we use, it’s never really much fun to have to do the same work over and over again.  That’s part of why we’re here; rather than hacking out the CSS for each site or page, we use frameworks and libraries to bring a uniform look-and-feel.

Likewise, we want to make sure we’re leveraging the MVC Framework to do the heavy lifting for us when we’re trying to get our data out to the client.
<h2>Layouts and Partial Views</h2>
Back on Day x I briefly mentioned the layout page, located in your Views\Shared directory.  This type of “master page” gives you the ability to create a template that can be shared on all pages where you want to wrap your content with common elements, such as side bars, menus, footers and the like, or likewise, to stuff in client-side application scripts, style sheets and other elements.

At the other end of the layout page is the concept of a partial view – a template that can be used to render a specific kind of content in different pages. You may also hear them called by the shortened name of “partials”. This allows you to define one time how a set of data will be rendered and then include the partial wherever you need to render the content.
<h2>Creating a Partial View</h2>
Let’s consider for a moment the section of labels that is rendered at the bottom of our person page that lists the skills.

<a href="http://jameschambers.com/wp-content/uploads/2014/06/image13.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb2.png" width="327" height="46" border="0" /></a>

That block of skills is really just a collection of strings that we are displaying as labels decorated with Bootstrap styling.  I could imagine that would be handy to have in other places on my site as well.

Let’s look at that code again quickly and see what we have going on.
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
        Skills:
        @foreach (var skill in Model.Skills)
        {
            <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="label label-primary"</span><span class="kwrd">&gt;</span>@skill<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
        }
    <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>Essentially, we’re dumping a bunch of span elements to the page inside of a p tag, all wrapped up in a div. Not too complex. There is a title to describe the list of labels, and a for..each loop that walks over the collection to dump the labels to the page.

Let’s cut that code to the clipboard and paste it into a new file in the Views\Simple folder called _StringCollection.cshtml. You can add the file by right-clicking on the Simple folder and selecting Add –&gt; View. When prompted, make sure to tick the “Create as Partial View” so that the scaffolder doesn’t set the layout or title, and select the “empty (without model)” template. Using the underscore as a prefix is a convention to let others (and remind yourself) that the file is intended be rendered as a partial view.

Paste the code into the file and update it a little so that the entire partial matches the following code, including the model definition at the top:
<pre class="csharpcode">@model ICollection<span class="kwrd">&lt;</span><span class="html">string</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
        @ViewBag.ListDescription
        @foreach (var value in Model)
        {
            <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="label label-primary"</span><span class="kwrd">&gt;</span>@value<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
        }
    <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>Notice that rather than just writing out “Skills” to the page ahead of our labels, we’re now using a property from the ViewBag. Now, return to your Index.cshtml and, in the place of the code that you removed, add the following lines to your view:
<pre class="csharpcode">@{ 
    ViewBag.ListDescription = <span class="str">"Skills:"</span>; 
    Html.RenderPartial(<span class="str">"_StringCollection"</span>, Model.Skills);
}</pre>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>Run your newly updated page and see…well, you’ll see exactly what we had before, but we’re doing it a little more cleverly!

Here we’ve set the title and then asked Razor, the view engine, to process the partial view file with the contents of the string collection we’ve passed in.  From now on, anywhere in our site, we can push a collection of strings into a label set with a title in two lines of code.
<h2>Next Steps</h2>
This isn’t the only way that we can render a type of data with some kind of enhanced templating. Tomorrow we’ll look at making it even more effortless to get our data all fancied up for the ball.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3201</wp:post_id>
		<wp:post_date>2014-06-06 10:53:00</wp:post_date>
		<wp:post_date_gmt>2014-06-06 10:53:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-6-reusing-design-elements-on-multiple-pages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207385]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35841</wp:comment_id>
			<wp:comment_author><![CDATA[Patrick]]></wp:comment_author>
			<wp:comment_author_email>Patrick@visualcoach.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.86.207.13</wp:comment_author_IP>
			<wp:comment_date>2014-06-25 07:08:11</wp:comment_date>
			<wp:comment_date_gmt>2014-06-25 07:08:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Underscore missing in : 
@{ 
    ViewBag.ListDescription = "Skills:"; 
    Html.RenderPartial("StringCollection", Model.Skills);
}

<b> "StringCollection" should read "_StringCollection"</b>

Thanks for your series. I Always disliked design but this looks like something I can handle:-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811873]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35941</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 01:30:50</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 01:30:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah yes! You're correct! I actually have the file named incorrectly here locally, so this code works for me. :) Of course, you'll need to update it to match what you have.

Thanks for the correction and for following along!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35841</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811873]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811986]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37341</wp:comment_id>
			<wp:comment_author><![CDATA[Marcel Burkhard]]></wp:comment_author>
			<wp:comment_author_email>marcel@burkhard.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.138.56.182</wp:comment_author_IP>
			<wp:comment_date>2014-08-13 19:57:47</wp:comment_date>
			<wp:comment_date_gmt>2014-08-13 19:57:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I ran into the same issue as Patrick, you might want to update the tutorial accordingly.

Thanks for the tutorial that looks promising so far.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811872]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37361</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-08-14 22:18:30</wp:comment_date>
			<wp:comment_date_gmt>2014-08-14 22:18:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Done and done. Thanks Marcel!

Cheers,
-James]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37341</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811872]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811985]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 7: Semi-Automatic Bootstrap &#8211; Display Templates</title>
		<link>http://jameschambers.com/2014/06/day-7-semi-automatic-bootstrap-display-templates/</link>
		<pubDate>Sat, 07 Jun 2014 10:40:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3271</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>On <a href="http://jameschambers.com/2014/06/day-6-reusing-design-elements-on-multiple-pages/" target="_blank">Day 6</a> we looked at the idea of using a partial view to make it easier to render certain types of data more easily. We can go even further, and allow the scaffolder and HTML helpers to render what we’re looking for without the need for the additional calls to render partials.</p> <p>If you provide the MVC Framework with a template to render a type and give the right kind of hints to your class properties you’ll be duly rewarded with ease of effort in bringing a rich UI to the client. For now, we’ll start with the display end of things.</p> <h2>Bootstrap Styling for Checkboxes</h2> <p>We can really use any type that we want, but I’m going to start with Boolean properties. While they seem at first to be straightforward, they also provide a nullable case that we will need to deal with and render appropriately, much like any other type, yet they’re simple enough that we can work through an starter example.</p> <p>What we’re doing here is creating a Display Template. You can think of it as a partial view in a way, but you usually do a bit more to inspect the properties and interact with data from the view engine in order to properly augment the rendering. We’ll see more of this tomorrow.</p> <p>Enough chatter…now create a new folder called and located at Views\Shared\DisplayTemplates and create a file in there called Boolean.cshtml, then paste in the following code:</p><pre class="csharpcode">@model <span class="kwrd">bool</span>?

@<span class="kwrd">if</span> (Model.HasValue)
{
    <span class="kwrd">if</span> (Model.Value)
    { &lt;span <span class="kwrd">class</span>=<span class="str">"label label-success"</span>&gt;Yes&lt;/span&gt; }
    <span class="kwrd">else</span>
    { &lt;span <span class="kwrd">class</span>=<span class="str">"label label-warning"</span>&gt;No&lt;/span&gt; }
}
<span class="kwrd">else</span>
{ &lt;span <span class="kwrd">class</span>=<span class="str">"label label-info"</span>&gt;Not Set&lt;/span&gt; }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>As the view that is responsible for rendering Boolean values, we must first set the model type of the view. I’ve used a nullable bool as it’s more durable and works with either the basic bool or the nullable version.</p>
<p>The rest of the code is fairly straightforward, just determine if there’s a value or not, then set up the label based on the value or lack thereof.</p>
<h2>Using the Display Template</h2>
<p>Because we named it “Boolean.cshtml”, the MVC Framework will use our template in favor of the built-in template for Booleans, which you’ll recall from <a href="http://jameschambers.com/2014/06/day-4-making-a-page-worth-a-visit/" target="_blank">Day 4</a> was simply a checkbox. We saw something like this:</p>
<p>&nbsp;<img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image14.png" width="171" height="43"></p>
<p>But with the new template in place, we’ll see this:</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image15.png" width="201" height="46"></p>
<p>You can modify your Index.cshtml at this point to see this in action by adding the following line of code:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>Likes Music: @Html.DisplayFor(model =<span class="kwrd">&gt;</span> model.LikesMusic)<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>And that’s it, a call to DisplayFor makes the magic happen. From now on, all Boolean values will be rendered as yes/no/not set labels throughout your site. </p>
<h2>Next Steps</h2>
<p>Of course, the display is interesting enough, but what about editing? What if you don’t want all checkboxes to suffer the same disappearing fate? Tomorrow we’ll look at getting the editor in place and to give the MVC Framework more direction on when to use it.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3271</wp:post_id>
		<wp:post_date>2014-06-07 10:40:00</wp:post_date>
		<wp:post_date_gmt>2014-06-07 10:40:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-7-semi-automatic-bootstrap-display-templates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207439]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35431</wp:comment_id>
			<wp:comment_author><![CDATA[MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2014/06/11/30-days-of-bootstrap-with-the-mvc-framework.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.146</wp:comment_author_IP>
			<wp:comment_date>2014-06-11 15:36:11</wp:comment_date>
			<wp:comment_date_gmt>2014-06-11 15:36:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 7: Semi-Automatic Bootstrap – Display Templates [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37761</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:28:02</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:28:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 7:&nbsp;Semi-Automatic Bootstrap – Display Templates [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37951</wp:comment_id>
			<wp:comment_author><![CDATA[Charles Papir]]></wp:comment_author>
			<wp:comment_author_email>cpapir@pionetechs.com</wp:comment_author_email>
			<wp:comment_author_url>http://pionetechs.com</wp:comment_author_url>
			<wp:comment_author_IP>50.138.9.127</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 19:05:34</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 19:05:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@model bool?
This is from Day 7 tutorial.  I follow what you did BUT can you help me understand the syntax?
And the override mechanism.  Where is the code we are overriding?  How do I do what you have done by creating a non-override routine and can I put it on the bootstrap?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811896]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38001</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-09-26 00:31:08</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 00:31:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Charles, 

The ? syntax is just so that the bool is a nullable value. Bool by default is a value type that does not support bool. 

I hope that answers the first part, but I'm not sure I follow on the override bits?

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37951</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811896]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811902]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38541</wp:comment_id>
			<wp:comment_author><![CDATA[Antonio]]></wp:comment_author>
			<wp:comment_author_email>A_silence@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>34.254.247.221</wp:comment_author_IP>
			<wp:comment_date>2014-10-23 19:04:45</wp:comment_date>
			<wp:comment_date_gmt>2014-10-23 19:04:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello, 

a bit confused  between  "model" And "Model"  I would have thought  that they are  same. could you please clarify this a bit thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811898]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38551</wp:comment_id>
			<wp:comment_author><![CDATA[Antonio]]></wp:comment_author>
			<wp:comment_author_email>A_silence@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>34.254.247.222</wp:comment_author_IP>
			<wp:comment_date>2014-10-23 19:14:28</wp:comment_date>
			<wp:comment_date_gmt>2014-10-23 19:14:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Never mind I am just overthinking it @model is just the way you define the "ViewModel" for the specific view]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38541</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811898]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811901]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39041</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2014-12-03 22:29:40</wp:comment_date>
			<wp:comment_date_gmt>2014-12-03 22:29:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Antonio,

model is the Razor command used at the top of the page to set the context of the object in use throughout the view.

Model is used in-line throughout the page, it is the variable of the type you specify using the model commend.

HTH,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38541</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811898]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811903]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39181</wp:comment_id>
			<wp:comment_author><![CDATA[Raha]]></wp:comment_author>
			<wp:comment_author_email>mehrmagazin@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>5.152.206.77</wp:comment_author_IP>
			<wp:comment_date>2015-01-06 06:09:18</wp:comment_date>
			<wp:comment_date_gmt>2015-01-06 06:09:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James
Thanks for these great articles about bootstrap 
Please help me about how can I create an admin dashboard for asp.net mvc 
I'm new in dotnet mvc
and just need a sample admin panel with
1-create new category &amp; edit and delet
2-create new post &amp; edit and delet
please help me if you have any article about or you know any documentation web address
thanks
Regards :
Raha]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811897]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 8: Semi-Automatic Bootstrap &#8211; Editor Templates</title>
		<link>http://jameschambers.com/2014/06/day-8-semi-automatic-bootstrap-editor-templates/</link>
		<pubDate>Sun, 08 Jun 2014 10:47:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3311</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Now that we have a nice way to consistently display our data, what about editing it? A label is fine to indicate what the saved value is, but it doesn’t really solve the issue of input.</p> <h2>Introducing Editor Templates</h2> <p>Much in the same way that a shared view can act as the de facto template for rendering data (<a href="http://jameschambers.com/2014/06/day-7-semi-automatic-bootstrap-display-templates/" target="_blank">as we saw yesterday</a>), you can override the default editor output by the framework. Create a new view in Views\Shared\EditorTemplates called Boolean.cshtml and put the following code in it:</p><pre class="csharpcode">@model <span class="kwrd">bool</span>?

@{
    <span class="rem">// make use of nullable class attribute values</span>
    var yesSelected = Model.HasValue &amp;&amp; Model.Value ? <span class="str">"active"</span> : <span class="kwrd">null</span>;
    var noSelected = (Model.HasValue &amp;&amp; !Model.Value)
        || (!Model.HasValue &amp;&amp; ViewData.ModelMetadata.IsNullableValueType) 
        ? <span class="str">"active"</span> 
        : <span class="kwrd">null</span>;
    var noSelection = !Model.HasValue ? <span class="str">"active"</span> : <span class="kwrd">null</span>;

    <span class="rem">// get the name of the ID - this is to support multiple fields</span>
    var htmlField = ViewData.TemplateInfo.HtmlFieldPrefix;
}

@Html.HiddenFor(model =&gt; model)

&lt;div <span class="kwrd">class</span>=<span class="str">"btn-group"</span> data-toggle=<span class="str">"buttons"</span>&gt;
    &lt;label <span class="kwrd">class</span>=<span class="str">"btn btn-info @yesSelected"</span>&gt;
        &lt;input type=<span class="str">"radio"</span> <span class="kwrd">class</span>=<span class="str">"bool-@htmlField"</span> onchange=<span class="str">"javascript:$('#@htmlField').val(true);"</span> /&gt; Yes
    &lt;/label&gt;
    &lt;label <span class="kwrd">class</span>=<span class="str">"btn btn-info @noSelected"</span>&gt;
        &lt;input type=<span class="str">"radio"</span> <span class="kwrd">class</span>=<span class="str">"bool-@htmlField"</span> onchange=<span class="str">"javascript:$('#@htmlField').val(false);"</span> /&gt; No
    &lt;/label&gt;

    @<span class="kwrd">if</span> (ViewData.ModelMetadata.IsNullableValueType)
    {
        &lt;label <span class="kwrd">class</span>=<span class="str">"btn btn-info @noSelection"</span>&gt;
            &lt;input type=<span class="str">"radio"</span> <span class="kwrd">class</span>=<span class="str">"bool-@htmlField"</span> onclick=<span class="str">"javascript:$('#@htmlField').val('');"</span> /&gt;Do Not Set
        &lt;/label&gt;

    }

&lt;/div&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There are two important pieces to note in the above code, namely the inspection of TemplateInfo and ModelMetadata in the ViewData instance presented to our view, and the hidden backing field that is kept in sync via JavaScript. ViewData is a ViewDataDictionary that contains, as those properties suggest, metadata about the type of model being used, information about the template, and other view-specific data.</p>
<p>To see this new template in action we’ll have to get a Create view set up and an action on our controller. Head back to the SimpleController class and add the following code:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Create()
{
    var person = <span class="kwrd">new</span> Person();
    <span class="kwrd">return</span> View(person);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Now, right-click on the name of the method, and select “Add View…”, then set it up to use the Create template for the Person class.</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image16.png" width="418" height="256"></p>
<p>Visual Studio will throw you into the editor for your new view, and you can press CTRL+F5 to see your new default control for Boolean values, or navigate to <a>http://localhost:<em>port</em>/Simple/Create</a> to see the page. </p>
<p>The scaffolded view contains simple calls to HTML helpers and doesn’t know anything about the instance of the Person that will be created or the fact that you’ve created a new template to render Boolean values. You’ll only see the following:</p><pre class="csharpcode">@Html.EditorFor(model =&gt; model.LikesMusic)</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>As well, the templates are rendered on the fly by the view engine (just like all views) so you don’t need to recompile as you make updates. Feel free to experiment with the template code and just refresh in your browser after you save.</p>
<p>Note that our Person class doesn’t have a nullable Boolean value, but it if did, it would render like so because of our evaluation of the ModelMetadata in the template above:</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image17.png" width="240" height="76"></p>
<h2>Controlling the Use of Custom Templates</h2>
<p>Now these new controls – button groups for input and labels for display – work great, but you may not wish to use them for all Boolean properties. In both the DisplayTemplates and EditorTemplates folders, rename the Boolean template to BooleanButtonLabel.cshtml. Then, return to your Person class and decorate the LikesMusic property as follows:</p><pre class="csharpcode">[UIHint(<span class="str">"BooleanButtonLabel"</span>)]
<span class="kwrd">public</span> <span class="kwrd">bool</span> LikesMusic { get; set; }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There may be scenarios where you wish to use several alternate templates to display or edit data. This attribute gives the MVC Framework directions to use a template of our choosing, rather than having to use the same template for all properties.</p>
<h2>Next Steps</h2>
<p>You can now render simple properties with whichever template you wish, but what about more complex types? Tomorrow we’ll look at using a custom template at a class level.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3311</wp:post_id>
		<wp:post_date>2014-06-08 10:47:00</wp:post_date>
		<wp:post_date_gmt>2014-06-08 10:47:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-8-semi-automatic-bootstrap-editor-templates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207622]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35871</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jason.ward@seriousfish.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>184.176.77.17</wp:comment_author_IP>
			<wp:comment_date>2014-06-25 23:40:29</wp:comment_date>
			<wp:comment_date_gmt>2014-06-25 23:40:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great stuff, but I'm unable to make this work at all - it always returns false regardless of what's selected. Any idea what could be wrong?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812050]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35911</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 01:27:27</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 01:27:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jason, depending on when you grabbed a copy there may have been a bug. Can you confirm you're all up to date?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35871</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812050]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812157]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35971</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jason.ward@seriousfish.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>184.176.77.17</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 16:06:27</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 16:06:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Yes, I have the latest that you show above.

Regards,
Jason]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35911</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812157]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812392]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35981</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jason.ward@seriousfish.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>184.176.77.17</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 16:59:47</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 16:59:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Yes, I have the latest that you show above.

** Update - I fix it by changing this line:

var htmlField = ViewData.TemplateInfo.HtmlFieldPrefix;

to this:

var htmlField = ViewData.TemplateInfo.HtmlFieldPrefix.Replace(".", "_");

Regards,
Jason]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35911</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812157]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812389]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36251</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas]]></wp:comment_author>
			<wp:comment_author_email>ph00m@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.98.80.11</wp:comment_author_IP>
			<wp:comment_date>2014-07-04 12:13:10</wp:comment_date>
			<wp:comment_date_gmt>2014-07-04 12:13:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you pass in a nullable bool to this custom editor template both 

<b>!Model.HasValue ? "active" : null;</b>
AND
<b>(!Model.HasValue &amp;&amp; ViewData.ModelMetadata.IsNullableValueType)  ? "active"    : null;</b>
will pass and hence both "Do not set" and "No" will have an initial "active" attribute.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812045]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36361</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-07-07 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/en/reading-notes/reading-notes-2014-07-07-2/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-07 17:27:12</wp:comment_date>
			<wp:comment_date_gmt>2014-07-07 17:27:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 8: Semi-Automatic Bootstrap &ndash; Editor Templates (James Chambers) &#8211; Nice post. simple and efficient. Day 10: HtmlHelper Extension Methods &#8211; Nice tutorial on how to create a Html Helper using Gravatar as context. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36601</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-18 13:45:51</wp:comment_date>
			<wp:comment_date_gmt>2014-07-18 13:45:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[
Having fun going through this series

You said 
<blockquote>
Note that our Person class doesn’t have a nullable Boolean value, but it if did, it would render like so because of our evaluation of the ModelMetadata in the template above"
</blockquote>


I couldn't get this to work unless I changed the LikesMusic poperty of the Person class to nullable
<code>public bool? LikesMusic { get; set; }


thanks.
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812048]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36611</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-18 13:49:38</wp:comment_date>
			<wp:comment_date_gmt>2014-07-18 13:49:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry,

disregard the last comment.  I was thinking that it was suppose to show "Do Not Set" even if the LikesMusic was not defined nullable.  But that doesn't make sense.  Your code works as advertised.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812047]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36781</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:50:03</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:50:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good catch. I'll revisit this later and provide a fix.  Thanks Thomas.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36251</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812045]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812159]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37661</wp:comment_id>
			<wp:comment_author><![CDATA[Kelly Harrison]]></wp:comment_author>
			<wp:comment_author_email>kharr0@sbsoftwareshop.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.177.244.157</wp:comment_author_IP>
			<wp:comment_date>2014-09-01 20:30:21</wp:comment_date>
			<wp:comment_date_gmt>2014-09-01 20:30:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It seems to work correctly with simply the following:

<code>
    // make use of nullable class attribute values
    var yesSelected = Model.HasValue &amp;&amp; Model.Value ? "active" : null;
    var noSelected = (Model.HasValue &amp;&amp; !Model.Value) ? "active" : null;
    var noSelection = !Model.HasValue ? "active" : null;
</code>

-k]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36781</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812159]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812390]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39411</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>Mikes@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.208.73.2</wp:comment_author_IP>
			<wp:comment_date>2015-01-26 13:11:40</wp:comment_date>
			<wp:comment_date_gmt>2015-01-26 13:11:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Thanks for the tutorial, nicely done. Can you clarify what "JavaScript:" is within your onchange code above?  I have never encountered that syntax. 
Thanks,
Mike]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812049]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39621</wp:comment_id>
			<wp:comment_author><![CDATA[Laura]]></wp:comment_author>
			<wp:comment_author_email>lthomas@edcoe.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.238.250.127</wp:comment_author_IP>
			<wp:comment_date>2015-03-03 19:10:54</wp:comment_date>
			<wp:comment_date_gmt>2015-03-03 19:10:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am finding this series very useful.  I've been using MVC for a little while now, but there are always new things to learn.

Thank you writing these.  You are very easy to understand and humorous too.  ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812052]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39721</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-15 22:11:24</wp:comment_date>
			<wp:comment_date_gmt>2015-03-15 22:11:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's actually been around for quite some time! This is just another way to inline a call to a JS method. Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39411</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812049]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812158]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39961</wp:comment_id>
			<wp:comment_author><![CDATA[David Carnes]]></wp:comment_author>
			<wp:comment_author_email>david.carnes.programmer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>167.75.254.253</wp:comment_author_IP>
			<wp:comment_date>2015-04-17 17:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-04-17 17:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If I click "Do Not Set" this does not return the nullable bit field back to null.  The SQL Server database will retain the original value.

Otherwise, this has been great in helping me get a modern-looking site up to replace an old Access database.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812051]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39971</wp:comment_id>
			<wp:comment_author><![CDATA[Odysseas]]></wp:comment_author>
			<wp:comment_author_email>odimih@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.152.72.67</wp:comment_author_IP>
			<wp:comment_date>2015-04-17 20:27:08</wp:comment_date>
			<wp:comment_date_gmt>2015-04-17 20:27:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[James, thanks for this series of articles!

Jason you are right about the .Replace addition.
Although the Javascript works fine for booleans of simple models, it doesn't work if you pass a ViewModel to the view, in which case the element id has the form something.somthingelse.
WIth the replace method in place everything worked fine!
Regards,
Odysseas]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35981</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812389]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812700]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41721</wp:comment_id>
			<wp:comment_author><![CDATA[TVSlob]]></wp:comment_author>
			<wp:comment_author_email>hikedance@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.104.147.119</wp:comment_author_IP>
			<wp:comment_date>2015-09-28 22:39:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-28 22:39:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[These namespaces need to be included at the top of your Person.cs:

using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
I wish you had said that, took me 10 minutes to google :) thank you StackOverflow]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2279103533]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41731</wp:comment_id>
			<wp:comment_author><![CDATA[TVSlob]]></wp:comment_author>
			<wp:comment_author_email>hikedance@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.104.147.119</wp:comment_author_IP>
			<wp:comment_date>2015-09-28 23:16:00</wp:comment_date>
			<wp:comment_date_gmt>2015-09-28 23:16:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[All this jabber jabber but the Create button doesn't create a new person. Unless I am all out crazy. The one person "Billy Jo McGuffey" is in the SimpleController.cs class. I doubt you can write to the class.
These proof of concept tutorials drive me nuts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2279152303]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 9: Templates for Complex Types</title>
		<link>http://jameschambers.com/2014/06/day-9-templates-for-complex-types/</link>
		<pubDate>Mon, 09 Jun 2014 10:55:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3341</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Sites like Facebook and Twitter or any site with a “feed” often present their data in a stream of “cards” or “blocks” that are repeatable and consistent, regardless of where you see the snippet of data. Let’s take the UI we created for the Person, augment it a little bit and then make it reusable wherever we might want it displayed.</p> <h2>Extracting the Person Template</h2> <p>We’re going to build from the idea of using the DisplayTemplates in our Views\Shared folder, and add another file in there called Person.cshtml. Just right-click on the Views\Shared\DisplayTemplates folder and click Add –&gt; View. Name the view Person, use the empty template and create it as a partial.</p> <p>Now paste the following code into the file:</p><pre class="csharpcode"><p>@model SimpleSite.Models.Person
</p><p>&nbsp;</p><p><span class="kwrd">&lt;</span><span class="html">hr</span> <span class="kwrd">/</span><span class="kwrd">&gt;</span> 
<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="row"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="col-md-2"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">img</span> <span class="attr">src</span><span class="kwrd">="http://placehold.it/150x150"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="col-md-8"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">h3</span><span class="kwrd">&gt;</span>@Model.FirstName @Model.LastName<span class="kwrd">&lt;/</span><span class="html">h3</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>@Model.FirstName was born on @Model.BirthDate.ToString("D").<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>Likes Music: @Html.DisplayFor(model =<span class="kwrd">&gt;</span> model.LikesMusic)<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
        @{
            ViewBag.ListDescription = "Skills:";
            Html.RenderPartial("StringCollection", Model.Skills);
        }
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></p></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Most of this you should recognize as fairly close to the code we were using in our Index view for the simple controller. Above, I’ve added some columns and a placeholder image so that we can later give users an avatar. But I’m otherwise continuing to use the same elements we were building off of before, such as the <a href="http://jameschambers.com/2014/06/day-7-semi-automatic-bootstrap-display-templates/" target="_blank">DisplayFor</a> and <a href="http://jameschambers.com/2014/06/day-6-reusing-design-elements-on-multiple-pages/" target="_blank">RenderPartial</a> bits we’ve been working on. </p>
<h2>Updating the Index View</h2>
<p>The end result is that our Index view can be <em>much </em>simpler than it was. Here is what you need for the whole view source of Index.cshtml:</p><pre class="csharpcode">@{
    ViewBag.Title = "Index";
    var likesMusic = Model.LikesMusic ? "active" : null;
    var notAMusicFan = !Model.LikesMusic ? "active" : null;
}

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="page-header"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">h1</span><span class="kwrd">&gt;</span>Welcome to the Person Page <span class="kwrd">&lt;</span><span class="html">small</span><span class="kwrd">&gt;</span>Read all about @Model.FirstName<span class="kwrd">&lt;/</span><span class="html">small</span><span class="kwrd">&gt;&lt;/</span><span class="html">h1</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

@Html.DisplayForModel(Model)</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The DisplayForModel tries to find a display template that matches the type of model that is passed in, and sure enough, naming our partial view above “Person” and placing it in the Views\Shared\DisplayTemplates folder was all we needed to do to wire that up. It’s another example of “convention over configuration” at work in the MVC Framework.</p>
<h2>Next Steps</h2>
<p>I’ve used only one set of layout classes as styles for my person template. Later in the month we’ll explore how to make this even more reusable by introducing classes that allow the content to be rendered on different devices and screen sizes.</p>
<p>The placeholder image is okay, but we’d likely prefer to use an image related to the user. Tomorrow we’ll look at a way to implement an extension method that allows us to drop in a Gravatar image for any user.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3341</wp:post_id>
		<wp:post_date>2014-06-09 10:55:00</wp:post_date>
		<wp:post_date_gmt>2014-06-09 10:55:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-9-templates-for-complex-types</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207467]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35411</wp:comment_id>
			<wp:comment_author><![CDATA[MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/cdndevs/archive/2014/06/11/30-days-of-bootstrap-with-the-mvc-framework.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.146</wp:comment_author_IP>
			<wp:comment_date>2014-06-11 15:34:27</wp:comment_date>
			<wp:comment_date_gmt>2014-06-11 15:34:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 9: Templates for Complex Types [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36191</wp:comment_id>
			<wp:comment_author><![CDATA[Priya]]></wp:comment_author>
			<wp:comment_author_email>priya_marwaha@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>182.19.55.228</wp:comment_author_IP>
			<wp:comment_date>2014-07-03 06:33:08</wp:comment_date>
			<wp:comment_date_gmt>2014-07-03 06:33:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you still need   the following code in index.cshtml?

var likesMusic = Model.LikesMusic ? "active" : null;
var notAMusicFan = !Model.LikesMusic ? "active" : null;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811914]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36211</wp:comment_id>
			<wp:comment_author><![CDATA[Jatin]]></wp:comment_author>
			<wp:comment_author_email>jats_ptl@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://stratus.net.nz</wp:comment_author_url>
			<wp:comment_author_IP>202.68.94.234</wp:comment_author_IP>
			<wp:comment_date>2014-07-03 22:39:17</wp:comment_date>
			<wp:comment_date_gmt>2014-07-03 22:39:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,

I found a small typo in the code below:
<code>Html.RenderPartial("StringCollection", Model.Skills);</code>

The name of Partial view is  <strong>_StringCollection</strong>

Hope this helps.

Thanks,
Jatin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811918]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36471</wp:comment_id>
			<wp:comment_author><![CDATA[impe]]></wp:comment_author>
			<wp:comment_author_email>angunangemail@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>222.127.59.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-15 03:04:30</wp:comment_date>
			<wp:comment_date_gmt>2014-07-15 03:04:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey,

Nice tutorial but I get this error "'Simple.Models.Person' does not contain a definition for 'LikesMusic' and no extension method 'LikesMusic' accepting a first argument of type 'Simple.Models.Person' could be found (are you missing a using directive or an assembly reference?)". 

at this code line;
Likes Music: @Html.DisplayFor(model =&gt; model.LikesMusic)

However, if I keep the code line at Index.cshtml (SimpleController) rather than putting it at Person.cshtml (DisplayTemplates folder) then it works fine though, but isn't this tutorial about moving most of the View code to Partial (Person.cshtml)?

Thanks,
-impe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811913]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36681</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:31:39</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:31:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Impe,

Make sure you add the model reference at the top of the page:

<code>@model SimpleSite.Models.Person</code>

Also, sometimes you need to do a clean/compile to get the models updated. If you're working in the view and the classes and just refreshing the browser without compiling, that could be a problem as well. Hope this helps.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36471</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811913]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811920]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36801</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:52:10</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:52:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, that should now be safe to remove.  Thanks Priya!

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36191</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811914]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811921]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37671</wp:comment_id>
			<wp:comment_author><![CDATA[D Hurley]]></wp:comment_author>
			<wp:comment_author_email>hurleydee@yahoo.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.101.84.96</wp:comment_author_IP>
			<wp:comment_date>2014-09-03 12:36:58</wp:comment_date>
			<wp:comment_date_gmt>2014-09-03 12:36:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In Person.cshtml the SimpleSite has a red line under it saying "The type or namespace name"Simple Site' could not be found" 
Also the @Html.DisplayFor(model =&gt; model.LikesMusic displays an error: The type argument for method 'System.Web.Mvc.Html.DisplayExtensions.DisplayFor cannot be inferred from the usage. Try specifying the type arguments explicitly.

Im not sure what to do.

Thanks

D.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811916]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37771</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:28:20</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:28:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 9:&nbsp;Templates for Complex Types [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38041</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-09-26 00:41:46</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 00:41:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dee, please have a look at the completed source code in the GitHub repo, or you can grab a copy of my book for a deeply discounted price here for more detailed walkthroughs on a lot of the code: https://leanpub.com/bootstrappingmvc/c/readblogsFTW]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37671</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811916]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811923]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38851</wp:comment_id>
			<wp:comment_author><![CDATA[Basil Eliopoulos]]></wp:comment_author>
			<wp:comment_author_email>beliopoulos2009@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.18.7.15</wp:comment_author_IP>
			<wp:comment_date>2014-11-12 02:13:55</wp:comment_date>
			<wp:comment_date_gmt>2014-11-12 02:13:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To D Hurley on September 3, 2014 at 12:36 pm

In your first issue in the Person.cshtml partial view, try this code:
Html.RenderPartial("~/Views/Simple/_StringCollection.cshtml", Model.Skills);    Spell out the path to your partial view.  

In your second issue in the Person.cshtml partial view, try this code in the Person.cs model:
[UIHint("BooleanButtonLabel")] 
public bool LikesMusic { get; set; }  
Note that with the [UIHint()] attribute, you will need to import this namespace into the Person.cs model:
using System.ComponentModel.DataAnnotations; 

Also, at the top of your Person.cshtml  partial view, don't forget this declaration:
@model SimpleSite.Models.Person

Good luck.
Basil Eliopoulos]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811915]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38861</wp:comment_id>
			<wp:comment_author><![CDATA[Basil Eliopoulos]]></wp:comment_author>
			<wp:comment_author_email>beliopoulos2009@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.18.7.15</wp:comment_author_IP>
			<wp:comment_date>2014-11-12 02:28:31</wp:comment_date>
			<wp:comment_date_gmt>2014-11-12 02:28:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In the newly modified Index.cshtml view, I was getting the error "Extension methods cannot be dynamically dispatched".  It was happening in this code snippet:  @Html.DisplayForModel(Model).  That is because extension methods do not support dynamic types.  You have to cast the dynamic type to a real type.  Is in the end, make these modifications to the Index.cshtml view.   

1.  At the top of the view, add this declaration:   @using SimpleSite.Models
2.  Cast your model to a real type like this: @Html.DisplayForModel((Person)Model).  

Basil Eliopoulos]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811917]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38871</wp:comment_id>
			<wp:comment_author><![CDATA[Blake]]></wp:comment_author>
			<wp:comment_author_email>blakeq4au@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>199.209.144.250</wp:comment_author_IP>
			<wp:comment_date>2014-11-12 22:32:18</wp:comment_date>
			<wp:comment_date_gmt>2014-11-12 22:32:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I kept getting the following error on the @Html.DisplayForModel(Model)

"has no applicable method named DisplayForModel but appears to have an extension method by that name"

Had to cast the Model being passed in as AppName.Model.Person to make it go away.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811919]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38981</wp:comment_id>
			<wp:comment_author><![CDATA[Sondre]]></wp:comment_author>
			<wp:comment_author_email>sondre.torgersen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>146.2.193.68</wp:comment_author_IP>
			<wp:comment_date>2014-11-25 17:29:30</wp:comment_date>
			<wp:comment_date_gmt>2014-11-25 17:29:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[add "@model ProjectName.Models.Person" to your Index.cshtml file]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37671</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811916]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812044]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39871</wp:comment_id>
			<wp:comment_author><![CDATA[Dave.Bourke]]></wp:comment_author>
			<wp:comment_author_email>squire40@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.41.177.182</wp:comment_author_IP>
			<wp:comment_date>2015-03-29 19:07:02</wp:comment_date>
			<wp:comment_date_gmt>2015-03-29 19:07:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[D,

SimpleSite is what James named his project.  Replace this with whatever name you used when you created your project.  You can see this as the root to the app in your Solution Explorer. Cheers.

-Dave]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37671</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811916]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811922]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40551</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-25 21:11:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-25 21:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow...bought the book this morning and started on it.  6 hours in and I am really liking what I am learning.  One note, use the website to copy/paste from (I keep both the book open and the site) then you don't have to fight the line numbers or the kindle author copyright message.  
Great job so far James -- thank you for making this available both for free here and for a very affordable price through leanpub.
Joe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2100299529]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42101</wp:comment_id>
			<wp:comment_author><![CDATA[Urgen Kalsang]]></wp:comment_author>
			<wp:comment_author_email>v-2urged@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.176.143.146</wp:comment_author_IP>
			<wp:comment_date>2015-11-03 14:55:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-03 14:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[how this model comes from @model SimpleSite.Models.Person]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2340631081]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 10: HtmlHelper Extension Methods</title>
		<link>http://jameschambers.com/2014/06/day-10-htmlhelper-extension-methods/</link>
		<pubDate>Tue, 10 Jun 2014 10:13:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3381</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>As we extracted our Person template we stubbed in a placeholder for a person’s avatar. Rather than creating our own system for uploading, resizing and storing the images, we’ll use a commonly used service on the internet called Gravatar to display one that many users might already have.</p> <h2>A Gravatar Extension Method</h2> <p>The format for Gravatar images is as follows:</p> <blockquote> <p><a href="http://www.gravatar.com/avatar/MD5HASH?options">http://www.gravatar.com/avatar/MD5HASH?options</a></p></blockquote> <p>The MD5 hash is computed based on their email address, and there are a few options worth noting. Below are the querystring parameters we’ll be using to generate our image.</p> <ul> <li><strong>Default Image</strong>: the image or type of image to use or generate if there isn’t a Gravatar for the specified email address.  <li><strong>Size</strong>: the size of the image to be returned, always a square.  <li><strong>Rating</strong>: users self-specify their rating and can use different avatars for different audiences.</li></ul> <p>We’ll represent those options in an class that we’ll use as a parameter.&nbsp; Create a Helpers folder, then create a class called GravatarOptions in it.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> GravatarOptions
{
    <span class="kwrd">public</span> <span class="kwrd">string</span> DefaultImageType { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> RatingLevel { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">int</span> Size { get; set; }

    <span class="kwrd">public</span> <span class="kwrd">class</span> DefaultImage
    {
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Default = <span class="str">""</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Http404 = <span class="str">"404"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> MysteryMan = <span class="str">"mm"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Identicon = <span class="str">"identicon"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> MonsterId = <span class="str">"monsterid"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Wavatar = <span class="str">"wavatar"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Retro = <span class="str">"retro"</span>;
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> Rating
    {
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> G = <span class="str">"g"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> PG = <span class="str">"pg"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> R = <span class="str">"r"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> X = <span class="str">"x"</span>;
    }


    <span class="kwrd">internal</span> <span class="kwrd">static</span> GravatarOptions GetDefaults()
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> GravatarOptions
        {
            DefaultImageType = GravatarOptions.DefaultImage.Retro,
            Size = 150,
            RatingLevel = GravatarOptions.Rating.G
        };
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>And finally, add a class called GravatarHelper, then add the following code:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> GravatarHelper
{
    <span class="kwrd">public</span> <span class="kwrd">static</span> HtmlString GravatarImage(<span class="kwrd">this</span> HtmlHelper htmlHelper, <span class="kwrd">string</span> emailAddress, GravatarOptions options = <span class="kwrd">null</span>)
    {
        <span class="kwrd">if</span> (options == <span class="kwrd">null</span>)
            options = GravatarOptions.GetDefaults();

        var imgTag = <span class="kwrd">new</span> TagBuilder(<span class="str">"img"</span>);

        emailAddress = <span class="kwrd">string</span>.IsNullOrEmpty(emailAddress) ? <span class="kwrd">string</span>.Empty : emailAddress.Trim().ToLower();

        imgTag.Attributes.Add(<span class="str">"src"</span>,
            <span class="kwrd">string</span>.Format(<span class="str">"http://www.gravatar.com/avatar/{0}?s={1}{2}{3}"</span>,
                GetMd5Hash(emailAddress),
                options.Size,
                <span class="str">"&amp;d="</span> + options.DefaultImageType,
                <span class="str">"&amp;r="</span> + options.RatingLevel
                )
            );

        <span class="kwrd">return</span> <span class="kwrd">new</span> HtmlString(imgTag.ToString(TagRenderMode.SelfClosing));
    }

    <span class="rem">// Source: http://msdn.microsoft.com/en-us/library/system.security.cryptography.md5.aspx</span>
    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">string</span> GetMd5Hash(<span class="kwrd">string</span> input)
    {
        <span class="kwrd">byte</span>[] data = MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(input));
        var sBuilder = <span class="kwrd">new</span> StringBuilder();
        <span class="kwrd">for</span> (<span class="kwrd">int</span> i = 0; i &lt; data.Length; i++)
        {
            sBuilder.Append(data[i].ToString(<span class="str">"x2"</span>));
        }
        <span class="kwrd">return</span> sBuilder.ToString();
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Extension methods accept the type you are extending as the first parameter and operate on the instance of the object, though they are defined as a static. This may help understand why you must pass the first parameter as the type you want to extend with the <em>this</em> modifier.&nbsp; You can then optionally any additional parameters that you will need to work with. For us, we’re just accepting the email address and a GravatarOptions instance.</p>
<p>In our helper, we create a tag builder for images, then build the URL based on the options the user has provided. If they haven’t provided the parameter, we simply load a set of defaults from our options class.</p>
<p><em><strong>Note</strong>: This is an overly-simplified version of <a href="https://github.com/AndrewFreemantle" target="_blank">Andrew Freemantle’s</a> work on his <a href="https://github.com/AndrewFreemantle/Gravatar-HtmlHelper" target="_blank">Gravatar-HtmlHelper</a> project on GitHub. Please visit his project for a more complete implementation.</em></p>
<h2>Using the Gravatar in our Person Template</h2>
<p>Our HTML helper will work like any other HTML helper, but we need to let the MVC Framework know where to find it. To do so, we’ll have to go and add the namespace to our Web.Config in our Views folder (located at Views\Web.Config). We could also add a using statement to each page where we want to use our helper, but adding it to the web config file makes it globally available throughout our views. Add the following to the Razor namespaces section in that file:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">namespace</span><span class="kwrd">="SimpleSite.Helpers"</span><span class="kwrd">/&gt;</span></pre>
<p>We’ll need an email address, so add the following property in Person.cs.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">string</span> EmailAddress { get; set; }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Next, jump back into your SimpleController class and update the instantiation of the person object so that they have a value in there:</p><pre class="csharpcode">var person = <span class="kwrd">new</span> Person
{
    FirstName = <span class="str">"Billy Jo"</span>,
    LastName = <span class="str">"McGuffery"</span>,
    BirthDate = <span class="kwrd">new</span> DateTime(1990, 6,1),
    LikesMusic = <span class="kwrd">true</span>,
    EmailAddress = <span class="str">"Bill@jo.com"</span>,
    Skills = <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;() { <span class="str">"Math"</span>, <span class="str">"Science"</span>, <span class="str">"History"</span> }
};</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Now, update your Person.cshtml template by replacing the image tag with the following:</p><pre class="csharpcode">@Html.GravatarImage(Model.EmailAddress)</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Then, pop into your browser to see the fruits of your effort!</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image18.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb3.png" width="380" height="135"></a></p>
<p>The gravatar image will be updated for any email address that you put in. You can try playing with the different defaults, your own email address or other options. </p>
<p><em><strong>Another note:</strong> I wouldn’t actually advocate creating a full implementation of an HtmlHelper method for Gravatars. The point of this exercise was to walk through a simple implementation, but there are much more complete helpers available on NuGet, ready to be deployed to your app. If you’d like to work on one of them, they are pretty much all open source, so feel free to contribute!</em></p>
<h2>Next Steps</h2>
<p>Great, now we have a basic extension method to make outputting a Gravatar much more simply, but we’re going to need to address our Index view. It’s typically a list of entities, with a link to a details view, not just a single item. Tomorrow, we’ll tackle getting that list set up and move the single view version to it’s own action and view.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3381</wp:post_id>
		<wp:post_date>2014-06-10 10:13:00</wp:post_date>
		<wp:post_date_gmt>2014-06-10 10:13:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-10-htmlhelper-extension-methods</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208636]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36221</wp:comment_id>
			<wp:comment_author><![CDATA[Jatin]]></wp:comment_author>
			<wp:comment_author_email>jats_ptl@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://stratus.net.nz</wp:comment_author_url>
			<wp:comment_author_IP>202.68.94.234</wp:comment_author_IP>
			<wp:comment_date>2014-07-03 23:18:45</wp:comment_date>
			<wp:comment_date_gmt>2014-07-03 23:18:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,

Got an error while working on this page. Following is the error detail:
<code>
Error	1	The name 'MD5' does not exist in the current context	C:\Users\jpatil\Desktop\VS 2013\Bootstrasp\Web Application 1\Web Application 1\Helpers\GravatarHelper.cs	36	27	Web Application 1
</code>
Thanks,
Jatin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812799]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36301</wp:comment_id>
			<wp:comment_author><![CDATA[Charlie Parker]]></wp:comment_author>
			<wp:comment_author_email>charlie.parker@latitude40.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.latitude40.com</wp:comment_author_url>
			<wp:comment_author_IP>174.51.202.107</wp:comment_author_IP>
			<wp:comment_date>2014-07-06 21:06:56</wp:comment_date>
			<wp:comment_date_gmt>2014-07-06 21:06:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You must also add the following using statements:

using System.Web.Mvc
using System.Text
using System.Security.Cryptography

to the new GravatarHelper class.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812803]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36311</wp:comment_id>
			<wp:comment_author><![CDATA[Charlie Parker]]></wp:comment_author>
			<wp:comment_author_email>charlie.parker@latitude40.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.latitude40.com</wp:comment_author_url>
			<wp:comment_author_IP>174.51.202.107</wp:comment_author_IP>
			<wp:comment_date>2014-07-06 21:09:31</wp:comment_date>
			<wp:comment_date_gmt>2014-07-06 21:09:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Typo - missing the word "add":

You can then optionally any additional parameters that...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812801]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38071</wp:comment_id>
			<wp:comment_author><![CDATA[Sanyam Sindhi]]></wp:comment_author>
			<wp:comment_author_email>sanyam9999@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.111.224.207</wp:comment_author_IP>
			<wp:comment_date>2014-10-09 13:33:58</wp:comment_date>
			<wp:comment_date_gmt>2014-10-09 13:33:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,

Got an error- "CS0246: The type or namespace name 'SimpleSite' could not be found (are you missing a using directive or an assembly reference?)"

Please help...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812802]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38721</wp:comment_id>
			<wp:comment_author><![CDATA[Alex Moon]]></wp:comment_author>
			<wp:comment_author_email>alex.moon@email.com</wp:comment_author_email>
			<wp:comment_author_url>http://haha</wp:comment_author_url>
			<wp:comment_author_IP>109.232.176.4</wp:comment_author_IP>
			<wp:comment_date>2014-10-30 22:17:44</wp:comment_date>
			<wp:comment_date_gmt>2014-10-30 22:17:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Most comments seem to be "This is wrong, that is wrong". Ok, picking up on a few mistakes here or there, and it is helpful to the author and readers of the site, but no comments on how good this site is. Congratulations. I've read many MVC getting started sites and most follow the same formula of "Model, View, Controller, You're Done!". This site seems to skim that stuff (Brill) and gets into some really useful stuff. It's brilliant. more More MORE! please :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812805]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39751</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan]]></wp:comment_author>
			<wp:comment_author_email>jonathan_twite@yahoo.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.150.167.35</wp:comment_author_IP>
			<wp:comment_date>2015-03-17 13:52:29</wp:comment_date>
			<wp:comment_date_gmt>2015-03-17 13:52:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi

I have been working through these tutorials and everything has been going great but I have an odd problem - The image is not showing.  I have inspected the HTML and copied the img tag's src into a browser and get the correct image returned, but it is not showing in my webpage...

Any ideas?

I am using IE 11.0 on Windows 8.1]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812800]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39781</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-17 14:24:20</wp:comment_date>
			<wp:comment_date_gmt>2015-03-17 14:24:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jonathan, the only thing I can think to do without source is to also check the computed styles on the elements in question. This will tell you if there is some freak style that snuck in somehow that is pushing your contents out of the drawable boundaries, hiding the image or container, or otherwise. Best of luck. -jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39751</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812800]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812943]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40111</wp:comment_id>
			<wp:comment_author><![CDATA[Steini]]></wp:comment_author>
			<wp:comment_author_email>steini24@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>46.22.97.106</wp:comment_author_IP>
			<wp:comment_date>2015-05-02 19:34:55</wp:comment_date>
			<wp:comment_date_gmt>2015-05-02 19:34:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["SimpleSite" is just the project name, yours is probably different.  It's just telling the project where the helpers classes are located.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38071</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812802]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812942]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42031</wp:comment_id>
			<wp:comment_author><![CDATA[playack]]></wp:comment_author>
			<wp:comment_author_email>s_sua_@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.108.233.164</wp:comment_author_IP>
			<wp:comment_date>2015-10-28 17:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-28 17:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[VS can be so cancer, After I updated my Person.cshtml with @Html.GravatarImage(Model.EmailAddress), it was telling me there was an error but I couldn't find anything wrong... Ran and it was fine, only when I closed the Person.cshtml and reopened it stopped showing the underline red above "GravatarImage".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2331482101]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42602</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Santanna]]></wp:comment_author>
			<wp:comment_author_email>nathansantanna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.55.240.5</wp:comment_author_IP>
			<wp:comment_date>2015-11-18 16:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-18 16:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome tutorial]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42611</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Santanna]]></wp:comment_author>
			<wp:comment_author_email>nathansantanna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.55.240.5</wp:comment_author_IP>
			<wp:comment_date>2015-11-18 16:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-18 16:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome tutorial]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2366447420]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 11: Realistic Test Data for Our View</title>
		<link>http://jameschambers.com/2014/06/day-11-realistic-test-data-for-our-view/</link>
		<pubDate>Wed, 11 Jun 2014 10:04:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3441</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>If a controller deals with a certain type of data – say, entities of the Person type – the index will typically contain a collection of data of that type, or perhaps some other related interface (such as search or filter capabilities, or partial views of related data). Let’s add a PersonController and get a feel for what that looks like.</p> <h2>Creating the Person Controller</h2> <p>Back on <a href="http://jameschambers.com/2014/06/day-3-adding-a-controller-and-view/">Day 3</a> we added a SimpleController to our project. Use the same approach to create a new, empty controller now called PersonController.&nbsp; The Index method is the only one in the class, but it’s going to need some data.</p> <h2>Generating Realistic Test Data</h2> <p>Now, we have a couple of options to get data. We can hand-bomb 25 (or 5 or 10 or 100) entries into some kind of text file. We can new up dozens of objects with copy &amp; paste and have 60 of the exact same person. Or, we can use a test data generator while we flush out our application and get realistic test data with minimum effort.&nbsp; Let’s try that!</p> <p>Go to your Package Manager Console. If you don’t see that window, typically in the bottom of Visual Studio in one of the tabs. If you still don’t see it, try opening it from View –&gt; Other Windows –&gt; Package Manager Console.</p> <p>Now, let’s install a package that will generate our data for us, called AngelaSmith. Type the following command in the Package Manager Console:</p><pre class="csharpcode">Install-Package AngelaSmith -Version 1.0.1</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You should see confirmation that the package is installed.</p>
<h2>Configuring AngelaSmith</h2>
<p>We’ll need a place to store the data that is generated, so at the class level, add a static field.</p><pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">static</span> ICollection&lt;Person&gt; _people;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We’re making it static so that we don’t have to recreate the data on each page load, just when the app starts up.&nbsp; Now add a static controller to configure the data generator.</p><pre class="csharpcode"><span class="kwrd">static</span> PersonController()
{
    _people = Angie.Configure&lt;Person&gt;()
        .Fill(p =&gt; p.BirthDate)
        .AsPastDate()
        .Fill(p =&gt; p.LikesMusic)
        .WithRandom(<span class="kwrd">new</span> List&lt;<span class="kwrd">bool</span>&gt;(){<span class="kwrd">true</span>, <span class="kwrd">true</span>, <span class="kwrd">true</span>, <span class="kwrd">false</span>, <span class="kwrd">false</span>})
        .Fill(p =&gt; p.Skills, () =&gt; <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;() { <span class="str">"Math"</span>, <span class="str">"Science"</span>, <span class="str">"History"</span> })
        .MakeList&lt;Person&gt;(20);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>It might seem like a lot is going on, but it’s actually quite straightforward. First is a call to the Configure method to enter configuration mode.</p><pre class="csharpcode">_people = Angie.Configure&lt;Person&gt;()</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Then we have three Fill statements that demonstrate a few of the ways that we can generate data. For example, you can get a date from the past, fill a property with a random value (60% of the time LikesMusic will be true), or, here, use a lambda to set up an anonymous function to populate the value.</p><pre class="csharpcode">.Fill(p =&gt; p.Skills, () =&gt; <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;() { <span class="str">"Math"</span>, <span class="str">"Science"</span>, <span class="str">"History"</span> })</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Finally, we call the MakeList method to get the list of 20 entities. By default, it will generate 25 but you can specify however many you like.</p><pre class="csharpcode">.MakeList&lt;Person&gt;(20);</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Adding the Index View</h2>
<p>We’ll need to pass the view some data, when it’s ready, so let’s now update our Index method so that it does that.</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Index()
{
    <span class="kwrd">return</span> View(_people);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You’re going to like this part. Add an empty View to the project by right-clicking on the Index method of the Person Controller. Then add the following code:</p><pre class="csharpcode">@model IEnumerable<span class="kwrd">&lt;</span><span class="html">SimpleSite.Models.Person</span><span class="kwrd">&gt;</span>
     
@Html.DisplayForModel(Model)</pre>
<p>Yeup! That’s it! Run your site to see your list of peeps!</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image19.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb5.png" width="312" height="354"></a> 
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>Next Steps</h2>
<p>Now that we’ve got some data to work with, let’s start exploring the parts of Bootstrap that can be easily used to add some zing to our site. Tomorrow, we’ll create a form that can be used to search our people.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3441</wp:post_id>
		<wp:post_date>2014-06-11 10:04:00</wp:post_date>
		<wp:post_date_gmt>2014-06-11 10:04:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-11-realistic-test-data-for-our-view</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208665]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35791</wp:comment_id>
			<wp:comment_author><![CDATA[Jesus]]></wp:comment_author>
			<wp:comment_author_email>jrodrigoav@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.188.176.230</wp:comment_author_IP>
			<wp:comment_date>2014-06-24 22:34:12</wp:comment_date>
			<wp:comment_date_gmt>2014-06-24 22:34:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Keep getting KeyNotFoundException when calling Person/Index,  other than starting from empty website with MVC its pretty much verbatim from the blog posts. Any tips appreciated. Thanks in advance.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812826]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35801</wp:comment_id>
			<wp:comment_author><![CDATA[Alan Rutter]]></wp:comment_author>
			<wp:comment_author_email>alangrutter@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>210.55.21.180</wp:comment_author_IP>
			<wp:comment_date>2014-06-24 23:33:34</wp:comment_date>
			<wp:comment_date_gmt>2014-06-24 23:33:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great series but I am having trouble experimenting with AngelaSmith. I installed the latest version (1.1.0) from Nuget but the call to Configure is throwing the following exception

System.Collections.Generic.KeyNotFoundException was unhandled by user code
  HResult=-2146232969
  Message=The given key was not present in the dictionary.
  Source=mscorlib
  StackTrace:
       at System.Collections.Generic.Dictionary`2.get_Item(TKey key)
       at Angela.Core.Maggie.SetMinInt(Int32 min)
       at Angela.Core.Angie.Reset()
       at Angela.Core.Angie.Configure[T]()

I can get FastList to run and it creates 25 entries but non of the properties are set, they are all null. What am I missing?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812823]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35931</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 01:29:20</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 01:29:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Alan, thanks for following along. There are some outstanding issues with the latest version of AngelaSmith, which is why I hijacked an earlier version in my post. I'll move on to getting a fix in after I wrap up the series. -jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35801</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812823]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812836]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35961</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 01:36:39</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 01:36:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, nothing coming to mind. Are there any more details in the error? Could you try to set a few breakpoints?

Cheers. -jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35791</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812826]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812837]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36271</wp:comment_id>
			<wp:comment_author><![CDATA[Wellington Soares]]></wp:comment_author>
			<wp:comment_author_email>wellingtonpsoares@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>191.33.1.159</wp:comment_author_IP>
			<wp:comment_date>2014-07-04 19:49:28</wp:comment_date>
			<wp:comment_date_gmt>2014-07-04 19:49:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, Thanks for giving me the opportunity to learn ASP.Net MVC w/ bootStrap.

I'm having trouble in this activity on 11day: 
Error:
When I open the url: "Simple/Index" works, but "Person/Index" not.
Details:
Additional information: The partial view '_StringCollection' was not found or no view engine supports the searched locations.

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812820]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36321</wp:comment_id>
			<wp:comment_author><![CDATA[Charlie Parker]]></wp:comment_author>
			<wp:comment_author_email>charlie.parker@latitude40.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.51.202.107</wp:comment_author_IP>
			<wp:comment_date>2014-07-07 00:38:08</wp:comment_date>
			<wp:comment_date_gmt>2014-07-07 00:38:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[On day 6, you said, "[create a] new file in the Views\Simple folder called _StringCollection.cshtml."

When I did as instructed above for this day, it could not find this partial view.  I had to move the partial view to the "Shared" folder.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812818]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36331</wp:comment_id>
			<wp:comment_author><![CDATA[Charlie Parker]]></wp:comment_author>
			<wp:comment_author_email>charlie.parker@latitude40.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.51.202.107</wp:comment_author_IP>
			<wp:comment_date>2014-07-07 00:41:14</wp:comment_date>
			<wp:comment_date_gmt>2014-07-07 00:41:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This was not stated above for this day, but you have to add the following usings to the person controller:

using Angela.Core;
using SimpleWebApp.Models;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812827]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36371</wp:comment_id>
			<wp:comment_author><![CDATA[Jawhar rajan]]></wp:comment_author>
			<wp:comment_author_email>jawaharrajan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.235.234.177</wp:comment_author_IP>
			<wp:comment_date>2014-07-08 02:53:41</wp:comment_date>
			<wp:comment_date_gmt>2014-07-08 02:53:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I needed to add the _StringCollection.cshtml to the Person view folder as well.
Can this be a shared resources by placing it in the Shared\DisplayTemplates?

Thanks for this good guide to using MVC and Bootstrap]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812821]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36741</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:39:32</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:39:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would actually just put it in the Views\Shared directory, that should suffice.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36371</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812821]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812835]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36761</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:44:00</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:44:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey there!

Check out day 6 where we add and complete the code for String Collection templates.

http://jameschambers.com/2014/06/day-6-reusing-design-elements-on-multiple-pages/

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36271</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812820]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812838]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37121</wp:comment_id>
			<wp:comment_author><![CDATA[Jesus]]></wp:comment_author>
			<wp:comment_author_email>jacedo@dotnet.com.mx</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.188.176.230</wp:comment_author_IP>
			<wp:comment_date>2014-07-22 15:58:26</wp:comment_date>
			<wp:comment_date_gmt>2014-07-22 15:58:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just read about the specific version, I guess that was my problem, will try again with 1.0.1.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35961</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812837]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812972]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38711</wp:comment_id>
			<wp:comment_author><![CDATA[ColmC]]></wp:comment_author>
			<wp:comment_author_email>colmcasey@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.44.230.98</wp:comment_author_IP>
			<wp:comment_date>2014-10-30 20:40:48</wp:comment_date>
			<wp:comment_date_gmt>2014-10-30 20:40:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi.. Great tutorial. It's really helping to demystify MVC.

On this days instructions you said
<blockquote cite="We’ll need a place to store the data that is generated, so at the class level, add a static field.">

Where exactly does the static field go? Also where does the next code snippet after that go?

Thanks.

Also,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812822]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39031</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2014-12-03 22:28:08</wp:comment_date>
			<wp:comment_date_gmt>2014-12-03 22:28:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi ColmC, it looks like your question was possibly chopped up. Can you repost the code in question?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38711</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812822]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812839]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39331</wp:comment_id>
			<wp:comment_author><![CDATA[Hugo C.]]></wp:comment_author>
			<wp:comment_author_email>hcchavez@yahoo.com.mx</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.231.139.34</wp:comment_author_IP>
			<wp:comment_date>2015-01-17 01:23:57</wp:comment_date>
			<wp:comment_date_gmt>2015-01-17 01:23:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excelente,  Gracias.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812828]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39541</wp:comment_id>
			<wp:comment_author><![CDATA[Alex]]></wp:comment_author>
			<wp:comment_author_email>alexdanna89@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.103.109.6</wp:comment_author_IP>
			<wp:comment_date>2015-02-18 14:33:56</wp:comment_date>
			<wp:comment_date_gmt>2015-02-18 14:33:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, 
I try to follow this tutorial but i have a problem. When i write the code of the static class "PersonController" , i have a error because the metod don't have a type return, and then after installing a package angelasmith , you say 'so at the class level, add a static field', but in which class i must put the code? 

ps. sorry for my english , i'm italian ;)
pss. Thanks for the tutorial!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812824]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39571</wp:comment_id>
			<wp:comment_author><![CDATA[Vu Pham]]></wp:comment_author>
			<wp:comment_author_email>hoangvu1104@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.15.147.99</wp:comment_author_IP>
			<wp:comment_date>2015-02-23 02:09:02</wp:comment_date>
			<wp:comment_date_gmt>2015-02-23 02:09:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I got this error when running the code in day 11.(At line 23)

The given key was not present in the dictionary. 
  Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. 
 Exception Details: System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.
Source Error: 
Line 21:         static PersonController()
Line 22:         {
Line 23:             _people = Angie.Configure()
Line 24:                 .Fill(p =&gt; p.BirthDate)
Line 25:                 .AsPastDate()
 
Please help me what the error?
Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812825]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39691</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-15 22:07:15</wp:comment_date>
			<wp:comment_date_gmt>2015-03-15 22:07:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is it possible that you missed my note on the version of AngelaSmith?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39571</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812825]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812833]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39701</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-15 22:08:42</wp:comment_date>
			<wp:comment_date_gmt>2015-03-15 22:08:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In this case, the class where you would put it is in the PersonController. Hope this helps!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39541</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812824]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812834]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41341</wp:comment_id>
			<wp:comment_author><![CDATA[nohwnd]]></wp:comment_author>
			<wp:comment_author_email>me@jakubjares.com</wp:comment_author_email>
			<wp:comment_author_url>http://jakubjares.com/</wp:comment_author_url>
			<wp:comment_author_IP>194.213.192.9</wp:comment_author_IP>
			<wp:comment_date>2015-08-14 09:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-14 09:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Helped me as well. Maybe you could point out that installing the exact version is needed because of a pending issue.



(thanks for the great series btw, doing it in 2 days to refresh some of my MVC-fu and to learn a bit more about bootstrap)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35931</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812836]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2193498067]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42041</wp:comment_id>
			<wp:comment_author><![CDATA[playack]]></wp:comment_author>
			<wp:comment_author_email>s_sua_@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.108.233.164</wp:comment_author_IP>
			<wp:comment_date>2015-10-28 17:57:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-28 17:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Someone already asked this but I don't think you gave the correct answer or I'm just dumb. 

At "Configuring AngelaSmith", you say :
 "We’ll need a place to store the data that is generated, so at the class level, add a static field.

private static ICollection _people;"



But I don't think it can be PersonController class
Could you be more specific?
Thanks,
Great Tutorial]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2331546842]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42171</wp:comment_id>
			<wp:comment_author><![CDATA[مصعب صالح]]></wp:comment_author>
			<wp:comment_author_email>mussab.riani@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.252.137.93</wp:comment_author_IP>
			<wp:comment_date>2015-11-04 18:59:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-04 18:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had (System.Collections.Generic.KeyNotFoundException)
any one can help me]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2342877262]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42381</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 21:06:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 21:06:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can't find the 1.0.1 version of AngelaSmith. Can you help?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39691</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812833]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352438766]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42391</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 21:06:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 21:06:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you ever figure this out? I can't find the 1.0.1 version of AngelaSmith]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39571</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812825]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352439239]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42401</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 21:07:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 21:07:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[HI there! Did you ever get a response to this AngelaSmith problem?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41341</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2193498067]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352440361]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42411</wp:comment_id>
			<wp:comment_author><![CDATA[nohwnd]]></wp:comment_author>
			<wp:comment_author_email>me@jakubjares.com</wp:comment_author_email>
			<wp:comment_author_url>http://jakubjares.com/</wp:comment_author_url>
			<wp:comment_author_IP>194.213.192.9</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 15:07:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 15:07:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I did not. When I use Angela I am always using the version 1.0.0 to avoid the problem.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42401</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352440361]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353555877]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42421</wp:comment_id>
			<wp:comment_author><![CDATA[nohwnd]]></wp:comment_author>
			<wp:comment_author_email>me@jakubjares.com</wp:comment_author_email>
			<wp:comment_author_url>http://jakubjares.com/</wp:comment_author_url>
			<wp:comment_author_IP>194.213.192.9</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 15:10:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 15:10:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like they renamed the package to GenFu and started to support it again. http://genfu.io/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42401</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352440361]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353561253]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42431</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 16:44:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 16:44:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was able to get the 1.0.1 version as a separate *.nupkg file, and was able to install it. Thanks for the response!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42411</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353555877]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353732303]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42441</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 16:44:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 16:44:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wish they'd mentioned that in their old website, give people some clue. Thanks again!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42421</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353561253]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353732769]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42621</wp:comment_id>
			<wp:comment_author><![CDATA[The Silent Observer]]></wp:comment_author>
			<wp:comment_author_email>hemantsinghsrm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.223.191.30</wp:comment_author_IP>
			<wp:comment_date>2015-11-19 06:38:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-19 06:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really great blog. The simplicity with which you have explained things is really praiseworthy. Utterly useful for anyone, from novice to expert.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2367739039]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42631</wp:comment_id>
			<wp:comment_author><![CDATA[The Silent Observer]]></wp:comment_author>
			<wp:comment_author_email>hemantsinghsrm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.223.191.30</wp:comment_author_IP>
			<wp:comment_date>2015-11-19 06:40:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-19 06:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@playack:disqus It is the PersonController class.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42041</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2331546842]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2367740212]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 12: Implement Search Using Inline Forms and AJAX</title>
		<link>http://jameschambers.com/2014/06/day-12/</link>
		<pubDate>Thu, 12 Jun 2014 22:18:27 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3541</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>It had to happen; at some point we were going to need to let our users enter some data! Well, that time has come, so let’s start by adding a handy-dandy search form to our Person page.</p> <p>Forms will need a few cues on how to properly render themselves and take part in Booststrap’s style party of awesome. Let’s get a search form going and start filtering our results.</p> <h2>Adding the Search Bar</h2> <p>There are actually a few styles of forms that you can get going. A standard styling gives you label-over-control type layout, horizontal forms give you label-beside-control layout and inline styling gives you controls without labels side-by-each continuously in the row. That’s the one we’ll go with to generate our simple search form:</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image20.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb6.png" width="294" height="57"></a></p> <p>Create a partial view under the Views\Person folder. You can make it an empty one, and call it _PersonSearchForm.cshtml.&nbsp; Paste in the following code:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">hr</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="container"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="pull-right"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">class</span><span class="kwrd">="form-inline"</span> <span class="attr">role</span><span class="kwrd">="form"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="form-group"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">class</span><span class="kwrd">="sr-only"</span> <span class="attr">for</span><span class="kwrd">="search-text"</span><span class="kwrd">&gt;</span>Email address<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="text"</span> <span class="attr">class</span><span class="kwrd">="form-control"</span> <span class="attr">id</span><span class="kwrd">="search-text"</span> <span class="attr">placeholder</span><span class="kwrd">="Enter Search Text"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-success"</span> <span class="attr">id</span><span class="kwrd">="search-btn"</span><span class="kwrd">&gt;</span>Search<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We have a few things going on here:</p>
<ul>
<li>The HR tag is just a style thing and not required. It makes the search form look more “balanced” vertically on the form. 
<li>There is a DIV that acts as a container, keeping our content separate from the rest of the page. It is a wrapper for a “pull-right” styled DIV that moves our search bar over to the right hand side of the page. 
<li>The form is given a class of “form-inline”. This is the first important part of making our controls and labels show up correctly. 
<li>Inside that FORM element we have a DIV with a class of “form-group”. This lets Bootstrap know (or rather, the browser through Bootstrap’s CSS) that these controls are related in some way. Specifically, we have a label for an input. 
<li>Because this is an “inline” form, we’re using the “sr-only” class on the label to eat the display and keep the visuals tidy. “SR” stands for “Screen Reader”; this is an accessibility tag.</li></ul>
<p>When the form data comes calling, we’re going to need someone to answer the phone on the controller side.</p>
<h2>The Controller’s Search Method</h2>
<p>In your PersonController class, add the following public method:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult SearchPeople(<span class="kwrd">string</span> searchText)
{
    var term = searchText.ToLower();
    var result = _people
        .Where(p =&gt;
            p.FirstName.ToLower().Contains(term) ||
            p.LastName.ToLower().Contains(term) 
        );

    <span class="kwrd">return</span> PartialView(<span class="str">"_SearchPeople"</span>, result);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This accepts a string parameter and finds any matches where FirstName or LastName match what the user entered, then it returns via a call to PartialView to generate the result. We’re using a partial because we don’t want to have to reload the entire page each time the user clicks the search button.</p>
<blockquote>
<p><strong>A quick note</strong>: the astute reader will note that that this simplified method of search won’t pass the <a href="http://www.moserware.com/2008/02/does-your-code-pass-turkey-test.html">Turkey Test</a>. If you work with different cultures, this is a great side-read, and you’ll need to approach the problem in a different way.</p></blockquote>
<p>Later in the series we’ll cover best practices around accessing and filtering data, but this approach will suffice for now, using the local static collection of data that we built <a href="http://jameschambers.com/2014/06/day-11-realistic-test-data-for-our-view/">yesterday</a>.</p>
<p>When we call PartialView the MVC Framework doesn’t attempt to resolve a layout, so we just get the meat that lives in the cshtml file itself and as processed by the view engine. Rendered via the controller, we have to pass in our data as a parameter. If you were rendering a partial via a View (with an HtmlHelper) the partial could ‘inherit’ the parent page’s model and use that to render your content. The partial we need should be located in Views\Person\ and called _SearchPeople.cshtml and the code looks like the following:</p><pre class="csharpcode">@model IEnumerable<span class="kwrd">&lt;</span><span class="html">SimpleSite.Models.Person</span><span class="kwrd">&gt;</span>

@Html.DisplayForModel(Model)

@if (!Model.Any())
{
    <span class="kwrd">&lt;</span><span class="html">h3</span><span class="kwrd">&gt;</span>Sorry!<span class="kwrd">&lt;/</span><span class="html">h3</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>Looks like there's no results for that person.<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Partial in place, controller set up to search…off to the core view.</p>
<h2>Updating the View</h2>
<p>Back in Views\Person\Index.cshtml there isn’t a lot we have to do to get our form to display. Update the code so it reads as follows:</p><pre class="csharpcode">@model IEnumerable<span class="kwrd">&lt;</span><span class="html">SimpleSite.Models.Person</span><span class="kwrd">&gt;</span>

@{ Html.RenderPartial("_PersonSearchForm"); }

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="people-data"</span><span class="kwrd">&gt;</span>
    @Html.DisplayForModel(Model)
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>I have updated the view from yesterday by wrapping the data with a DIV that acts as a container. We’ll use that later when we AJAX up the page. Press CTRL+F5 to see the updated view in action.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image21.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb8.png" width="244" height="172"></a></p>
<p>This handles the display aspect, but we need some script in place to handle the button click and make the AJAX call, finally updating the page with the search results. Add a script section to the bottom of the page as follows:</p><pre class="csharpcode">@section scripts
{
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;</span>
        $(<span class="kwrd">function</span> () {
            <span class="rem">// it's lonely here...</span>
        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<blockquote>
<p><strong>Today’s Bonus Content</strong>: Sections are defined in the layout page that is used by your view. You can find them in Views\Shared\_Layout.cshtml. These sections can be required or optional per your needs. The default template defines only the scripts section, but you may often wish to include something in the page header or footer. Oooo! Sounds like another blog post!</p></blockquote>
<p>Now the script doesn’t do anything quite yet, except give us a place to land. What you see above is called a “self-executing anonymous method”, which is a good term to know if you want to sound smart around your boss. Basically, jQuery will make sure any code in this block is executed in a cross-browser friendly way <em>after</em> the page is finished loading. </p>
<p>Replace that lonely comment with the following code:</p><pre class="csharpcode">$(<span class="str">"#search-btn"</span>).click(<span class="kwrd">function</span> () {
    <span class="kwrd">var</span> searchTerm = $(<span class="str">"#search-text"</span>).val();
    $.get(<span class="str">"SearchPeople"</span>, { searchText: searchTerm })
        .success(<span class="kwrd">function</span>(data) {
        $(<span class="str">"#people-data"</span>).html(data);
    });
});</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>If you’re not familiar with JavaScript or the patterns that jQuery uses, here’s little breakdown of what is happening:</p>
<ul>
<li>A click event handler is setup for the element in the DOM that has an ID of “search-btn”. 
<li>The event handler is an anonymous method that invokes the jQuery get() method, passing in the action that we’re targeting and the data that we’re trying to pass in. 
<li>The data we’re passing in is read from the form and assigned to the searchText key 
<li>When you pass in parameters from calls like this, you need to make sure spelling and case are identical to avoid rapid hair loss. And null values. 
<li>The get() method follows the “promise” pattern, and you get to register a callback when the search is completed. Here, we use the success callback. 
<li>Our anonymous callback is invoked when the AJAX completes successfully and it updates the data container (“people-data”) with the HTML that is returned from our controller.</li></ul>
<p>Try typing in some search terms from your Person\Index page.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image22.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb9.png" width="244" height="147"></a></p>
<p>Bazinga!</p>
<h2>Next Steps</h2>
<p>Our search form looks fine but wouldn’t be ideal for data entry. Tomorrow we’ll look at the other two variants of forms and wire up a view (and our controller) to allow users to create new people.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3541</wp:post_id>
		<wp:post_date>2014-06-12 22:18:27</wp:post_date>
		<wp:post_date_gmt>2014-06-12 22:18:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-12</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208705]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35472</wp:comment_id>
			<wp:comment_author><![CDATA[Jp]]></wp:comment_author>
			<wp:comment_author_email>jpecson90210@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.54.58.140</wp:comment_author_IP>
			<wp:comment_date>2014-06-14 02:24:26</wp:comment_date>
			<wp:comment_date_gmt>2014-06-14 02:24:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is awesome. I want more! :)
I hope you will continue this series of tutorials because it is very helpful to me as beginner.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812866]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35501</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-14 03:22:00</wp:comment_date>
			<wp:comment_date_gmt>2014-06-14 03:22:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks JP, hope you continue to get something out of this! Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35472</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812866]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812989]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35721</wp:comment_id>
			<wp:comment_author><![CDATA[Bart]]></wp:comment_author>
			<wp:comment_author_email>bart@bartmax.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.49.13.182</wp:comment_author_IP>
			<wp:comment_date>2014-06-23 10:24:18</wp:comment_date>
			<wp:comment_date_gmt>2014-06-23 10:24:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[submit function should be on the form of the search of type GET and not on a button click.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812868]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36281</wp:comment_id>
			<wp:comment_author><![CDATA[Wagner]]></wp:comment_author>
			<wp:comment_author_email>wagmelo1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.121.97.161</wp:comment_author_IP>
			<wp:comment_date>2014-07-06 03:02:58</wp:comment_date>
			<wp:comment_date_gmt>2014-07-06 03:02:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mister James, thank's for your outstanding tutorial.
I think we missed a step here. The code for the PartialView _SearchPeople.
I think these two lines below will be enough:
@model IEnumerable
@Html.DisplayForModel(Model)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812864]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36351</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-07-07 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/notes-de-lecture/reading-notes-2014-07-07/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-07 17:24:28</wp:comment_date>
			<wp:comment_date_gmt>2014-07-07 17:24:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 12: Implement Search Using Inline Forms and AJAX (James Chambers) &#8211; Great tutorial to build a Ajax control in an Asp.Net MVC context. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36381</wp:comment_id>
			<wp:comment_author><![CDATA[Jawahar Rajan]]></wp:comment_author>
			<wp:comment_author_email>jawaharrajan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.235.234.177</wp:comment_author_IP>
			<wp:comment_date>2014-07-08 03:46:02</wp:comment_date>
			<wp:comment_date_gmt>2014-07-08 03:46:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[James,
Do we need to a add a new partial called _SearchPeople.cshtml for  the search to work?

thanks
Jawahar]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812862]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36391</wp:comment_id>
			<wp:comment_author><![CDATA[Wellington Soares]]></wp:comment_author>
			<wp:comment_author_email>wellingtonpsoares@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.115.154.226</wp:comment_author_IP>
			<wp:comment_date>2014-07-09 12:21:32</wp:comment_date>
			<wp:comment_date_gmt>2014-07-09 12:21:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, I include ".ToList() " in the method search, and I continue without success and i have not a searchPeople view. What I do?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812865]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36401</wp:comment_id>
			<wp:comment_author><![CDATA[Will]]></wp:comment_author>
			<wp:comment_author_email>williamfentress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>38.104.61.34</wp:comment_author_IP>
			<wp:comment_date>2014-07-09 21:54:37</wp:comment_date>
			<wp:comment_date_gmt>2014-07-09 21:54:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for putting all of this together. The material is great. I'm having trouble, though, getting the search functionality to work. Do I need to add a Partial View named _SearchPeople?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812861]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36721</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:33:58</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:33:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, that's correct. For the search you need the partial named _SearchPeople.cshtml.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36401</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812861]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812988]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36731</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:38:52</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:38:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, apologies! I've updated the post to include the code for the partial!

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36381</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812862]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812991]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36751</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:40:25</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:40:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Wagner, you're correct, those two lines would do it! I've updated the post and included a catch to show when there aren't any records to display as well.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36281</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812864]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812870]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36791</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:51:26</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:51:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Wellington,

Each day builds off the previous work in the series, so you'll need to make sure you've got all the code in from the days prior. I have folks emailing from day 24+ with working code, so I believe you've likely missed a day. Would that make sense? 

If not are you getting an error I can help with?

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36391</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812865]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812993]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37041</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:46:01</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:46:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bart, I agree that is a good way to do it when you want to submit immediately, we're demonstrating the use of an AJAX call here through the use of the jQuery.get() method.  So the request is made via the GET verb, just not through the HTML form (which doesn't inherently provide a mechanism for AJAX).

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35721</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812868]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812992]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37281</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Coulton]]></wp:comment_author>
			<wp:comment_author_email>simon@simoncoulton.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.246.144.241</wp:comment_author_IP>
			<wp:comment_date>2014-07-31 14:53:01</wp:comment_date>
			<wp:comment_date_gmt>2014-07-31 14:53:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When the search button is clicked all 20 person records are still returned. When I debug I see a message saying "_people.Where(p =&gt; p.FirstName.ToLower().Contains(term) || p.LastName.ToLower().Contains(term))	Expression cannot contain lambda expressions"

Any ideas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812863]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37321</wp:comment_id>
			<wp:comment_author><![CDATA[Wagner]]></wp:comment_author>
			<wp:comment_author_email>wagmelo1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.121.97.161</wp:comment_author_IP>
			<wp:comment_date>2014-08-09 20:37:07</wp:comment_date>
			<wp:comment_date_gmt>2014-08-09 20:37:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, I noticed that if the URL not ends with a slash "/", the jQuery.get()  method will not work properly, because de final URL will be something like: http://localhost:portNum/SearchPeople?searchText=]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812858]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37371</wp:comment_id>
			<wp:comment_author><![CDATA[Wagner]]></wp:comment_author>
			<wp:comment_author_email>wagmelo1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.121.97.161</wp:comment_author_IP>
			<wp:comment_date>2014-08-16 18:23:00</wp:comment_date>
			<wp:comment_date_gmt>2014-08-16 18:23:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I could solve the problem just changing the jQuery.get method From this:
$.get("SearchPeople", { searchText: searchTerm })
To this:
$.get("/Person/SearchPeople", { searchText: searchTerm })]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37321</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812858]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812867]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37781</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:28:41</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:28:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 12:&nbsp;Implement Search Using Inline Forms and AJAX [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38621</wp:comment_id>
			<wp:comment_author><![CDATA[Marcel Burkhard]]></wp:comment_author>
			<wp:comment_author_email>burki94@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.138.56.182</wp:comment_author_IP>
			<wp:comment_date>2014-10-27 20:55:00</wp:comment_date>
			<wp:comment_date_gmt>2014-10-27 20:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James

as already mentioned by someone else, the search button could and maybe should be an input of type submit.

It's actually a fairly simple change:

Call preventDefault() on the click event which will stop the form from being submitted the traditional way.
<code>
$("#search-btn").click(function (e) {
                e.preventDefault();
                //....
</code>

and change the button to an input
<code>
Search
</code>
<code>

</code>

Now I can use either the button or the Enter Key in the search form (enter key will put focus on the button and press it).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812869]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38951</wp:comment_id>
			<wp:comment_author><![CDATA[DE]]></wp:comment_author>
			<wp:comment_author_email>dev@drewspring.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.102.137.150</wp:comment_author_IP>
			<wp:comment_date>2014-11-25 00:07:41</wp:comment_date>
			<wp:comment_date_gmt>2014-11-25 00:07:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Quick Question - I am really confused.  Index.cshtml has no reference (even in the code on github) to actually including _SearchPeople.cshtml.  That file seems to be an orphan and without it nothing is updating?

Oversight or am I just missing something stupidly obvious.

Thanks and great series!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812860]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38961</wp:comment_id>
			<wp:comment_author><![CDATA[DE]]></wp:comment_author>
			<wp:comment_author_email>dev@drewspring.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.102.137.150</wp:comment_author_IP>
			<wp:comment_date>2014-11-25 01:46:39</wp:comment_date>
			<wp:comment_date_gmt>2014-11-25 01:46:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I changed the index code to the following format and things now work.: 

    @Html.DisplayForModel(Model)


to:

    @Html.Partial("SearchPeople", Model)

otherwise nothing would happen.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38951</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812860]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812990]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39931</wp:comment_id>
			<wp:comment_author><![CDATA[AlanF]]></wp:comment_author>
			<wp:comment_author_email>ajfitzgerald@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.219.253.33</wp:comment_author_IP>
			<wp:comment_date>2015-04-13 06:33:39</wp:comment_date>
			<wp:comment_date_gmt>2015-04-13 06:33:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I was having some trouble with this working.  I would click search and see my search term be found in the controller and returned, and still nothing, but I ended up finding the following JQuery selectors being slightly off and causing the button not to fire, and then the data wasn't going to the correct div.  The code that I used in the @section scripts on People/Index.cshtml was:

     
        $(function () {
            $("#search-btn").click(function () {
                var searchTerm = $("#search-text").val();

                $.get("SearchPeople", { searchText: searchTerm })
                    .success(function (data) {
                        $("#people-data").html(data);
                    });
            });
        });
    ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812859]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42451</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 16:58:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 16:58:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I too am getting all People returned, even though the code says I should expect fewer. Did you ever get an answer to this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37281</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812863]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353755798]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42461</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 17:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 17:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK this is an old thread, but I guess I will try anyway. At this point everything works so far... except that after search, my page gets refreshed back to the original state of "Index". That is, showing all the original Persons. I debugged into the code, and the single result is coming back as expected, and it does render to the _PersonSearchResults partial view (it's called _SearchPeople.cshtml in the tutorial). And then, for some reason, control returns to the Index, and ALL the Persons get rendered.

I can't seem to figure this out. Can anyone help please?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353798942]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42471</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 17:49:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 17:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Never mind, I found the bug... I had taken someone else's (bad) advice and changed the input button to button type="submit", which effed everything up. So the problem is, the ENTER key doesn't click the submit button... it should (that's what people expect). So there should have been some remedial JavaScript as part of this tutorial.


Other than that, good job, James. I am following along. It's an old tutorial but still good!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42461</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353798942]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353841388]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42481</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 17:59:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 17:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Through some experimentation, I fixed it up so that hitting the ENTER key works same as clicking the Search button. I also added a trap for empty search data. Here's what my Script section looks like now:

@section scripts
{
    
        $(function () {
            $("#search-btn").click(function () {
                var searchTerm = $("#search-text").val();
                if (searchTerm.length == 0)
                {
                    alert("Enter some search text.");
                    $("#search-btn").focus();
                    return false;
                }

                $.get("SearchPeople", { searchText: searchTerm })
                    .success(function (data) {
                        $("#people-data").html(data);
                    });
            });

            $("#search-text").keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $("#search-btn").click();
                }
            });
        });
    
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42471</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353841388]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353858114]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 13: Standard Styling and Horizontal Forms</title>
		<link>http://jameschambers.com/2014/06/day-13-standard-styling-and-horizontal-forms/</link>
		<pubDate>Fri, 13 Jun 2014 22:11:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3651</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>With yesterday having a quick look at the inline styling for a search form, it’s only appropriate to have a look at the other types of styling as well. Users are going to want to enter data!</p> <p>We’re going to make a quick pit stop first to update our Person class so that we can take advantage of a few of the validation features of both MVC and the Bootstrap library.</p> <p>For you 15-minutes-or-less folks out there, sorry…this is one of the longer posts, but we’re covering a lot of useful ground!</p> <h2>Updating our Person Model (Class) in Person.cs</h2> <p>We’re going to need to do two things here, add a constructor (so we don’t run into problems with our collection) and make all fields except PersonId and Skills required. The Person class should look like this when you’re done:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Person
{
    <span class="kwrd">public</span> Person()
    {
        Skills = <span class="kwrd">new</span> HashSet&lt;<span class="kwrd">string</span>&gt;();
        BirthDate = DateTime.Now.AddYears(-20);
    }

    <span class="kwrd">public</span> <span class="kwrd">int</span> PersonId { get; set; }

    [Required]
    <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }

    [Required]
    <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }

    [Required]
    <span class="kwrd">public</span> DateTime BirthDate { get; set; }

    [Required]
    [UIHint(<span class="str">"BooleanButtonLabel"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">bool</span> LikesMusic { get; set; }

    [Required]
    [EmailAddress]
    <span class="kwrd">public</span> <span class="kwrd">string</span> EmailAddress { get; set; }

    <span class="kwrd">public</span> ICollection&lt;<span class="kwrd">string</span>&gt; Skills { get; set; }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Note that on the EmailAddress, we also added an attribute called, well, EmailAddress. This is a pre-defined validation attribute that the Framework uses to give us useful information in our controller, as well as to leverage client-side scripts for validation (to save round-tripping). Best of both worlds!</p>
<h2>Allowing Create on Our Controller</h2>
<p>Now we can pop into our controller and set things up for the create action. We’ll need two methods – one for the GET and one for the POST. The GET method creates a default Person object and passes it to the view.</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Create()
{
    var person = <span class="kwrd">new</span> Person();
    <span class="kwrd">return</span> View(person);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The POST method is decorated with an attribute and accepts an instance of Person back as a parameter. This is one of the really great features of the MVC Framework: while you still have access to the form collection and full request object, you don’t have to deal with the cruft unless you want or need to; the Framework performs “model binding” for you and fills in the properties of the parameter objects you are expecting based on the names of the fields passed in.</p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult Create(Person person)
{
    <span class="kwrd">if</span> (ModelState.IsValid)
    {
        _people.Add(person);
        <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>);
    }

    <span class="kwrd">return</span> View(person);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The base Controller class that we inherit from also gives us some rich capabilities for evaluating the incoming parameter. We can inspect some simple pre-checked values, add validation error messages and deal with the user input as we see fit.</p>
<p>We are able to check ModelState.IsValid because we setup our model to require certain fields. You can add all kinds of validations to cover min and max values, ranges, matches based on Regexes, or, as we did, a check to make sure an Email address is valid. There are more still, and you can create your own if you like.</p>
<h2>Generating the View</h2>
<p>Now, you’ve done this before but we’re going to approach it a little differently today. This time, when you right-click on the Create method in the controller, be sure to select the correct template and options.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image23.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb11.png" width="424" height="259"></a></p>
<p>It’s a Create template, with the Person class as the model. You’ll want to clear the partial checkbox if it’s selected and make sure you “Include Script Libraries”.&nbsp; Remember that leaving the name of the view as Create allows the framework to pick it up on it’s own.</p>
<h2>This One’s Not Quite Free</h2>
<p>The default view actually looks pretty good, in fact, you’d have to remove the form-horizontal style from the class attribute of the div (in the root of the form that is generated) to get the “standard” look-and-feel, which would be like this:</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image24.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb12.png" width="387" height="259"></a></p>
<p>But you’ll notice that we’re missing something in particular: a way to add skills to our person. Also, it looks way better with that form-horizontal in there!</p>
<h2>Getting Things Straight</h2>
<p>So, if you removed that form-horizontal, add it back. Then we’re going to add the next little bit of markup, right before the submit button on the form:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="form-group"</span><span class="kwrd">&gt;</span>
    @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.Skills, htmlAttributes: new { @class = "control-label col-md-2" })
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="col-md-10"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="input-group"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="input-group-btn"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">class</span><span class="kwrd">="btn btn-default"</span> <span class="attr">id</span><span class="kwrd">="add-skill"</span> <span class="attr">type</span><span class="kwrd">="button"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="glyphicon glyphicon-plus"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="text"</span> <span class="attr">id</span><span class="kwrd">="skill"</span> <span class="attr">class</span><span class="kwrd">="form-control"</span> <span class="attr">placeholder</span><span class="kwrd">="Type, then click + to add"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="skills-wrapper"</span><span class="kwrd">&gt;&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="form-group"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="col-md-offset-2 col-md-10"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">id</span><span class="kwrd">="skills-list"</span> <span class="attr">class</span><span class="kwrd">="list-group"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You’ll notice that we don’t actually have any new form elements here that will submit with the form (the input there doesn’t have a name and won’t appear in the submitted form collection), but we have a textbox that lets you enter some text.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image25.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb13.png" width="426" height="53"></a></p>
<p>There is an empty DIV there that we’ll use to add hidden text inputs to the form via jQuery. We also have a styled UL list in there that we’ll use to display what has already been added.</p>
<p>We’ll add the following script to make that markup tick, which you can add at the bottom of the scaffolded script section in Create.cshtml:</p><pre class="csharpcode">&lt;script&gt;
    $(<span class="kwrd">function</span> () {
        $(<span class="str">"#add-skill"</span>).click(<span class="kwrd">function</span> () {
            <span class="rem">// get the value of the added skill</span>
            <span class="kwrd">var</span> skill = $(<span class="str">"#skill"</span>).val();

            <span class="rem">// push hidden input to our form</span>
            $(<span class="str">"#skills-wrapper"</span>).append($(<span class="str">"&lt;input type='hidden' name='Skills' value='"</span> + skill + <span class="str">"' /&gt;"</span>));

            <span class="rem">// add list item for display purposes</span>
            $(<span class="str">"#skills-list"</span>).append($(<span class="str">"&lt;li class='list-group-item'&gt;"</span> + skill + <span class="str">"&lt;/li&gt;"</span>));

            <span class="rem">// reset the form</span>
            $(<span class="str">"#skill"</span>).val(<span class="str">""</span>).focus();
        });
    });
&lt;/script&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The comments in the script lay out the goal here, essentially that we’re going to grab the value from the entry box and turn it into both a hidden form element and an LI in that unordered list we created earlier. Finally, we reset the input and set the focus.</p>
<p>Here it is in action!</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image26.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb14.png" width="388" height="167"></a></p>
<h2>I Really Like This Part</h2>
<p>Remember how we didn’t add any form elements with the name “Skills”? Well, we did in our JavaScript. In fact, we’ll add as many <em>hidden</em> form elements with the same name, “Skills”, to the form as the user would like. What happens to those form elements with the same name?</p>
<p>In your controller, in the POST method you added, set a breakpoint <em>anywhere</em> in the code, then navigate to your Create page and fill out the form. When you submit, you’ll be able to inspect the Skills property of the person…the MVC Framework model binding is smart enough to see multiple instances of the same-named form element (in our case, a hidden text element) that has the name of a property in our model. </p>
<p>It news up a collection for us and populates it with the values. Sweet! </p>
<h2>Next Steps</h2>



<p>While the form is now submitting and you can see any person you add in the collection, you wouldn’t know it unless you scrolled down on your index. Tomorrow we’ll add some more visibility into what is going on with Bootstrap alerts, assisted by a new base class for our controller and TempData.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3651</wp:post_id>
		<wp:post_date>2014-06-13 22:11:00</wp:post_date>
		<wp:post_date_gmt>2014-06-13 22:11:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-13-standard-styling-and-horizontal-forms</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208833]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35511</wp:comment_id>
			<wp:comment_author><![CDATA[Ali]]></wp:comment_author>
			<wp:comment_author_email>bob12@site.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.23.143.155</wp:comment_author_IP>
			<wp:comment_date>2014-06-14 05:05:21</wp:comment_date>
			<wp:comment_date_gmt>2014-06-14 05:05:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have a big problem with bootstrap. It's not SOLID. you need to spread it across the page/pages like a virus.
Their v2 is not compatible with v3. in this case you should rewire everything from scratch.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812944]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35531</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-15 03:36:26</wp:comment_date>
			<wp:comment_date_gmt>2014-06-15 03:36:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, I don't think it spreads so much like a virus unless you want it to.

Every HTML application uses CSS and JavaScript to some extent, and you'll need links to those files on every page. If you want to use what those technologies have to offer (CSS and JavaScript, I mean), you're going to need to put code into your page. 

Whether you write the code yourself, or if you leverage a library/framework to do the heavy lifting, a version change will likely require some heavy lifting. 

Bootstrap isn't for every project, but it's a great starting point for a lot of folks. 

I hope you continue to checkout the series and hopefully find something useful.  Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35511</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812944]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812952]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35591</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Walker]]></wp:comment_author>
			<wp:comment_author_email>tom.walker1313@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.212.7.128</wp:comment_author_IP>
			<wp:comment_date>2014-06-16 19:31:07</wp:comment_date>
			<wp:comment_date_gmt>2014-06-16 19:31:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, 

Is there a web source listing some of the exist ASP.NET MVC pre-defined validation attribute ie Email Address?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812950]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35651</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-18 13:39:03</wp:comment_date>
			<wp:comment_date_gmt>2014-06-18 13:39:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Absolutely Tom, you can check out the following link for more:
http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.datatypeattribute(v=vs.110).aspx

Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35591</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812950]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813077]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35711</wp:comment_id>
			<wp:comment_author><![CDATA[Ali]]></wp:comment_author>
			<wp:comment_author_email>bob12@site.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.23.143.155</wp:comment_author_IP>
			<wp:comment_date>2014-06-22 06:41:20</wp:comment_date>
			<wp:comment_date_gmt>2014-06-22 06:41:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I found a way to fix it, a bit
Using Bootstrap the Right (Semantic) Way: http://www.ostraining.com/blog/coding/bootstrap-right-way/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35531</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813075]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37891</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:46:44</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:46:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 13:&nbsp;Standard Styling and Horizontal Forms [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39461</wp:comment_id>
			<wp:comment_author><![CDATA[Sandeep]]></wp:comment_author>
			<wp:comment_author_email>sandeep_maindarkar@yahoo.co.in</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>63.232.58.13</wp:comment_author_IP>
			<wp:comment_date>2015-02-02 21:48:37</wp:comment_date>
			<wp:comment_date_gmt>2015-02-02 21:48:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have added the code as described, but now i am facing a new issue. When a Person is gets created by Create form then it calls the Index View to render. And now index view if i search the same person nothing is happening. I have added some alerts in javascript and debug point in code but the "SearchPeople" action is executing. If before creating the Person, the search functionality is working as expected. Can you please help?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812947]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39641</wp:comment_id>
			<wp:comment_author><![CDATA[Freddy]]></wp:comment_author>
			<wp:comment_author_email>freddy@frbpost.dk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.233.248.184</wp:comment_author_IP>
			<wp:comment_date>2015-03-07 14:03:22</wp:comment_date>
			<wp:comment_date_gmt>2015-03-07 14:03:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James 
Like your Work but this do not Work. I bougth your book as well - just to make sure, I'm not missing anything. I'm talking about the "skills" and the hidden fields. I can get it rigth in the view - but am I not supposed to save it to db ? Otherwise it is just for show. I would really like to understand yout Work. I have copyed all directly - but no good !!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812948]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40231</wp:comment_id>
			<wp:comment_author><![CDATA[nmirandaghn]]></wp:comment_author>
			<wp:comment_author_email>nmirandaghn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>181.189.227.38</wp:comment_author_IP>
			<wp:comment_date>2015-05-26 20:13:00</wp:comment_date>
			<wp:comment_date_gmt>2015-05-26 20:13:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had trouble with the birthdate field however I resolved decorating it like this:

        [Required]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime BirthDate { get; set; }



Hope it helps to all who have issues in this section.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2046601805]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40241</wp:comment_id>
			<wp:comment_author><![CDATA[nmirandaghn]]></wp:comment_author>
			<wp:comment_author_email>nmirandaghn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>181.189.227.38</wp:comment_author_IP>
			<wp:comment_date>2015-05-26 20:18:00</wp:comment_date>
			<wp:comment_date_gmt>2015-05-26 20:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you click the 'Create' button you would see the person at the bottom of the index view. Just make sure that ModelState.IsValid is true and it will work. 

Trust me. I've done every lesson, however I must say that in my case I had to fix some things like the birthdate issue which was invalid always when I typed it. Added [DataType(DataType.Date)] and [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)] to the model and it worked.



Hope it helps.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39641</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812948]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2046610699]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40251</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-05-26 20:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-05-26 20:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks @nmirandaghn:disqus!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40231</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2046601805]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2046620989]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40581</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 02:09:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 02:09:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello...I am having the same issue, as soon as I add somebody they show up but all searching stops.  Not sure why yet...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39461</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812947]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2100705736]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40601</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 12:55:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 12:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well I realized what I am missing is a fundamental understanding of what causes the program to go where - I assume routing.  With webforms it was easy, click on a link or something and YOU told it what to do and where to go.  Now it appears that razor or whatever does random things.  Obviously it is far from random and it does not really hate me like it is acting.  But I don't get what the difference is between /Person and /Person/Index is?  I thought they were the same page, but obviously I am wrong.  What is being displayed when just /Person is up?  Is it the Index page actually?  If so how come code (the search box) works on one and not the other?  Anyway...I'm going to take a break this morning and chase down routing a lot deeper until I have a better understanding of it.  If I figure out the answers to my own questions I will update this -- I am sure I am not the only person struggling after my cheese has been hidden from me.  Years worth of normal (desktop) development I think can actually be a hurdle when you get into this.
Joe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101277747]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40751</wp:comment_id>
			<wp:comment_author><![CDATA[Mark S Potter]]></wp:comment_author>
			<wp:comment_author_email>mspinc54@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.86.168.223</wp:comment_author_IP>
			<wp:comment_date>2015-07-03 13:58:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-03 13:58:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To fix path coming back to index view for create is different versus starting out in index view:  To fix use $.get with updated path

            $.get("/Person/SearchPeople", { searchText: searchTerm })]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40581</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2100705736]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2114535861]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40761</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-07-08 11:03:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-08 11:03:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mark;
Thank you for the advice, for the life of me I cannot figure out where to put this.  If you get back around to it I would appreciate an elaboration.
thank you,
Joe]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40751</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2114535861]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2123239364]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41941</wp:comment_id>
			<wp:comment_author><![CDATA[Philipp Sumi]]></wp:comment_author>
			<wp:comment_author_email>hardcodet@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.2.209.250</wp:comment_author_IP>
			<wp:comment_date>2015-10-15 07:50:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-15 07:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I ended up fixing this by letting ASP.net construct the path for me (not the Url.Action directive). Don't forget to put it into quotes:

$.get("@Url.Action("SearchPeople")", { searchText: searchTerm })]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40751</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2114535861]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2308330658]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41991</wp:comment_id>
			<wp:comment_author><![CDATA[Dmitriy Reznik]]></wp:comment_author>
			<wp:comment_author_email>dpreznik@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.179.188.203</wp:comment_author_IP>
			<wp:comment_date>2015-10-19 00:53:00</wp:comment_date>
			<wp:comment_date_gmt>2015-10-19 00:53:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dear James, may I ask you a question? In e.g.     

        
is there any reason for having two s rather than one div with two classes? I tried it and did not see any difference. 
Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2314277306]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42061</wp:comment_id>
			<wp:comment_author><![CDATA[interdoc]]></wp:comment_author>
			<wp:comment_author_email>doc@intersystem.eti.br</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.25.150.74</wp:comment_author_IP>
			<wp:comment_date>2015-11-01 14:00:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-01 14:00:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations on your Tutorial. I would add two comments in today's code: (1) In PersonController.cs, change private static ICollection _people; by public static ICollection _people; (2) In SimpleController.cs change _people.Add(person); by mvcBootstrap.Controllers.PersonController._people.Add(person);]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2337610717]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42071</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.169.237.3</wp:comment_author_IP>
			<wp:comment_date>2015-11-02 00:14:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-02 00:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Dmitriy, it does seem that this is working...it is possible that in an older version I had to use the outer DIV as the container, but that is corrected in today's version. Be sure to verify the layout is as you expect in multiple browsers and across mobile and desktop, and if it's working there is no need for the extra level of nesting (it appears to work for me here, too).  Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>41991</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2314277306]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2338285817]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42361</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Lawrence]]></wp:comment_author>
			<wp:comment_author_email>Slawrence@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.192.214.243</wp:comment_author_IP>
			<wp:comment_date>2015-11-10 20:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-10 20:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I get the following error after I add the script section you include:

Uncaught ReferenceError: $ is not defined
I've tried placing the script at different places in the file but I still get the same error.  Any recommendations on what I'm missing would be greatly appreciated.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2352370218]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42491</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 18:29:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 18:29:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It has something to do with "Index" being the default method to be called when you go to a controller. MVC has a lot of "defaults" like this. Yeah, it has to do with routing as you surmised.


I am a semi-newbie at MVC too (I started with MVC 4). Keep at it... it gets better!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40601</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101277747]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2353907728]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 14: Bootstrap Alerts and MVC Framework TempData</title>
		<link>http://jameschambers.com/2014/06/day-14-bootstrap-alerts-and-mvc-framework-tempdata/</link>
		<pubDate>Sun, 15 Jun 2014 03:30:49 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3721</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p> <hr>   <p><em>This post is dedicated to the memory of my Grandmother, Marianne Chambers, who passed away June 14, 2014 with her two of her daughters at her side. She was a great woman who survived the passing of her husband and the early loss of a son, my father.</em></p> <p> <hr>   <p>Something may go wrong, or it may go right. It may go smooth or go bump in the night. And, at various times, your application will want to let the user know about it. <strong>Bootstrap</strong> has a component called an Alert that works quite nicely for these types of information.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image27.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb16.png" width="680" height="66"></a></p> <p>Likewise, the <strong>MVC Framework</strong> has a great place where we can store these messages without having to worry about postbacks, short term storage or the like. Pairing these two features up makes a great way to relay information to the user.</p> <h2>A Few More Helpers</h2> <p>Add another class file to your project in the Helpers namespace, and drop in the following code:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Alert
{
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> TempDataKey = <span class="str">"TempDataAlerts"</span>;

    <span class="kwrd">public</span> <span class="kwrd">string</span> AlertStyle { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> Message { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">bool</span> Dismissable { get; set; }
}

<span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> AlertStyles
{
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Success = <span class="str">"success"</span>;
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Information = <span class="str">"info"</span>;
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Warning = <span class="str">"warning"</span>;
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Danger = <span class="str">"danger"</span>;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>These classes give us some constants to help render our Bootstrap alerts, as well as a class to help store and pass data around.</p>
<h2>Base Controller – <em>Almost</em> A Best Practice</h2>
<p>One of the first things you will likely do on any MVC project is to start with a new base controller that you will inherit from instead of the built-in Controller that ships with the framework. </p>
<p>While that may seem like a weird suggestion coming from a guy who likes the YAGNI principle, I’ve never worked on a project that didn’t have a base controller, end up with one, or at least couldn’t have used one.&nbsp; There will be valid cases where you won’t need one, and likely several cases where multiple base controllers will be required, so it’s debatable as to whether or not it should be a rule.</p>
<p>This part is a best practice, however: don’t let your base classes get “fat”, loaded with code you’re not using 90% of the time.</p>
<p>At any rate, if you choose to use them or not, for this project ours will look like this:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> BaseController : Controller
{
    <span class="kwrd">public</span> <span class="kwrd">void</span> Success(<span class="kwrd">string</span> message, <span class="kwrd">bool</span> dismissable = <span class="kwrd">false</span>)
    {
        AddAlert(AlertStyles.Success, message, dismissable);
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Information(<span class="kwrd">string</span> message, <span class="kwrd">bool</span> dismissable = <span class="kwrd">false</span>)
    {
        AddAlert(AlertStyles.Information, message, dismissable);
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Warning(<span class="kwrd">string</span> message, <span class="kwrd">bool</span> dismissable = <span class="kwrd">false</span>)
    {
        AddAlert(AlertStyles.Warning, message, dismissable);
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Danger(<span class="kwrd">string</span> message, <span class="kwrd">bool</span> dismissable = <span class="kwrd">false</span>)
    {
        AddAlert(AlertStyles.Danger, message, dismissable);
    }

    <span class="kwrd">private</span> <span class="kwrd">void</span> AddAlert(<span class="kwrd">string</span> alertStyle, <span class="kwrd">string</span> message, <span class="kwrd">bool</span> dismissable)
    {
        var alerts = TempData.ContainsKey(Alert.TempDataKey)
            ? (List&lt;Alert&gt;)TempData[Alert.TempDataKey]
            : <span class="kwrd">new</span> List&lt;Alert&gt;();

        alerts.Add(<span class="kwrd">new</span> Alert
        {
            AlertStyle = alertStyle,
            Message = message,
            Dismissable = dismissable
        });

        TempData[Alert.TempDataKey] = alerts;
    }

}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>These methods are going to help us record and render alerts from our controller and into our views.&nbsp; There are four pretty similar calls going on there that keep the helper strings away from our controllers.&nbsp; The AddAlert method takes care of fetching or creating a list of alerts.</p>
<p>We’re using TempData here for storage which is good for the next <em>completed</em> request from the server to the same client. That could be the current request, should we complete execution and render a view, or that could be the immediately <em>next</em> request, should we decide to redirect the user.</p>
<p>Using a list of Alerts gives us the ability to add more than one type of alert, or several instances of alerts to the page at once. If you consider things like ActionFilters (those are coming) that have an opportunity to interact with the execution pipeline, you won’t ever know exactly what parts of your application might be trying to signal something to the user.</p>
<p><strong>Note</strong>: I got the idea for this approach through working with <a href="https://twitter.com/ehexter">Eric Hexter</a> on the <a href="https://github.com/erichexter/twitter.bootstrap.mvc">Twitter.Bootstrap.Mvc</a> project. In that version, Eric’s implementation allowed for one message per alert type, but it was definitely what got the ball rolling for me on this one.</p>
<h2>Updates to PersonController</h2>
<p>Start by changing the declaration to inherit from our spanky new base class.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> PersonController : BaseController</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Then, update your create method to use the new methods we’ve added.</p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult Create(Person person)
{
    <span class="kwrd">if</span> (ModelState.IsValid)
    {
        _people.Add(person);
        Success(<span class="kwrd">string</span>.Format(<span class="str">"&lt;b&gt;{0}&lt;/b&gt; was successfully added to the database."</span>, person.FirstName), <span class="kwrd">true</span>);
        <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>);
    }
    Danger(<span class="str">"Looks like something went wrong. Please check your form."</span>);
    <span class="kwrd">return</span> View(person);
}
</pre>
<p>We’ve made it super easy to store various alerts which will hang around in memory until we complete a request. In the case of the happy path above, the Success message hangs around on the server until the client requests the redirected content.&nbsp; For the Danger message on the sad path, the view is immediately returned and the TempData is cleared.</p>
<h2>Showing our Alerts</h2>
<p>While we could just put all the info we need into the layout, we can keep our code cleaner by using a partial view to render the alerts. Under Views\Shared, add a new partial view called _Alerts.cshtml and put in the following code:</p><pre class="csharpcode">@{
    var alerts = TempData.ContainsKey(Alert.TempDataKey)
                ? (List&lt;Alert&gt;)TempData[Alert.TempDataKey]
                : <span class="kwrd">new</span> List&lt;Alert&gt;();

    <span class="kwrd">if</span> (alerts.Any())
    {
        &lt;hr/&gt;
    }
    
    <span class="kwrd">foreach</span> (var alert <span class="kwrd">in</span> alerts)
    {
        var dismissableClass = alert.Dismissable ? <span class="str">"alert-dismissable"</span> : <span class="kwrd">null</span>;
        &lt;div <span class="kwrd">class</span>=<span class="str">"alert alert-@alert.AlertStyle @dismissableClass"</span>&gt;
            @<span class="kwrd">if</span> (alert.Dismissable)
            {
                &lt;button type=<span class="str">"button"</span> <span class="kwrd">class</span>=<span class="str">"close"</span> data-dismiss=<span class="str">"alert"</span> aria-hidden=<span class="str">"true"</span>&gt;&amp;times;&lt;/button&gt;
            }
            @Html.Raw(alert.Message)
        &lt;/div&gt;
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We grab the alerts out of the TempData (if they exist) and then loop through each one, rendering them in the order they were added. If they had the dismissable flag set to true, we also render the appropriate Bootstrap elements and styles to make the alert go away on command.</p>
<p>Now update your _Layout.cshtml to include the call to render the partial view. Your container with the call to RenderBody() should now look like this:</p><pre class="csharpcode">&lt;div <span class="kwrd">class</span>=<span class="str">"container body-content"</span>&gt;
    @{ Html.RenderPartial(<span class="str">"_Alerts"</span>); }
    @RenderBody()
    &lt;hr /&gt;
    &lt;footer&gt;
        &lt;p&gt;&amp;copy; @DateTime.Now.Year - My ASP.NET Application&lt;/p&gt;
    &lt;/footer&gt;
&lt;/div&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>And now, after you add a new person to the list, you’ll see a nicely formatted, dismissable alert at the top of the page.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image28.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb17.png" width="627" height="71"></a></p>
<h2>Next Steps</h2>
<p>We’ve been jumping around a bit and starting to form a few ideas about how the Asp.Net MVC Framework and Bootstrap can work together, but perhaps it’s time to look at a few of the basics that are already in use with the default template.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3721</wp:post_id>
		<wp:post_date>2014-06-15 03:30:49</wp:post_date>
		<wp:post_date_gmt>2014-06-15 03:30:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-14-bootstrap-alerts-and-mvc-framework-tempdata</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207515]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36451</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-07-14 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/notes-de-lecture/reading-notes-2014-07-14/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-14 17:46:10</wp:comment_date>
			<wp:comment_date_gmt>2014-07-14 17:46:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 14: Bootstrap Alerts and MVC Framework TempData (James Chambers) &#8211; Really interesting way to manage alerts in a Asp.Net MVC project. I like it. Day 18: Customizing and Rendering Bootstrap Badges &#8211; This post introduces quickly the bundle to manage our css files. Day 19: Long-Running Notifications Using Badges and Entity Framework Code First &#8211; This post introduces the mvvm pattern and the EF migration capability. Day 20: An ActionFilter to Inject Notifications This post explains how to create actionFilter: a powerful tool. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36501</wp:comment_id>
			<wp:comment_author><![CDATA[Khalil]]></wp:comment_author>
			<wp:comment_author_email>Khaliil.daoudi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>105.156.121.160</wp:comment_author_IP>
			<wp:comment_date>2014-07-16 02:04:25</wp:comment_date>
			<wp:comment_date_gmt>2014-07-16 02:04:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[may she rest in peace man !! :(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811956]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37201</wp:comment_id>
			<wp:comment_author><![CDATA[Richard Thomas]]></wp:comment_author>
			<wp:comment_author_email>rthomas@freckie.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>148.177.1.215</wp:comment_author_IP>
			<wp:comment_date>2014-07-23 12:41:09</wp:comment_date>
			<wp:comment_date_gmt>2014-07-23 12:41:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello James,

First of all, thank you for this very useful series!

I've been able to follow along until now.  When I create the partial view _Alerts.cshtml, i getting squiggly's ever time Alert is referenced in setting the variable alerts:

<code>
    var alerts = TempData.ContainsKey(Alert.TempDataKey)
                ? (List)TempData[Alert.TempDataKey]
                : new List();
</code>

I'm missing something (probably obvious), but i'm not seeing it.  Thanks in advance for taking the time to help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811952]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37211</wp:comment_id>
			<wp:comment_author><![CDATA[Richard Thomas]]></wp:comment_author>
			<wp:comment_author_email>rthomas@freckie.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>148.177.1.215</wp:comment_author_IP>
			<wp:comment_date>2014-07-24 13:02:02</wp:comment_date>
			<wp:comment_date_gmt>2014-07-24 13:02:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello James,

Please ignore my previous comment asking for help.  The problem was easily fixed (I'm embarrassed to say) simply by adding @using SomeApplication.Helpers; at the top of _Alerts.cshtml.  Sorry for the bother.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811957]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37221</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.114.70.114</wp:comment_author_IP>
			<wp:comment_date>2014-07-24 21:25:04</wp:comment_date>
			<wp:comment_date_gmt>2014-07-24 21:25:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome to hear you got it going, Richard! Don't worry, there's no embarrassing questions here :o)

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37211</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811957]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811963]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37511</wp:comment_id>
			<wp:comment_author><![CDATA[best way to Display Error Messages and handle errors in .Net MVC C# | JS-TRICKS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://js-tricks.org/best-way-to-display-error-messages-and-handle-errors-in-net-mvc-c/</wp:comment_author_url>
			<wp:comment_author_IP>174.136.12.77</wp:comment_author_IP>
			<wp:comment_date>2014-08-18 19:02:11</wp:comment_date>
			<wp:comment_date_gmt>2014-08-18 19:02:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] public class BaseController : Controller { public void Success(string message, bool dismissable = false) { AddAlert(AlertStyles.Success, message, dismissable); } public void Information(string message, bool dismissable = false) { AddAlert(AlertStyles.Information, message, dismissable); } public void Warning(string message, bool dismissable = false) { AddAlert(AlertStyles.Warning, message, dismissable); } public void Danger(string message, bool dismissable = false) { AddAlert(AlertStyles.Danger, message, dismissable); } private void AddAlert(string alertStyle, string message, bool dismissable) { var alerts = TempData.ContainsKey(Alert.TempDataKey) ? (List&lt;Alert&gt;)TempData[Alert.TempDataKey] : new List&lt;Alert&gt;(); alerts.Add(new Alert { AlertStyle = alertStyle, Message = message, Dismissable = dismissable }); TempData[Alert.TempDataKey] = alerts; } } http://jameschambers.com/2014/06/day-14-bootstrap-alerts-and-mvc-framework-tempdata/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37791</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:28:58</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:28:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 14:&nbsp;Bootstrap Alerts and MVC Framework TempData [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38361</wp:comment_id>
			<wp:comment_author><![CDATA[Eduardo S]]></wp:comment_author>
			<wp:comment_author_email>ed_Sjm@yahoo.es</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.171.103.126</wp:comment_author_IP>
			<wp:comment_date>2014-10-20 01:27:02</wp:comment_date>
			<wp:comment_date_gmt>2014-10-20 01:27:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello James,
I'm starting with  MVC, jquery, Boostrap, etc and this is very helpfully.
Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811955]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38701</wp:comment_id>
			<wp:comment_author><![CDATA[Andy]]></wp:comment_author>
			<wp:comment_author_email>andystark.personal@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.168.184.19</wp:comment_author_IP>
			<wp:comment_date>2014-10-30 19:58:17</wp:comment_date>
			<wp:comment_date_gmt>2014-10-30 19:58:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice clean alerting code.    Is it possible to include ActionLinks in the alert message?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811951]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39061</wp:comment_id>
			<wp:comment_author><![CDATA[bhushanmore]]></wp:comment_author>
			<wp:comment_author_email>sarvesh@infoaim.in</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>103.6.185.1</wp:comment_author_IP>
			<wp:comment_date>2014-12-07 15:49:35</wp:comment_date>
			<wp:comment_date_gmt>2014-12-07 15:49:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James Sir, 
                      Thanks a lot!! I was exhausted searching for notifications in mvc, as I needed it urgently for client requirement. However, your code worked like a magic!!! Thank you very much, sir.
                      However, I have a little problem in closing the notification; On clicking the (x) icon,the alert doesn't get closed. Do i need to write a jquery function to close or hide the div on click??? 
 Thanks, in advance.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811959]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39491</wp:comment_id>
			<wp:comment_author><![CDATA[ashwin]]></wp:comment_author>
			<wp:comment_author_email>ashwin.marthak@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.254.31.132</wp:comment_author_IP>
			<wp:comment_date>2015-02-05 09:54:00</wp:comment_date>
			<wp:comment_date_gmt>2015-02-05 09:54:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[_Alert.chtml I get the TempData Value 0  then how to keep my TempData Value when render partial view control and I want to Know then you give answer about  adding @using SomeApplication.Helpers then how i find this helper namespace. please let me know the solutions of this question as soon as possible thanks in advance...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811962]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39501</wp:comment_id>
			<wp:comment_author><![CDATA[Rakesh]]></wp:comment_author>
			<wp:comment_author_email>labs.usr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.254.31.132</wp:comment_author_IP>
			<wp:comment_date>2015-02-06 06:11:57</wp:comment_date>
			<wp:comment_date_gmt>2015-02-06 06:11:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Richard,

Here,
var alerts = TempData.ContainsKey(Alert.TempDataKey)
? (List)TempData[Alert.TempDataKey]
: new List();

I am getting null value in _Alerts.cshtml in partial view. Can you please let me know what is Helpers namespace. you said you have added @using SomeApplication.Helpers and issue solved.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37211</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811957]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811965]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39531</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>simon@rebelbetting.com</wp:comment_author_email>
			<wp:comment_author_url>http://coolquotescollection.com</wp:comment_author_url>
			<wp:comment_author_IP>83.68.237.133</wp:comment_author_IP>
			<wp:comment_date>2015-02-16 15:35:37</wp:comment_date>
			<wp:comment_date_gmt>2015-02-16 15:35:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this James, great stuff!

I added the functions in a helper class instead of a controller base class so I call Alert.Success()  instead of being bound to a controller context. I had to add a custom TempData handler however.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811961]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39941</wp:comment_id>
			<wp:comment_author><![CDATA[Josh]]></wp:comment_author>
			<wp:comment_author_email>joshyates1980@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.226.180.32</wp:comment_author_IP>
			<wp:comment_date>2015-04-13 16:50:27</wp:comment_date>
			<wp:comment_date_gmt>2015-04-13 16:50:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You rock!   I was adding bootstrap messages with a more ugly pattern.  I have implemented  your code. Thank you for sharing!  Drinks are on me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811953]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39981</wp:comment_id>
			<wp:comment_author><![CDATA[adam j.]]></wp:comment_author>
			<wp:comment_author_email>adamncsu1@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.26.201.170</wp:comment_author_IP>
			<wp:comment_date>2015-04-18 05:07:28</wp:comment_date>
			<wp:comment_date_gmt>2015-04-18 05:07:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is awesome. Implementing it in all future MVC projects.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811954]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40001</wp:comment_id>
			<wp:comment_author><![CDATA[Mike P]]></wp:comment_author>
			<wp:comment_author_email>g8r87trp92@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.192.14.44</wp:comment_author_IP>
			<wp:comment_date>2015-04-20 17:34:39</wp:comment_date>
			<wp:comment_date_gmt>2015-04-20 17:34:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great alerts framework Mister James!   I thought mine was clean, until I saw yours.   Nice work, thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811950]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40081</wp:comment_id>
			<wp:comment_author><![CDATA[rami]]></wp:comment_author>
			<wp:comment_author_email>ramireddy.kr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.166.209.169</wp:comment_author_IP>
			<wp:comment_date>2015-04-29 13:46:17</wp:comment_date>
			<wp:comment_date_gmt>2015-04-29 13:46:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi James, 
Thanks for this...It works like a charm...but how to use it when I make ajax call to the controller which returns a partial view.

Thanks in advance...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811958]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40121</wp:comment_id>
			<wp:comment_author><![CDATA[Dinesh Patidar]]></wp:comment_author>
			<wp:comment_author_email>smartdpatel007@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>114.143.74.153</wp:comment_author_IP>
			<wp:comment_date>2015-05-04 09:14:06</wp:comment_date>
			<wp:comment_date_gmt>2015-05-04 09:14:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It really great work......!
Thanks a lot...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811960]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40481</wp:comment_id>
			<wp:comment_author><![CDATA[RAVI K SIGH]]></wp:comment_author>
			<wp:comment_author_email>mcamail2002@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>192.8.192.60</wp:comment_author_IP>
			<wp:comment_date>2015-06-19 07:32:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-19 07:32:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Could you please show bootstrap alert while returning json result??]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2087446502]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40561</wp:comment_id>
			<wp:comment_author><![CDATA[Mike]]></wp:comment_author>
			<wp:comment_author_email>michael.leitao@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.49.74.138</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 00:18:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 00:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Worked well, Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2100570472]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40611</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 15:11:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 15:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This works slick.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101498228]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40621</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 15:11:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 15:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This works slick.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101498228]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40651</wp:comment_id>
			<wp:comment_author><![CDATA[Josh Carroll]]></wp:comment_author>
			<wp:comment_author_email>jrcarroll85@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.125.159.13</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 19:04:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 19:04:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I put the @{ Html.RenderPartial("_Alerts"); } inside my partial view. This will render the alerts when you reload the partial view rather than loading them in the layout.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40081</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811958]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2102015825]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40741</wp:comment_id>
			<wp:comment_author><![CDATA[Rodrigo]]></wp:comment_author>
			<wp:comment_author_email>rcalazansn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.93.142.68</wp:comment_author_IP>
			<wp:comment_date>2015-07-01 16:05:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-01 16:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you find the soluction?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40481</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2087446502]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2110686383]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40891</wp:comment_id>
			<wp:comment_author><![CDATA[Luis Noguera]]></wp:comment_author>
			<wp:comment_author_email>noguer17@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.181.162.164</wp:comment_author_IP>
			<wp:comment_date>2015-07-16 18:57:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-16 18:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This really works great, Thanks :-) the only thing is after the alert appears, if i go to another action and then click on the navigator´s back button the alert appears again. how can i solve this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2140224738]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40911</wp:comment_id>
			<wp:comment_author><![CDATA[Luis Noguera]]></wp:comment_author>
			<wp:comment_author_email>noguer17@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.77.180.220</wp:comment_author_IP>
			<wp:comment_date>2015-07-17 23:50:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-17 23:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well i don´t know whether it´s the best or safest way to it but i solved it myself by disabling  the cache on my controller action and it works.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40891</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2140224738]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2143021930]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41351</wp:comment_id>
			<wp:comment_author><![CDATA[vetiarvind]]></wp:comment_author>
			<wp:comment_author_email>vetiarvind@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>59.163.207.174</wp:comment_author_IP>
			<wp:comment_date>2015-08-14 20:08:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-14 20:08:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow. Awesome stuff. Such a breeze to add.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2194423461]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41361</wp:comment_id>
			<wp:comment_author><![CDATA[Mark McEvoy]]></wp:comment_author>
			<wp:comment_author_email>mcevoy_mark@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.68.230.112</wp:comment_author_IP>
			<wp:comment_date>2015-08-16 06:47:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-16 06:47:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Beautifully clean solution, thank you for sharing!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2196569173]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42081</wp:comment_id>
			<wp:comment_author><![CDATA[Camilo Martinez]]></wp:comment_author>
			<wp:comment_author_email>subrelax@rocketmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gplus.to/equiman</wp:comment_author_url>
			<wp:comment_author_IP>201.233.34.79</wp:comment_author_IP>
			<wp:comment_date>2015-11-02 08:08:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-02 08:08:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What a beautiful and clean solution!!! Thanks for share!!!
I will try to replace alert to Bootstrap Dialog (https://nakupanda.github.io/bootstrap3-dialog/) library in future.

Thanks again!

RIP: Marianne Chambers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2338637879]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 15: Some Bootstrap Basics</title>
		<link>http://jameschambers.com/2014/06/day-15-some-bootstrap-basics/</link>
		<pubDate>Mon, 16 Jun 2014 00:57:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3831</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Through the series so far we’ve started to see what Bootstrap can do, but how does it get there? Why does the default page look like it does? And what are some of these classes we’ve been using?</p> <h2>The Shell That Makes it Tick</h2> <p>Bootstrap is a responsive grid style and JavaScript library that makes some assumptions about the kind of project you’ll be creating:</p> <ul> <li>You care about mobile users  <li>You want a familiar UX for your users  <li>You are targeting clients capable of HTML5, CSS and JavaScript  <li>You like the look and feel of Bootstrap, or you: a) know how to change it, or, b) you have a theme you want to use.</li></ul> <p>People, there are no more excuses for using tables for layout! Unless, of course, you have a table of data you want to display.&nbsp; You can use the CSS of Bootstrap on it’s own and make use of the built in styles to control the layout of your pages, accommodating for different screen sizes and device resolutions.</p> <p>JavaScript isn’t a requirement for your site, but anything beyond the basic CSS will need to support it. In some cases, functionality of simple controls is augmented or simply made possible by virtue of the JavaScript library. What does the JS offer?</p> <ul> <li>It provides a programmatic API for components and elements of the page  <li>It establishes custom events for actions unique to the Bootstrap controls  <li>It gives the ability to automatically wire up components on your page – almost akin to “programming” it on the page, but using Data Attributes in your markup.  <li>It provides a no-conflict mode to operate with other client-side frameworks  <li>It allows components with heavier processing costs to be delay-initiated, making your page look and feel faster</li></ul> <h2>One Grid to…Line Up Them All</h2> <p>Imagine dividing your page up into 12 columns, and using a row to hold those columns, and putting all your rows into a container. Then, you choose if you want to assume a series of “responsive” widths, or a fluid width that is calculated on the fly to control the size of your columns.&nbsp; In a nutshell, that is what a grid layout system is doing for you. </p> <p>Check out these samples from the template. Your home page looks like this in a desktop browser on a larger screen resolution:<br><a href="http://jameschambers.com/wp-content/uploads/2014/06/image29.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb18.png" width="240" height="138"></a></p> <p>But when you scale it down, you get the following without having to completely design an alternate site:</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image30.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb19.png" width="136" height="240"></a></p> <p>The grid capabilities give you many options for how you want to tackle your layout regardless of the user’s viewport.&nbsp; <strong>This is significant because you don’t have to write your site twice</strong>. There was previous emphasis on making a “mobile friendly version” of your site, but the Bootstrap opinion on design is that you should be mobile first. If you’re choosing to build a new site on some greenfield project it is worth spending some time on how the grid breaks down.</p> <p>The best way to do this is to visit the <a href="http://getbootstrap.com/examples/grid/">Grid Template</a> sample site to see how the different arrangements of classes work together.</p> <h2>The MVC Framework’s Home Page</h2> <p>Consider those images above from your project’s home page, and have a look at what’s going on. There is a menu at the top of the page that automatically collapses into a mobile-friendly arrangement when the screen size gets smaller.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image31.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb20.png" width="348" height="35"></a></p> <p>The code for this navbar control is in the _Layout.cshtml file.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="navbar navbar-inverse navbar-fixed-top"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="container"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="navbar-header"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="navbar-toggle"</span> <span class="attr">data-toggle</span><span class="kwrd">="collapse"</span> <span class="attr">data-target</span><span class="kwrd">=".navbar-collapse"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="icon-bar"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="icon-bar"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="icon-bar"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
            @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="navbar-collapse collapse"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="nav navbar-nav"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Home", "Index", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("About", "About", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Contact", "Contact", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
            @Html.Partial("_LoginPartial")
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There are two DIVs inside the inner container, one the header, the second a collapsable section that is displayed on the same row. On smaller screens, that section disappears in favor of the button in the header. The wiring for all this is done with data attributes. </p>
<p>The links in the header are either rendered in that row, or in a mobile-friendly stack of links when the navbar is collapsed.&nbsp; </p>
<p>See those three spans in there? Those use a class called icon-bar from the Bootstrap library that looks like this:</p><pre class="csharpcode">.navbar-toggle .icon-bar {
  display: block;
  width: 22px;
  height: 2px;
  border-radius: 1px;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>While I’m assuming they could have used an image or something from Glyphicon here, this is a very light-weight way to render the now familiar “hey I got more stuff for you to look at” iconography that many mobile users are accustomed to.</p>
<p>The rest of the content on the page is rendered in Index.cshtml inside the Views\Home folder.</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image32.png" width="554" height="329"></p>
<p>There are two parts in play here, a jumbotron component and a row with three equally-sized columns.&nbsp; The jumbotron is the grey area with the larger title. It assumes the full width of the container it resides in, and gives a few extra style classes to help make content stand out.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="jumbotron"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">h1</span><span class="kwrd">&gt;</span>ASP.NET<span class="kwrd">&lt;/</span><span class="html">h1</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span> <span class="attr">class</span><span class="kwrd">="lead"</span><span class="kwrd">&gt;</span>ASP.NET is a free...<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="http://asp.net"</span> <span class="attr">class</span><span class="kwrd">="btn btn-primary btn-lg"</span><span class="kwrd">&gt;</span>Learn more <span class="attr">&amp;raquo;</span><span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The three bits of content are basically assembles as follows:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="row"</span><span class="kwrd">&gt;</span>
    <span class="rem">&lt;!-- Three of these --&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="col-md-4"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">h2</span><span class="kwrd">&gt;</span>Getting started<span class="kwrd">&lt;/</span><span class="html">h2</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>Content...<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">class</span><span class="kwrd">="btn btn-default"</span> <span class="attr">href</span><span class="kwrd">="http://..."</span><span class="kwrd">&gt;</span>Learn more <span class="attr">&amp;raquo;</span><span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There are three DIV elements that have the col-md-4 (read: content targeting a minimum of a medium screen resolution and spanning 4 columns). These are all contained in the row DIV, and if they add up to 12 or less (3x4 = 12) then they are almost certain to end up on the same row.</p>
<h2>Next Steps</h2>
<p>Be sure to punch around with the grid a little and check out the Views\Home\Index.cshtml source in full (above are just the snippets) to get a good grip on how the layout works. Or, try switching the container class on the _Layout to use container-fluid instead. Lots to explore!</p>
<p>We still have a few basic bits and tips to take care of before we return to the mash up of MVC and Bootstrap, so tune in tomorrow where we close those off!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3831</wp:post_id>
		<wp:post_date>2014-06-16 00:57:00</wp:post_date>
		<wp:post_date_gmt>2014-06-16 00:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-15-some-bootstrap-basics</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781493694]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Holy Crap, I Love Windows Live Writer</title>
		<link>http://jameschambers.com/2014/06/holy-crap-i-love-windows-live-writer/</link>
		<pubDate>Mon, 16 Jun 2014 02:43:42 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3851</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There’s an old joke in software development that has Jesus and Satan in a coding contest. When the power goes out Satan loses all his code and asks for more time, but God denies his request as his opponent was already done. “Sorry,” says God, “but Jesus saves!”.</p> <p>I lost over an hour’s work tonight on a couple of posts I’m working on. Thankfully, Writer has my back. I don’t know who that makes me in the coding contest, but check out this recovery folder:</p> <p>C:\Users\<em>user_name</em>\AppData\Local\Windows Live Writer\AutoRecover</p> <p>If Windows Live Writer crashes you can recover most of your work, even if you don’t have autosave enabled. This has got me out of the woods a couple of times.</p> <p>Happy blogging. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/06/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3851</wp:post_id>
		<wp:post_date>2014-06-16 02:43:42</wp:post_date>
		<wp:post_date_gmt>2014-06-16 02:43:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>holy-crap-i-love-windows-live-writer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="windws-live-writer"><![CDATA[Windws Live Writer]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781237623]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Day 16: Conceptual Organization of the Bootstrap Library</title>
		<link>http://jameschambers.com/2014/06/day-16-conceptual-organization-of-the-bootstrap-library/</link>
		<pubDate>Mon, 16 Jun 2014 10:49:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3871</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>There are three main areas of what the Bootstrap people refer to as the infrastructure of the library, and provided you’ve tackled the <a href="http://jameschambers.com/2014/06/day-15-some-bootstrap-basics/">basics</a> and <a href="http://jameschambers.com/2014/06/day-5-bootstrap-for-the-asp-net-developer/">intent</a>, you should have all you need in those areas of the documentation to markup pages to your heart’s content. Today, we’re just going to look at those areas so you can get a feel on where to hunt for things.</p> <p>This series is by no means meant to teach you CSS basics or how to modify Bootstrap’s core, rather, it’s about leveraging Bootstrap from MVC. However, there are important bits you should have a feel for, especially if the idea of tinkering with Bootstrap’s internals is up your alley.</p> <h2>The Base CSS</h2> <p>Some HTML elements of the library are just “free”. You get defaults for BODY, background colors, FORMS and form elements without adding any classes. for example.&nbsp; Others need only simple class assignment, such as styling “lead” copy on a page with the P tag.</p> <p><a href="http://getbootstrap.com/css/#buttons">Buttons in Bootstrap</a> use classes, which seems odd at first but they work on BUTTON, A and INPUT elements so once you learn the classes this is rather simple to apply.&nbsp; Each element requires the base “btn” class, and if you want additional coloring you can use one of the contextual classes (active, success, info, warning or danger).</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-warning"</span><span class="kwrd">&gt;</span>Warning<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span></pre>
<p>There are a number of scenarios where these contextual colors can be applied to backgrounds with tables or paragraphs, and be used for text as well, mostly documented in the <a href="http://getbootstrap.com/css/#helper-classes">helper classes</a> section of the site.&nbsp; You’ll also find info on using these under component- or element-specific docs, such as with the <a href="http://getbootstrap.com/css/#tables">table</a>.
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>There is more information on the basics, as well as diving into the code for customization, on the <a href="http://getbootstrap.com/css/">CSS documentation page</a>. If you are familiar with <a href="http://getbootstrap.com/css/#sass">SASS</a> and <a href="http://getbootstrap.com/css/#less">LESS</a>, or want to <a href="http://getbootstrap.com/getting-started/#customizing">trim down pieces of Bootstrap</a> that are not required for your site check out those links as well. </p>
<h2>Bootstrap Components</h2>
<p>When Bootstrap requires more structure to put things together you’ll be looking to the component documentation. The <a href="http://getbootstrap.com/components/#navbar">navbar</a> we looked at yesterday, for example, needs specific containers, classes and arrangements in order for it to render properly.</p>
<p>Dropdowns, button groups, input groups and combinations thereof are all possible with the right markup. Adding things like breadcrumbs, pagination controls, badges and labels with consistent styling has always been a thorn in my side, but they’re made easy with Bootstrap.</p>
<p>You can dig further into these elements and more on the <a href="http://getbootstrap.com/components/">Components page</a>.</p>
<h2>Adding Functionality with JavaScript</h2>
<p>It’s worth noting that most everything up to this point work without the JavaScript library. However, adding the JS to your site really starts to make Bootstrap sing. (You’ll also need it to handle specific use cases like navbars with collapsed regions.)</p>
<p>One of the things I like most about Bootstrap is that it considers the CSS markup the first-class API, meaning you don’t have to write any JavaScript to make Bootstrap components like modals or tabs work. They’ve pushed this away into their JS file, and allow you to trigger related behaviors with data attributes, like here with <a href="http://getbootstrap.com/javascript/#alerts">the alert</a>. By simply adding a button to your alert element, you get dismiss capabilities for free:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="close"</span> <span class="attr">data-dismiss</span><span class="kwrd">="alert"</span> <span class="attr">aria-hidden</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span><span class="attr">&amp;times;</span><span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The docs <a href="http://getbootstrap.com/javascript/">JavaScript controls</a> are a little light, and don’t offer much for explanation, but you can learn a fair bit by experimenting with the data attribute classes or using the JS API directly.</p>
<h2>Next Steps</h2>
<p>Tomorrow is going to be a quick one with a special announcement on some <em>free</em> upcoming training on the MVC Framework and live interaction with experts in the field!</p>
<p>After that, we’ll get back to using these Bootstrap components as something to augment our user experience for applications built with the MVC Framework.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3871</wp:post_id>
		<wp:post_date>2014-06-16 10:49:00</wp:post_date>
		<wp:post_date_gmt>2014-06-16 10:49:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-16-conceptual-organization-of-the-bootstrap-library</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781240888]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37801</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:29:13</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:29:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 16:&nbsp;Conceptual Organization of the Bootstrap Library [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Day 17: Free Training For All the Peoples!</title>
		<link>http://jameschambers.com/2014/06/day-17-free-training-for-all-the-peoples/</link>
		<pubDate>Tue, 17 Jun 2014 10:22:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3911</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>I hope you’re enjoying the series so far, I’m certainly enjoying creating it. And you know what, blogs are great, but watching live speakers and getting to interact with experts is likely the next-best-thing to in-class training.</p> <h2>Announcing Microsoft Virtual Academy’s Introduction to MVC</h2> <p><a href="http://www.microsoftvirtualacademy.com/liveevents/introduction-to-asp-net-mvc?prid=ca_mvpjc" target="_blank"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image33.png" width="516" height="206"></a></p> <p>Join Jon Galloway, Christopher Harrison in live video training, along with a handful of experts in the chat room, including yours truly, for a full day event on Microsoft Virtual Academy.</p> <p>This is free, people. Like breathing.&nbsp; You’re getting top-quality training, the ability to ask any questions you like and a really thorough examination of the basics of the MVC Framework.</p> <p>You can <a href="http://www.microsoftvirtualacademy.com/liveevents/introduction-to-asp-net-mvc?prid=ca_mvpjc" target="_blank">REGISTER NOW</a> and sit in on over 6 hours of free training.</p> <h2>Next Steps</h2> <p>What’s next in store? Keep <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">following along</a> with this blog series to get tuned up, then jump into the video on June 23rd to see it all in action.&nbsp; Tomorrow, we’ll jump back into our series in full force, but please be sure to join the <a href="http://www.microsoftvirtualacademy.com/liveevents/introduction-to-asp-net-mvc?prid=ca_mvpjc" target="_blank">MVA on MVC</a>!</p> <p>Happy Coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3911</wp:post_id>
		<wp:post_date>2014-06-17 10:22:00</wp:post_date>
		<wp:post_date_gmt>2014-06-17 10:22:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-17-free-training-for-all-the-peoples</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781280265]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37901</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:46:59</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:46:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 17:&nbsp;Free Training For All the Peoples! [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Day 18: Customizing and Rendering Bootstrap Badges</title>
		<link>http://jameschambers.com/2014/06/day-18-customizing-and-rendering-bootstrap-badges/</link>
		<pubDate>Wed, 18 Jun 2014 10:35:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3961</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Bootstrap comes with some great styles and base starting points, but it’s not meant to be the be-all and end-all of design. There are often times when a simple CSS tweak can make your site stand apart from others.</p> <h2>Using the Built-In Badge</h2> <p>Badges are pretty easy to render. You mark up a SPAN with the “badge” class and you’re off to the races.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Registrations <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="badge"</span><span class="kwrd">&gt;</span>19<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>That ends up looking something like this:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image34.png" width="125" height="30"></p>
<p>And if you put it in a navbar, it looks like this:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image35.png" width="129" height="32"></p>
<p>So it’s an easy way to convey that the user has <em>something</em> that needs to be done, check unread messages, complete some kind of task or, say, approve People registrations. But the white-on-grey is a little bland.</p>
<h2>Non-Intrusive Customizations</h2>
<p>I wouldn’t recommend modifying the base Bootstrap.css class itself. If there are incremental updates you would lose the ability to update your project without losing changes, save using a merge tool and sorting out the diff on your own. You would likely be better served to extend Bootstrap with LESS or SASS if that suits your fancy, but there is an easier approach as well that’s as old as CSS itself: just add another stylesheet to your project. Sometimes low-tech is the easiest answer.</p>
<p>What we’d like to do is to get a palette of options like so:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image36.png" width="290" height="33"></p>
<p>Let’s start by adding a new CSS file to the project. Expand the Content folder in your solution and you should see bootstrap.css. Right-click on the Content folder, and add a new Style Sheet called “bootstrap.custom.css”, then paste in the following code:</p><pre class="csharpcode">.badge-danger {
  background-color: #d43f3a;
}

.badge-warning {
  background-color: #d58512;
}

.badge-success {
  background-color: #398439;
}

.badge-info {
  background-color: #269abc;
}

.badge-inverse {
  background-color: #333333;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>These are just classes styled after the button classes, using the same solid colors for the background. You could event go a step further and introduce hover states (like buttons) or borders (like for labels) depending on your fancy.</p>
<p>Next, we need to get our site aware of this file. If you’re a traditional web developer you might be inclined to update your template or master page and add some markup to include the CSS, but we have a different approach in today’s web: update our bundle.</p>
<h2>Including the File</h2>
<p>Navigate to the App_Start folder in your solution and open the BundleConfig.cs file. Update the bundle that includes the bootstrap.css file to the following:</p><pre class="csharpcode">bundles.Add(<span class="kwrd">new</span> StyleBundle(<span class="str">"~/Content/css"</span>).Include(
            <span class="str">"~/Content/bootstrap.css"</span>,
            <span class="str">"~/Content/bootstrap.custom.css"</span>,
            <span class="str">"~/Content/site.css"</span>));</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>If you’ve already got the site running, you’ll want to recompile at this point. You won’t need to in order to make changes to your style sheet, but BundleConfig is only ever run once at startup. Bundles have built-in cachebusters that prevent your CSS from getting stale while you edit it, but you’ll need to do that rebuild just once.</p>
<h2>Badge Up Your Site!</h2>
<p>Now you are free to add something like the following to any of your pages:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Registrations <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="badge"</span><span class="kwrd">&gt;</span>19<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span> 
<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>One cool but likely expected aspect is that if you put a badge inside of an A tag, as I have above here, the badge is also clickable, so keep that in mind as you’re hacking together your markup.</p>
<h2>Next Steps</h2>


<p>Next up we will come up with a practical way to leverage these badges in our site and display them in the navbar.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3961</wp:post_id>
		<wp:post_date>2014-06-18 10:35:00</wp:post_date>
		<wp:post_date_gmt>2014-06-18 10:35:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-18-customizing-and-rendering-bootstrap-badges</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781282359]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36461</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-07-14 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/en/reading-notes/reading-notes-2014-07-14-2/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-14 17:46:47</wp:comment_date>
			<wp:comment_date_gmt>2014-07-14 17:46:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Chambers) &#8211; Really interesting way to manage alerts in a Asp.Net MVC project. I like it. Day 18: Customizing and Rendering Bootstrap Badges &#8211; This post introduces quickly the bundle to manage our css files. Day 19: Long-Running [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40631</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 18:25:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 18:25:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fun stuff!  

Had to look around a bit to figure out round badges:

.badge-round {
 position: absolute;
border-radius: 50%;
background: yellow;
height:2rem;
width:2rem;
 top:1.5rem;
 right:1.5rem;
 text-align: center;
 line-height: 2rem;;
 font-size: 1rem;
 font-weight:900;
color: darkred;
border:1px solid black;
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101926398]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41331</wp:comment_id>
			<wp:comment_author><![CDATA[Pascal Roget]]></wp:comment_author>
			<wp:comment_author_email>pascal@ocagency.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>172.89.102.72</wp:comment_author_IP>
			<wp:comment_date>2015-08-14 02:17:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-14 02:17:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[These values look slightly incorrect, at least in Bootstrap 3.
Correct values are:


.badge-danger {
  background-color: #cc3333;
}
.badge-warning {
  background-color: #ff9933;
}
.badge-success {
  background-color: #669966;
}
.badge-info {
  background-color: #66cccc;
}
.badge-inverse {
  background-color: #333333;
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2192210415]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day ?: A Break for Family</title>
		<link>http://jameschambers.com/2014/06/day-a-break-for-family/</link>
		<pubDate>Sun, 22 Jun 2014 11:38:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=3991</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This past week I attended the funeral of my Grandma and, as such, put this series on hold. I am back from Northern Saskatchewan and I’ll be resuming the daily posts starting tomorrow.</p> <p>In turn, we’ll be wrapping up this adventure on July 4, so we’ll go out with a bang.</p> <p>A little later in the series we’re going to be working with a real-time pub/sub library called SignalR. It would be a good thing to do to read up on it a little, and perhaps even run through some of the exercises. I won’t be heavily covering it as it’s not the focus of this work, but we will use it to bring some interesting functionality into play.</p> <p>While I’ve enjoyed the break and the chance to spend some time with family, I’m eager to wrap up the posts and finish off this work. </p> <p>Happy weekend.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3991</wp:post_id>
		<wp:post_date>2014-06-22 11:38:00</wp:post_date>
		<wp:post_date_gmt>2014-06-22 11:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-a-break-for-family</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207740]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35741</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen Maher]]></wp:comment_author>
			<wp:comment_author_email>steve.maher@1010vacations.com</wp:comment_author_email>
			<wp:comment_author_url>http://1010vacations.com</wp:comment_author_url>
			<wp:comment_author_IP>96.243.215.100</wp:comment_author_IP>
			<wp:comment_date>2014-06-23 11:57:44</wp:comment_date>
			<wp:comment_date_gmt>2014-06-23 11:57:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My condolences regarding your grandmother.

Thank you for putting the time into the '30 days'.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812120]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35751</wp:comment_id>
			<wp:comment_author><![CDATA[mark erickson]]></wp:comment_author>
			<wp:comment_author_email>markspublicaddress@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>50.167.68.253</wp:comment_author_IP>
			<wp:comment_date>2014-06-23 19:04:17</wp:comment_date>
			<wp:comment_date_gmt>2014-06-23 19:04:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Condolences..I have fond memories of my Grandma who also has passed.  And thank you for your MVC+Bootstrap articles--I look forward to learning more.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812121]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36631</wp:comment_id>
			<wp:comment_author><![CDATA[Karen]]></wp:comment_author>
			<wp:comment_author_email>Karen@emberey.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>31.50.235.158</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 14:29:50</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 14:29:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Its been many years since I lost my Nan, but she still plays a big role in my life. She gave me a repository of wisdom to draw from, some of which I am only now able to understand. Her memory  fills my soul with love. God bless you and your family in this difficult time. Thank you so much for sharing your knowledge. I visited Saskatchewan in 1977, when hitching across Canada during my summer vacation as a student. The hospitality I received there was incredible!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812122]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40641</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 18:31:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 18:31:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I know time has passed but the sentiment is still sincere.  My condolences and thanks for the series as well.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2101941113]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 19: Long-Running Notifications Using Badges and Entity Framework Code First</title>
		<link>http://jameschambers.com/2014/06/day-19-long-running-notifications-using-badges-and-entity-framework-code-first/</link>
		<pubDate>Tue, 24 Jun 2014 00:58:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4021</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>We previously looked at using TempData to store alerts, which is great when what we are trying to alert the user to is a transient message that lives only for the next request. What about the scenario where we have long running notifications? Unread email? Outstanding actions the user must follow up on?</p> <p>Today we’re going to bang out a solution here…in the interest of time and simplicity this <em>will not</em> be in line with best practices, but come back tomorrow for a discussion on how to get closer to them.</p> <h2>Rocking Out A Model</h2> <p>If we want a way to indicate that the user needs to take care of something, we need two pieces: some kind of UI to point it out – which we have with badges – and some place to store the data – which we’ll get with EF.&nbsp; Right-click on your Models directory and add a new class, called Notification, and add the following code to it:</p><pre class="csharpcode">    <span class="kwrd">public</span> <span class="kwrd">enum</span> NotificationType
    {
        Registration,
        Email
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> Notification
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> NotificationId { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> Title { get; set; }
        <span class="kwrd">public</span> NotificationType NotificationType { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> Controller { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> Action { get; set; }
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>These are <em>just</em> classes, but when we lean on Entity Framework, we get a database out of it as well. In the “code first” approach, we first write ourselves a class that represents the data, as we’ve done above. Next, we have to let EF know that we expect a storage mechanism for that data, namely, we create a data context and a DB set (representing a table) inside of another class. Add SiteDataContext as a class in your Models folder and add the following code to it:</p><pre class="csharpcode">    <span class="kwrd">public</span> <span class="kwrd">class</span> SiteDataContext : DbContext
    {
        <span class="kwrd">public</span> SiteDataContext() : <span class="kwrd">base</span>(<span class="str">"DefaultConnection"</span>) { }

        <span class="kwrd">public</span> DbSet&lt;Notification&gt; Notifications { get; set; }
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There’s not much to it: DbSet represents a table and DbContext identifies this as a class that represents a connection to the database. If the DB doesn’t exist, EF creates it for us. We call the base class constructor with a string, which identifies the connection string to use in the web.config file, if present, or the name of the DB that will be created if it doesn’t.</p>
<p>At this point, <strong>build your project </strong>using Shift+Ctrl+B or by pressing F6. We need the app compiled to take advantage of tooling in Entity Framework.</p>
<p>Now, go to the Package Manager Console (View –&gt; Other Windows –&gt; Package Manager Console) and type the following command:</p><pre class="csharpcode">Enable-Migrations -ContextTypeName SimpleSite.Models.SiteDataContext</pre>
<p>You’ll need to make sure that the namespace and class name match what is specified above. This command generates a configuration file that has an empty Seed method (rather, it has some comments in it, but you can delete them).&nbsp; This file can be used by Entity Framework as a way to do advanced configuration, set your own conventions for table naming, or, in our case, seeding the database with some test data.&nbsp; Paste in the following code in the Seed method:</p><pre class="csharpcode"><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Seed(SimpleSite.Models.SiteDataContext context)
{
    context.Notifications.AddOrUpdate(notification =&gt; notification.Title,
        <span class="kwrd">new</span> Notification
        {
            Title = <span class="str">"John Smith was added to the system."</span>,
            NotificationType = NotificationType.Registration
        },
        <span class="kwrd">new</span> Notification
        {
            Title = <span class="str">"Susan Peters was added to the system."</span>,
            NotificationType = NotificationType.Registration
        },
        <span class="kwrd">new</span> Notification
        {
            Title = <span class="str">"Just an FYI on Thursday's meeting"</span>,
            NotificationType = NotificationType.Email
        });
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>AddOrUpdate is like an “upsert” method you can use to inject or update data in your DB.&nbsp; It accepts a lambda expression that specifies how unique rows are identified, and a parameter array which is a list of objects you want to inject into the specified table. </p>
<h2>Updating our Database</h2>
<p>With support for the migrations in place, we want to create an initial version of the DB and apply it in our development environment. From the Package Manager Console, type these lines of code:</p><pre class="csharpcode">Add-Migration db-create

Update-Database</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Have a look through the migration class that is generated. Pretty cool, eh? Although this is just a first stab at it, it really shows how you can customize the build up – or tear down – of you tables. It’s worth a whole book of content, though, so I’m not diving in for now! The call to Update-Database executes the Up() method on all outstanding migrations. Everything is tracked for you by EF in the database. 
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>Okay, Here’s One Best Practice</h2>
<p>One thing that I really like about MVC and EF is how easy it is to get data into your view using the entities of your database. One thing that I really hate about MVC and EF is how easy it is to get data into your view using the entities of your database. For reals. It’s great for demos and terrible for production.</p>
<p>Instead, use a view model…a way to decouple your view from your database completely. Get in this habit as early as you can, and then come back and thank me 6 months into the maintenance portion of your contract. </p>
<p>Add another class called NotificationViewModel and write in the following code:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> NotificationViewModel
{
    <span class="kwrd">public</span> <span class="kwrd">int</span> Count { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> NotificationType { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> BadgeClass { get; set; }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Rather than relying on the data in the database we’re going to use a projection of the data instead. This can help to shield our UI from changes in the model and eliminate the risk of excess DB access or over-exposing sensitive data. It also allows for other best practices we’ll cover in the days ahead.</p>
<h2>Updating Our Controller</h2>
<p>Update your Index() action to be the following:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Index()
{
    var context = <span class="kwrd">new</span> SiteDataContext();

    var notifications = context.Notifications
        .GroupBy(n =&gt; n.NotificationType)
        .Select(g =&gt; <span class="kwrd">new</span> NotificationViewModel
        {
            Count = g.Count(),
            NotificationType = g.Key.ToString(),
            BadgeClass = NotificationType.Email == g.Key
                ? <span class="str">"success"</span>
                : <span class="str">"info"</span>
        });

    ViewBag.Notifications = notifications;

    <span class="kwrd">return</span> View();
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We’re getting the list of notifications out of the DB, grouping them by type, specifying the style class to use and counting them op.&nbsp; We then set that information in the ViewBag, which is accessible from our views. Note that this approach <em>only</em> works for now in our Index method, and <em>only</em> on the HomeController. Don’t worry, we’ll take care of that tomorrow. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/06/wlEmoticon-smile2.png"></p>
<h2>Lighting up Notifications in the View</h2>
<p>Find the UL element with the class “nav navbar-nav” that contains the LI elements that compose the menu (these are around line 26 for me). At the end of the LI elements, we’re going to inject a few more, so we iterate over the list of notifications that we popped into the ViewBag like so:</p><pre class="csharpcode">@<span class="kwrd">foreach</span> (NotificationViewModel notification <span class="kwrd">in</span> ViewBag.Notifications)
{
    &lt;li&gt;&lt;a href=<span class="str">"#"</span>&gt;@notification.NotificationType &lt;span <span class="kwrd">class</span>=<span class="str">"badge badge-@notification.BadgeClass"</span>&gt;@notification.Count&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We’ve got some more work to do to fully get these working, but you will likely see the direction this is moving in by now, and users will see that something needs to be done about all those…notifications.</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image37.png" width="613" height="45"></p>
<h2>Next Steps</h2>
<p>Well, as I said we’ve got some clean up to do to get a little closer to best practices. Our models are in our web site project and unable to be reused. We have to put code in each and every single action on every controller where we would want to see notifications. Our layout is getting polluted with additional code. There’s no way to resolve notifications. We’re in bad shape!</p>
<p>Check back tomorrow so that we can resolve some of the low hanging fruit and discuss what remains to get some of this train on the rails.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4021</wp:post_id>
		<wp:post_date>2014-06-24 00:58:00</wp:post_date>
		<wp:post_date_gmt>2014-06-24 00:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-19-long-running-notifications-using-badges-and-entity-framework-code-first</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208868]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37691</wp:comment_id>
			<wp:comment_author><![CDATA[The Bad Ambassador]]></wp:comment_author>
			<wp:comment_author_email>the.bad.ambassador@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://thebadambassador.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>91.209.106.1</wp:comment_author_IP>
			<wp:comment_date>2014-09-09 11:58:33</wp:comment_date>
			<wp:comment_date_gmt>2014-09-09 11:58:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So it seems the context classes for badges were removed from version 3 of Bootstrap. This results in the badges being rendered in a boring grey. A quick workaround is to change the span definition in _Layout.cshtml from 

 <code></code>

to

 <code></code>

or alternatively you can add styles for badge-info etc. to your CSS. See <a href="http://stackoverflow.com/questions/18730116/twitter-bootstrap-3-0-how-do-i-badge-badge-important-now" title="this thread on stack overflow" rel="nofollow">.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812974]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38011</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-09-26 00:38:32</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 00:38:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You bet. Thanks for this (though your code didn't render, I get where you're going). I alluded to this in the post as well, but do appreciate your comments! Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37691</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812974]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812975]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40281</wp:comment_id>
			<wp:comment_author><![CDATA[dbsquared]]></wp:comment_author>
			<wp:comment_author_email>dan_boone2@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.64.177.130</wp:comment_author_IP>
			<wp:comment_date>2015-06-01 17:46:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-01 17:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I love the series so far and have learned a great deal as i'm new to MVC.  I am hoping you can help me as I am having an issue with this step, no matter what i do i keep getting this error when i try to run the Person/Index.cshtml:  The type or namespace name 'NotificationViewModel' could not be found (are you missing a using directive or an assembly reference?)  I have in the HomeController.cs the code for the index and add using for WebAppicTest.Models Am i missing something else somewhere?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056564759]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40282</wp:comment_id>
			<wp:comment_author><![CDATA[dbsquared]]></wp:comment_author>
			<wp:comment_author_email>dan_boone2@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.64.177.130</wp:comment_author_IP>
			<wp:comment_date>2015-06-01 18:34:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-01 18:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I did notice something while i was playing with this if i change this line : @foreach (NotificationViewModel notification in ViewBag.Notifications)                          
to: @foreach (WebApplication1.Models.NotificationViewModel notification in ViewBag.Notifications)


it runs for the Home/Index.cshtml but not for the Person/Index.cshtml 
i get a totally different error for the person Index now.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40281</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056564759]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056651936]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40291</wp:comment_id>
			<wp:comment_author><![CDATA[dbsquared]]></wp:comment_author>
			<wp:comment_author_email>dan_boone2@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.64.177.130</wp:comment_author_IP>
			<wp:comment_date>2015-06-01 18:34:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-01 18:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I did notice something while i was playing with this if i change this line : @foreach (NotificationViewModel notification in ViewBag.Notifications)                          
to: @foreach (WebApplication1.Models.NotificationViewModel notification in ViewBag.Notifications)


it runs for the Home/Index.cshtml but not for the Person/Index.cshtml 
i get a totally different error for the person Index now.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40281</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056564759]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056651936]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40301</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-06-01 18:46:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-01 18:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, what that error is referring to is the fact that it can't find "NotificationViewModel". You'll need to likely add a using statement (this is the same type of thing that happens in a regular code file if you reference a class for which you haven't imported the namespace with a using), if you don't want to fully qualify the type name.


As far as github goes...have you been added to the private repo? There is a branch for every chapter. If you pull a copy down you can switch freely between branches.


Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40282</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056651936]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056672477]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40311</wp:comment_id>
			<wp:comment_author><![CDATA[dbsquared]]></wp:comment_author>
			<wp:comment_author_email>dan_boone2@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.64.177.130</wp:comment_author_IP>
			<wp:comment_date>2015-06-01 19:12:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-01 19:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I see that and have it working now by adding the using at the top of the page.  Thank you for getting back to me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40301</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056672477]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2056719826]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40661</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 19:14:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 19:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK...I don't get why if I put: 

a href = " # " &gt; Registrations  19</a>

in somewhere it shows up a square badge, yet yours are round up on top?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2102034980]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40791</wp:comment_id>
			<wp:comment_author><![CDATA[MarieB]]></wp:comment_author>
			<wp:comment_author_email>katzenlieben@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.210.11.5</wp:comment_author_IP>
			<wp:comment_date>2015-07-09 15:52:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-09 15:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I believe you need to add the class "badge" in addition to "badge-info".  The "badge-info" class is one you created to simply change the color; the "badge" class is the Bootstrap class that gives the rest of the styling.  Notice the code above reads:




Hope that helps!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40661</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2102034980]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2126714480]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 20: An ActionFilter to Inject Notifications</title>
		<link>http://jameschambers.com/2014/06/day-20-an-actionfilter-to-inject-notifications/</link>
		<pubDate>Wed, 25 Jun 2014 02:08:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4061</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Yesterday we added some good-looking notification badges to our site using our <a href="http://jameschambers.com/2014/06/day-18-customizing-and-rendering-bootstrap-badges/" target="_blank">customized Bootstrap badges</a>. Now we need to take care of this nonsense where we need to put the same code into <em>every single method and every single controller </em>that we write.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image51.png"><img title="image[5]" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image[5]" src="http://jameschambers.com/wp-content/uploads/2014/06/image5_thumb.png" width="613" height="45"></a></p> <p>Yay for the badges, boo for the code. To get around this, we’ll explore one of many different ways we solve this problem of repeating ourselves by writing an action filter.</p> <h2>A Bit About the MVC Pipeline</h2> <p>There’s a lot going on behind the scenes in a web request, but thankfully much of it is abstracted away for most development tasks, and nearly all of it is abstracted away for the end user (could you imagine trying to explain to Mom or Dad how to manually resolve the IP address of domain name? Yikes!).</p> <p>Sometimes you need to dive into the abstraction, and action filters are one area where this is the case. Remember back on <a href="http://jameschambers.com/2014/06/day-1-the-mvc-5-starter-project/" target="_blank">day one</a> of this series I broke down the request a little? And on <a href="http://jameschambers.com/2014/06/day-2-examining-the-solution-structure/" target="_blank">day two</a> I introduced some of the terminology? Well…if you’ve been following along, you can probably infer what an action filter might be up to: before or after executing an action on a controller you get to inspect, prod, poke and otherwise modify the content or even redirect the user as you see fit. From <a href="http://msdn.microsoft.com/en-us/library/gg416513(vs.98).aspx" target="_blank">MSDN</a>:</p> <blockquote> <p>Action filters. These implement <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.iactionfilter(v=vs.98).aspx">IActionFilter</a> and wrap the action method execution. The <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.iactionfilter(v=vs.98).aspx">IActionFilter</a> interface declares two methods: <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.iactionfilter.onactionexecuting(v=vs.98).aspx">OnActionExecuting</a> and <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.iactionfilter.onactionexecuted(v=vs.98).aspx">OnActionExecuted</a>.<a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.iactionfilter.onactionexecuting(v=vs.98).aspx">OnActionExecuting</a> runs before the action method. <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.iactionfilter.onactionexecuted(v=vs.98).aspx">OnActionExecuted</a> runs after the action method and can perform additional processing, such as providing extra data to the action method, inspecting the return value, or canceling execution of the action method.</p></blockquote> <p>You can deny access, restrict availability of resources and execute arbitrary code. You even have access to internal parts of MVC, so your filter can be aware of the currently executing controller, action, and target view.</p> <p>And that’s where we’re going to hook in: just before the view is rendered after the action method has run.</p> <h2>Adding the Filter</h2> <p>Add a folder to the root of your site called Filters (this isn’t convention, just a way to help keep you organized) and then add a class called NotificationFilter. Inherit from ActionFilterAttribute, and then override the OnActionExecuted method so that you can add your two cents to the request.&nbsp; Your code will be nearly identical to what you put in the Home controller, except note now that the ViewBag property is actually accessed through the Controller property on your filterContext.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnActionExecuted(ActionExecutedContext filterContext)
{
    var context = <span class="kwrd">new</span> SiteDataContext();

    var notifications = context.Notifications
        .GroupBy(n =&gt; n.NotificationType)
        .Select(g =&gt; <span class="kwrd">new</span> NotificationViewModel
        {
            Count = g.Count(),
            NotificationType = g.Key.ToString(),
            BadgeClass = NotificationType.Email == g.Key
                ? <span class="str">"success"</span>
                : <span class="str">"info"</span>
        });

    filterContext.Controller.ViewBag.Notifications = notifications;

}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>ActionFilterAttribute gives you four virtual methods for actions and results on executing and executed. You only have to implement the ones that suit your fancy.&nbsp; Because it’s an attribute class, you can decorate your actions (or even your classes) with it and the MVC Framework will pick it up and execute it when the time is right.</p>
<h2>Touch up the Controller</h2>
<p>Now on your HomeController we can clean things up a fair bit. Remove almost all the code from the Index action and decorate it with your new attribute.</p><pre class="csharpcode">[NotificationFilter]
<span class="kwrd">public</span> ActionResult Index()
{
    <span class="kwrd">return</span> View();
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Much cleaner, eh? You can now run your site and you’ll get the same result as we had before, and the notifications will now appear anywhere you place that attribute. If you put it at the class level, all actions on the controller will have the filter applied.&nbsp; Which means I should probably mention…</p>
<h2>…Some Notes and Caveats</h2>
<p>This is a pretty powerful deal, especially at the class level. Heck, you can even globally register your filter and have it execute on every request. Which is why I have to stress some pretty important bits:</p>
<ul>
<li>If it’s <em>always</em> executing, then it’s <em>always</em> executing. Be mindful of decorating your classes as a rule or registering filters globally, especially if you have requests (AJAX) that maybe don’t need the filter.&nbsp; Alternatively, design your filter in such a way that it knows when it should or shouldn’t run.</li>
<li>Lots-of-stuff-going-on doesn’t scale well. Use filters judiciously so that you’re not bogging your site down with unnecessary operations. Be quick in what you do so that you return quickly and keep your performance up. Use profiling if you’re not sure how fast your code is running.</li>
<li>In this example – and I can get away with it because it’s an example – I’m going to the database on each request. It may suit you well to do this, but consider alternate approaches (such as caches with timeouts and operations that invalidate them) so that you’re not making those hits all the time.</li></ul>
<h2>Next Steps</h2>
<p>We still have a few things to clean up from <a href="http://jameschambers.com/2014/06/day-19-long-running-notifications-using-badges-and-entity-framework-code-first/" target="_blank">Day 19</a>, so we’ll keep working away at some housekeeping tasks tomorrow, working on our layout. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4061</wp:post_id>
		<wp:post_date>2014-06-25 02:08:00</wp:post_date>
		<wp:post_date_gmt>2014-06-25 02:08:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-20-an-actionfilter-to-inject-notifications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207760]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>35861</wp:comment_id>
			<wp:comment_author><![CDATA[Tony]]></wp:comment_author>
			<wp:comment_author_email>trobin77@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>165.176.19.2</wp:comment_author_IP>
			<wp:comment_date>2014-06-25 19:35:56</wp:comment_date>
			<wp:comment_date_gmt>2014-06-25 19:35:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is the source code available to follow along with the solution?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812144]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35921</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.161.41.72</wp:comment_author_IP>
			<wp:comment_date>2014-06-26 01:28:03</wp:comment_date>
			<wp:comment_date_gmt>2014-06-26 01:28:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Troy, when I wrap up the series I'll push everything to GitHub with a branch for each day. Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35861</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812144]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812147]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37731</wp:comment_id>
			<wp:comment_author><![CDATA[AJ]]></wp:comment_author>
			<wp:comment_author_email>amnajalal@live.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>39.48.59.241</wp:comment_author_IP>
			<wp:comment_date>2014-09-16 12:29:44</wp:comment_date>
			<wp:comment_date_gmt>2014-09-16 12:29:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(xyz is the name of my project). my project gives following error when i try to decorate my HomeController index method:
 'xyz.Filters.NotificationFilter' is not an attribute class

     [NotificationFilter]
        public ActionResult Index()
        {
            return View();
        }
and when i remove this [NotificationFilter], it gives a different error in the NotificationFilter.cs file:
xyz.Filters.NotificationFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)': no suitable method found to override

please help, thank you in advance]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812139]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37811</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:29:29</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:29:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 20:&nbsp;An ActionFilter to Inject Notifications [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38021</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-09-26 00:40:05</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 00:40:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[AJ, if possible, pop back to the index of the series and you will be able to pull down the completed project. 

From there, you would be able to examine to see what is different between the two. 

My guess would be that you're missing the inheritance on the NotificationFilter class from that error.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37731</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812139]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812146]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39231</wp:comment_id>
			<wp:comment_author><![CDATA[Roger]]></wp:comment_author>
			<wp:comment_author_email>roger@rogerhembury.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>109.222.187.204</wp:comment_author_IP>
			<wp:comment_date>2015-01-12 13:51:53</wp:comment_date>
			<wp:comment_date_gmt>2015-01-12 13:51:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I get an error on this line in the _MenuPartial:

foreach (NotificationViewModel notification in ViewBag.Notification

which then gives the error message:

LINQ to Entities doe not recognize the method 'System.String ToString()' method, and this method cannot be translated into a store expression

It appears to relate back to this line in NotificationFilter.cs:

NotificationType = g.Key.ToString()

because when I change it to NotificationType = "Notifications" it runs with no errors.

I've compared the code with the master code and I cannot see where the problem is. Any ideas? It's the only part of the entire series I cannot get to work.

I'm new to all this ASP.NET MVC stuff as I've only ever done Classic ASP and I am learning a lot from your series.

Thanks in advance.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812143]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39241</wp:comment_id>
			<wp:comment_author><![CDATA[Roger]]></wp:comment_author>
			<wp:comment_author_email>roger@rogerhembury.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>109.222.187.204</wp:comment_author_IP>
			<wp:comment_date>2015-01-12 16:48:10</wp:comment_date>
			<wp:comment_date_gmt>2015-01-12 16:48:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[RE Problem with NotificationType = g.Key.ToString(),

Found a solution:

Add "using System.Data.Entity.SqlServer;" and change .Select(g =&gt; new NotificationViewModel to .ToList().Select(g =&gt; new NotificationViewModel

and it all works perfectly!

Cheers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812142]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 21: Cleaning Up Filtering, the Layout &#038; the Menu</title>
		<link>http://jameschambers.com/2014/06/day-21-cleaning-up-filtering-the-layout-the-menu/</link>
		<pubDate>Thu, 26 Jun 2014 01:18:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4081</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>In software development we often talk about concepts like the Single Responsibility Principle. Web pages are often doing <em>lots</em> of things, so it’s hard to say that it should always apply when we’re building our views. But, in the spirit of Martin Fowler’s take on it, I would argue that our _Layout.cshtml is starting to get a lot of reasons as to why it might change, and for that reason, we’re going to split out the menu.</p> <h2>Extracting the Menu</h2> <p>In your Views\Shared folder add another partial called _MenuPartial.cshtml and paste in the following code.</p><pre class="csharpcode">@using SimpleSite.Models
<span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="nav navbar-nav"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Home", "Index", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("About", "About", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Contact", "Contact", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("My Peeps", "Index", "Simple")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>

    @if (ViewBag.Notifications != null)
    {
        foreach (NotificationViewModel notification in ViewBag.Notifications)
        {
            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>
                    @notification.NotificationType
                    <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="badge badge-@notification.BadgeClass"</span><span class="kwrd">&gt;</span>
                        @notification.Count
                    <span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        }
    }
<span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>If you flip back to our _Layout view, you’ll see that this is very close to what we had there. I’ve made two important changes:</p>
<ol>
<li>I’ve added a link to our SimpleController in the menu.</li>
<li>I’m checking to make sure there is data in the ViewBag before accessing the dynamic property. This will prevent errors should there be no notifications for the users.</li></ol>
<p>If you do #1 without #2 above, you will most definitely get errors because the only place that has notifications injected is in the Index action on the Home controller.</p>
<p>With those bits in place, be sure to pop back into your _Layout, and update the navbar where we had previously added the code for notifications. It should now only include a call to render our _MenuPartial and the _LoginPartial.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="navbar-collapse collapse"</span><span class="kwrd">&gt;</span>
    @Html.Partial("_MenuPartial")
    @Html.Partial("_LoginPartial")
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<p>If you run the site at this point you won’t get any errors, but you’ll only see the notifications on the home page. Let’s address that.</p>
<h2>Globally Registering an Action Filter</h2>
<p>We’re now going to set it up so that our NotificationFilter is executed on every request. I just ask that you remember that this is a demo, and that there are <a href="http://jameschambers.com/2014/06/day-20-an-actionfilter-to-inject-notifications/" target="_blank">a few caveats you should be aware of</a>.</p>
<p>During application startup (checkout your global.asax in the root of the site) you’ll notice a call to FilterConfig.RegisterGlobalFilters. There is no magic here. There’s a static method on a class located in your App_Start folder that helps to keep that global.asax nice and tidy. A GlobalFilterCollection is passed in and we can then add to it. </p>
<p>In previous versions of the MVC template, this wasn’t around, so most folks ended up either dropping in a ton of lifting into Application_Start or otherwise coming up with a comparable solution to the above. Now, the class that does the FilterConfig does the FilterConfig. Kinda like that whole Single Responsibility Principle again, eh?</p>
<p>Update FilterConfig (which has the global error handling baked in already) to also include the registration of our filter:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterGlobalFilters(GlobalFilterCollection filters)
{
    filters.Add(<span class="kwrd">new</span> HandleErrorAttribute());
    filters.Add(<span class="kwrd">new</span> NotificationFilter());
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
Now, return to the Home Controller and remove the NotificationFilter attribute from the Index action.&nbsp; It won’t really matter if you don’t (the Framework is smart enough to see that it’s already in play) but you might confuse the future version of yourself when you disable the global registration down the road and the filter keeps getting executed.</p>
<p>You’re all set!</p>
<h2>Next Steps</h2>
<p>One final step that you might want to consider in the clean up is to move your notification model to a separate DLL, but I’ll leave that as an exercise to the reader as it’s more of a “code” thing and less of an “MVC or Bootstrap” thing.</p>
<p>Next up, we’ll tackle user registration and membership.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4081</wp:post_id>
		<wp:post_date>2014-06-26 01:18:00</wp:post_date>
		<wp:post_date_gmt>2014-06-26 01:18:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-21-cleaning-up-filtering-the-layout-the-menu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781499143]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37911</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:47:14</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:47:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 21:&nbsp;Cleaning Up Filtering, the Layout &amp; the Menu [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40671</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-06-26 21:27:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-26 21:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, just curious, why are we linking my peeps to the simple view with just one piece of hard coded data?
Wouldn't it be better at this point to have it pointing to Persons?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2102370852]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41421</wp:comment_id>
			<wp:comment_author><![CDATA[Time]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sampgups.ru/pages/</wp:comment_author_url>
			<wp:comment_author_IP>92.249.104.63</wp:comment_author_IP>
			<wp:comment_date>2015-08-31 15:05:23</wp:comment_date>
			<wp:comment_date_gmt>2015-08-31 15:05:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>×àñû âàøå âðåìÿ</strong>

êðàòêàÿ âûäåðæêà]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441033524.342916;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42501</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 22:19:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 22:19:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I noticed same thing. It was probably a typo. I changed mine to

@Html.ActionLink("My Peeps", "Index", "Person")

And it worked as expected.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40671</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2102370852]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2354271373]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 22: Sprucing up Identity for Logged In Users</title>
		<link>http://jameschambers.com/2014/06/day-22-sprucing-up-identity-for-logged-in-users/</link>
		<pubDate>Sat, 28 Jun 2014 03:37:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4151</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Typically you wouldn’t want the entirety of the internet adding and editing records at will without some form of authentication and authorization so that you can keep track of who’s editing your data, or so that your users can keep track of their own.</p> <p>So, let’s continue with our project and build out some identity capabilities.</p> <h2>Okay, I’m Kidding. Just Press F5!</h2> <p>Great work, you’re all done!</p> <p>As most folks are well aware, the default templates for Asp.Net applications now ship with a sample account administration implementation (reasonably good ones, at that). Users are able to register and log in using pre-built models, controllers and views. You can easily extend the template with 3rd party login capabilities, allowing folks with Microsoft, Facebook or Google accounts (and, and, and…) to log into your site as well. We’ve now got substantial improvements to identity management overall, with things like two-factor authentication, reductions in the leaky abstractions we’ve lived with, better testability, more flexibility in storage options, and more.</p> <p>If you’re not familiar with these bits, it’s worth having a look, <strong>but this is a topic already well covered</strong>. Believe me, these are worth the reads:</p> <ul> <li>The Asp.Net Identity <a href="http://www.asp.net/identity" target="_blank">web site</a></li> <li>A <a href="http://www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity" target="_blank">background article on Identity</a> by the Asp.Net team</li> <li>Two-Factor <a href="http://www.asp.net/identity/overview/features-api/two-factor-authentication-using-sms-and-email-with-aspnet-identity" target="_blank">authentication</a> with SMS</li> <li>Using <a href="http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on" target="_blank">third-party authentication providers</a> on your site (Facebook, Twitter, Google, LinkedIn)</li></ul> <p>But we’re here to do Bootstrappy things, right? So let’s spruce up that top bar a little for our logged in users with some MVC bits we build (HTML helpers) and some Bootstrap bits (image classes) that will take our site up a level.</p> <h2>Bootstrap Image Classes</h2> <p align="left">The CSS library gives us a few easy-to-use helpers to make our images look consistent. Here’s a sample from the <a href="http://getbootstrap.com/css/#images" target="_blank">Bootstrap site</a>:</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image38.png" width="475" height="162"></p> <p>The classes are as follows:</p> <ul> <li>img-rounded – provides rounded corners to your rectangular images</li> <li>img-circle – turns any image into a circle</li> <li>img-thumbnail – makes your image look like a little Polaroid of itself</li></ul> <h2>Making Members Feel Welcome</h2> <p>Today we’re just going to add a little touch to the navbar that our logged in users will see, keying in off of the default implementation of the Identity providers.&nbsp; We’ll head in that direction by extending our HtmlHelper that generates Gravatar images, as we need to add a property for a CSS class to give us a nice round face on the page.&nbsp; But first, we’ll have to add the following line of code to the GravatarOptions class:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">string</span> CssClass { get; set; }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
We’ll need to add that to the tag, so let’s revist the GravatarImage, likely located in the Helpers folder, to check for a value and add it to the tag if present. The full method should now look like this:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">static</span> HtmlString GravatarImage(<span class="kwrd">this</span> HtmlHelper htmlHelper, <span class="kwrd">string</span> emailAddress, GravatarOptions options = <span class="kwrd">null</span>)
{
    <span class="kwrd">if</span> (options == <span class="kwrd">null</span>)
        options = GravatarOptions.GetDefaults();

    var imgTag = <span class="kwrd">new</span> TagBuilder(<span class="str">"img"</span>);

    emailAddress = <span class="kwrd">string</span>.IsNullOrEmpty(emailAddress) ? <span class="kwrd">string</span>.Empty : emailAddress.Trim().ToLower();

    <span class="rem">// &lt;-- adding support for CSS</span>
    <span class="kwrd">if</span> (!<span class="kwrd">string</span>.IsNullOrEmpty(options.CssClass))
    {
        imgTag.AddCssClass(options.CssClass);
    }
    <span class="rem">// adding support for CSS  --&gt;</span>

    imgTag.Attributes.Add(<span class="str">"src"</span>,
        <span class="kwrd">string</span>.Format(<span class="str">"http://www.gravatar.com/avatar/{0}?s={1}{2}{3}"</span>,
            GetMd5Hash(emailAddress),
            options.Size,
            <span class="str">"&amp;d="</span> + options.DefaultImageType,
            <span class="str">"&amp;r="</span> + options.RatingLevel
            )
        );

    <span class="kwrd">return</span> <span class="kwrd">new</span> HtmlString(imgTag.ToString(TagRenderMode.SelfClosing));
}</pre>
<p>Unfortunately there isn’t quite the exact Bootstrap class we need to make our image place and size well in the navbar, so we’ll need to open up our bootstrap.custom.css file and add the following structural class:
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p><pre class="csharpcode">.navbar-image {
  float: left;
  padding: 10px 5px;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Finally, we’ll pop over to our _LoginPartial.cshtml (in Views\Shared) and modify the block of code displayed for logged in users.&nbsp; Because I’m reusing the user’s name a couple of times (which is also their email address) I’m storing it in a variable first, and using that throughout the block. I also add a DIV as a container for our image, using the class that we just created. Last, I make a call to our GravatarImage helper, passing in the username (email!), an appropriate size for the toolbar (30px), and the Bootstrap class that gives us the shape we’re looking for (img-circle).</p><pre class="csharpcode">var username = User.Identity.GetUserName();
using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
{
        
@Html.AntiForgeryToken()
    
<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="navbar-image"</span><span class="kwrd">&gt;</span>
    @Html.GravatarImage(username, new GravatarOptions { Size = 30, CssClass = "img-circle" })
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    
<span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="nav navbar-nav navbar-right"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>
        @Html.ActionLink("Hello " + username + "!", "Manage", "Account", routeValues: null, htmlAttributes: new { title = "Manage" })
    <span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="javascript:document.getElementById('logoutForm').submit()"</span><span class="kwrd">&gt;</span>Log off<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>And now we’re rockin’ head shots in our navbar!</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image39.png" width="368" height="48"></p>
<h2>Next Steps</h2>
<p>Perhaps you’ve modified your user profiles so that the username doesn’t have to be an email address. You could easily modify this example to read from a different property and generate the same type of effect.</p>
<p>What is sparkle without shine? Let’s give our users the ability to choose their own look-and-feel.&nbsp; I mean, it worked for GeoCities, right?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4151</wp:post_id>
		<wp:post_date>2014-06-28 03:37:00</wp:post_date>
		<wp:post_date_gmt>2014-06-28 03:37:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-22-sprucing-up-identity-for-logged-in-users</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207819]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37551</wp:comment_id>
			<wp:comment_author><![CDATA[Fran Mullen]]></wp:comment_author>
			<wp:comment_author_email>franmullen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.34.101.17</wp:comment_author_IP>
			<wp:comment_date>2014-08-19 13:15:09</wp:comment_date>
			<wp:comment_date_gmt>2014-08-19 13:15:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you are finding that the navbar-img is positioning itself above "hello" and causing the navbar to grow down you could be having a similar problem to me.

It seems that the specificity in the bootstrap.css prevents overwriting from the custom.css in some cases. To get around this you can specify "div" at the css class declaration: (to make it more specific)

div.navbar-image {
  float: left;
  padding: 10px 5px;
}

that allows the overwrite to occur correctly.

For more info on CSS specificity: http://css-tricks.com/specifics-on-css-specificity/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812178]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41411</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Lennon]]></wp:comment_author>
			<wp:comment_author_email>kali.mist@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.123.230.6</wp:comment_author_IP>
			<wp:comment_date>2015-08-28 13:39:00</wp:comment_date>
			<wp:comment_date_gmt>2015-08-28 13:39:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Fran]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37551</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812178]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2222967017]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42511</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-12 17:24:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-12 17:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Correction to the source code. The link for user account management should be:

@Html.ActionLink("Hello " + username + "!", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })



Other than that, works like a charm. Thanks James!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2356075102]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 23: Choosing Your Own Look-And-Feel</title>
		<link>http://jameschambers.com/2014/06/day-23-choosing-your-own-look-and-feel/</link>
		<pubDate>Sun, 29 Jun 2014 12:28:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4221</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Here’s the thing: everybody’s site is going to look the same if everybody’s site uses Bootstrap, right? Well, if we did that to users, we’d sure be missing the point as developers, and for two key reasons: 1) With the LESS and SASS source it’s easy to customize, and 2) Because it’s easy to customize, there’s already people creating all kinds of alternate themes for Bootstrap.</p> <p>So, we aren’t headed down a slippery slope here, we just need to make a little effort to give our users some unique looking sites.&nbsp; Other posts will show you how to replace the Bootstrap theme, but this one will show you how to let your users choose from a list you’ve pre-built.</p> <h2>Download a Free Substitute</h2> <p>There are some great, free alternatives located at <a href="http://bootswatch.com/" target="_blank">Bootswatch.com</a>. So, start there and pick one or two to download, I chose Amelia and Darkly. We need to create a folder structure to organize our themes, and move the CSS into those folders. Mine ended up working like this:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image40.png" width="197" height="147"></p> <p>Note that I also pushed a copy of the stock CSS for bootstrap into this structure. This allows us to simplify our code for theme switching, allowing users to pick the base theme if they like.</p> <p style="padding-bottom: 10px; padding-top: 10px; padding-left: 10px; padding-right: 10px; background-color: #eee"><strong>Shameless plug</strong>: If you’re looking for professionally designed themes to replace your palette, you can help out this blogger (me!) by purchasing one over at <a href="https://wrapbootstrap.com/?ref=BootstrapOnMvc" target="_blank">{wrap}bootstrap</a>. They have a selection of great looking Bootstrap themes. A very affordable alternative to taking the time to create your own theme.</p> <h2>Creating a Helper Class</h2> <p>Next, we create a class called Bootstrap.cs (I put mine in \Helpers) so that we can programmatically work with the themes. This class is responsible for presenting the list of supported themes and resolving the path to them when we try to load the bundles.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Bootstrap
{
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> BundleBase = <span class="str">"~/Content/css/"</span>;

    <span class="kwrd">public</span> <span class="kwrd">class</span> Theme
    {
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Stock = <span class="str">"Stock"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Amelia = <span class="str">"Amelia"</span>;
        <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Darkly = <span class="str">"Darkly"</span>;
    }

    <span class="kwrd">public</span> <span class="kwrd">static</span> HashSet&lt;<span class="kwrd">string</span>&gt; Themes = <span class="kwrd">new</span> HashSet&lt;<span class="kwrd">string</span>&gt;
    {
        Theme.Stock,
        Theme.Amelia,
        Theme.Darkly
    };

    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">string</span> Bundle(<span class="kwrd">string</span> themename)
    {
        <span class="kwrd">return</span> BundleBase + themename;
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This is a simple class, but it prevents us from duplicating code all over the place or unnecessary spelling mistakes.</p>
<p>The other nice thing is that if you choose to add another theme to your project, you will just have to modify this one file and the rest will fall into place.&nbsp; For that to happen, we’ll need to modify our startup to generate all the appropriate bundles.</p>
<h2>Updating Our Startup Bits</h2>
<p>Head into BundleConfig.cs (inside of \App_Startup) and replace the code that creates the Bootstrap bundle with the following:</p><pre class="csharpcode"><span class="kwrd">foreach</span> (var theme <span class="kwrd">in</span> Bootstrap.Themes)
{
    var stylePath = <span class="kwrd">string</span>.Format(<span class="str">"~/Content/Themes/{0}/bootstrap.css"</span>, theme);

    bundles.Add(<span class="kwrd">new</span> StyleBundle(Bootstrap.Bundle(theme)).Include(
                stylePath,
                <span class="str">"~/Content/bootstrap.custom.css"</span>,
                <span class="str">"~/Content/site.css"</span>));
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We’re simply looping over that handle collection we created so that we could generate a bundle for every installed theme.&nbsp; We always want all the themes – startup is only run at as the application starts, so we need them all there – as different users may wish to select different themes.</p>
<h2>Making Our Layout “Themeable”</h2>
<p>What we really need to do here is just a quick update to figure out the user’s current theme, and then figure out what the correct bundle to use is.</p><pre class="csharpcode">@{
    var theme = Session[<span class="str">"CssTheme"</span>] <span class="kwrd">as</span> <span class="kwrd">string</span> ?? Bootstrap.Theme.Stock;
}
@Styles.Render(Bootstrap.Bundle(theme))</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>I’m using Session for now, but I’ll explain why in a bit that is bad idea. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/06/wlEmoticon-smile3.png"></p>
<p>Note that, at this point, you could set that theme default – right now set to Bootstrap.Theme.Stock – to whichever theme you like and run your app. The mechanics of building the bundle and the class to resolve it are all in place.</p>
<h2>Letting the User Choose a Theme</h2>
<p>Once again we’re going to revisit the _LoginPartial.cshtml file (in Views\Shared). In this round, we’re going to update the text that shows the logged in user’s email address (which, by default, is also their username). The LI for the username is now going to be a dropdown box in the navbar.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">li</span> <span class="attr">class</span><span class="kwrd">="dropdown"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span> <span class="attr">class</span><span class="kwrd">="dropdown-toggle"</span> <span class="attr">data-toggle</span><span class="kwrd">="dropdown"</span><span class="kwrd">&gt;</span>Hello @username! <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="caret"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="dropdown-menu"</span> <span class="attr">role</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>
            @Html.ActionLink("Manage Account", "Manage", "Account", routeValues: null, htmlAttributes: new { title = "Manage" })
        <span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span> <span class="attr">class</span><span class="kwrd">="divider"</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        @foreach (var theme in Bootstrap.Themes)
        {
            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="@Url.Action("</span><span class="attr">ChangeTheme</span><span class="kwrd">", "</span><span class="attr">Profile</span><span class="kwrd">", new { themename = theme})"</span><span class="kwrd">&gt;</span>@theme<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        }
    <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
I’ve taken that LI that was there – all it had was the user name, which was a link to Manage Account – and replaced it will all of the above code. We put in a divider and iterate over the list of known themes.&nbsp; Each will be a link to a “ChangeTheme” action on the “Profile” controller.</p>
<h2>Adding our New Profile Controller</h2>
<p>Throw ProfileController.cs in your \Controllers directory with the following, lone action in the class:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult ChangeTheme(<span class="kwrd">string</span> themename)
{
    Session[<span class="str">"CssTheme"</span>] = themename;
    <span class="kwrd">if</span> (Request.UrlReferrer != <span class="kwrd">null</span>)
    {
        var returnUrl = Request.UrlReferrer.ToString();
        <span class="kwrd">return</span> <span class="kwrd">new</span> RedirectResult(returnUrl);
    }
    <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>, <span class="str">"Home"</span>);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>If we have a referring URL we can push the user back to the same page, otherwise we ship them home. The preference of theme is set in the Session.</p>
<p>And there you have it: users can now pick their own theme on your site:</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image41.png" width="476" height="301"></p>
<h2>Next Steps</h2>
<p>This data doesn’t really belong in the user’s session…whenever the app pool is recycled or the website or IIS is restarted or their session expires they will lose this choice. Even worse, session and Identity aren’t on the same lifecycle, so when they log out the session persists and they’ll still see the theme they chose when they logged in.</p>
<p>So, where should it be stored? Tune in next time as we answer this question and more. <img class="wlEmoticon wlEmoticon-smilewithtongueout" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile with tongue out" src="http://jameschambers.com/wp-content/uploads/2014/06/wlEmoticon-smilewithtongueout.png"></p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/06/wlEmoticon-smile3.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4221</wp:post_id>
		<wp:post_date>2014-06-29 12:28:00</wp:post_date>
		<wp:post_date_gmt>2014-06-29 12:28:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-23-choosing-your-own-look-and-feel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207857]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36961</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 21:19:16</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 21:19:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello James,
You said...
<blockquote> Throw <b>Profile.cs</b> in your \Controllers directory</blockquote>
Shoudn't it be <b>Profile<em>Controller</em>.cs</b> ?

Thanks
ps great series.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812207]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36971</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 22:12:52</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 22:12:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also,

I don't know if anybody else is having the same problem, but when I construct my dropdown list to change the themes, it doesn't do anything.  I can't make it drop down and show me the list of themes nor does the default link (Manage Account) work either.

any thoughts?

Thanks again]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812206]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36981</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:32:03</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:32:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That is correct...I'll update the note shortly. Thanks for the catch! You can actually name the file whatever you like, but to follow convention you need the Controller appended on the class name and, of course, you need to inherit from the framework's controller class (either directly or indirectly).

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36961</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812207]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812214]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36991</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:33:06</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:33:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Figured it out.

I had commented out the <code>@Scripts.Render("~/bundles/bootstrap")</code> in _Layout.cshtml.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812205]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37001</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:35:17</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:35:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hrmmm...nothing standing out from what you've described. Make sure you have the Bootstrap JS bundled (it should be in your App_Start\BundleConfig) and included in your template (views\shared\_layout.cshtml).

Beyond that, are you getting any errors in the console? Use F12 dev tools in IE or Chrome to see any messages from Bootstrap as it tries to load.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36971</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812206]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812213]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37231</wp:comment_id>
			<wp:comment_author><![CDATA[Gennady Gorlachev]]></wp:comment_author>
			<wp:comment_author_email>ggorlachev@roiss.ru</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.87.137.163</wp:comment_author_IP>
			<wp:comment_date>2014-07-27 09:36:12</wp:comment_date>
			<wp:comment_date_gmt>2014-07-27 09:36:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks James,

When implemented you r solution I found, that icons disappear.
They come back when I change manually path to fonts in bootstrap.css files to 

../../../fonts/glyphicons-halflings-regular.eot ...
...

Thanks again]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812209]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37241</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.93.134.67</wp:comment_author_IP>
			<wp:comment_date>2014-07-28 15:34:22</wp:comment_date>
			<wp:comment_date_gmt>2014-07-28 15:34:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I didn't run into that Gennady, but thanks for sharing your solution.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37231</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812209]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812344]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37271</wp:comment_id>
			<wp:comment_author><![CDATA[Richard Thomas]]></wp:comment_author>
			<wp:comment_author_email>rthomas@freckie.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>148.177.1.215</wp:comment_author_IP>
			<wp:comment_date>2014-07-29 14:50:02</wp:comment_date>
			<wp:comment_date_gmt>2014-07-29 14:50:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello James,

Stupid question:  where does the code in Making Our Layout “Themeable” go?  I assume in _Layout.cshtml, but where?  Thanks.

Rich]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812208]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37291</wp:comment_id>
			<wp:comment_author><![CDATA[Bobby Montalvo]]></wp:comment_author>
			<wp:comment_author_email>bobby.montalvo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.52.167.244</wp:comment_author_IP>
			<wp:comment_date>2014-08-01 21:24:20</wp:comment_date>
			<wp:comment_date_gmt>2014-08-01 21:24:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Rich,

In _Layout.cshtml (Line 7 for me), replace:
<code>
@Styles.Render("~/Content/css")
</code>
with
<code>
@{
    var theme = Session["CssTheme"] as string ?? Bootstrap.Theme.Stock;
}
@Styles.Render(Bootstrap.Bundle(theme))
</code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37271</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812208]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812215]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37301</wp:comment_id>
			<wp:comment_author><![CDATA[Srinivas Chintakindi]]></wp:comment_author>
			<wp:comment_author_email>chsrinu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://srinibytes.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>50.182.238.234</wp:comment_author_IP>
			<wp:comment_date>2014-08-02 15:10:14</wp:comment_date>
			<wp:comment_date_gmt>2014-08-02 15:10:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Rich, you should write the below code in  section to make the layout "Themeable".

@{
    var theme = Session["CssTheme"] as string ?? Bootstrap.Theme.Stock;
}
@Styles.Render(Bootstrap.Bundle(theme))]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37271</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812208]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812212]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40511</wp:comment_id>
			<wp:comment_author><![CDATA[Brian Geraghty]]></wp:comment_author>
			<wp:comment_author_email>briangeraghty@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.6.192.25</wp:comment_author_IP>
			<wp:comment_date>2015-06-20 23:14:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-20 23:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi John,
I'm guessing you figured out a solution to this already but in case anyone else has the same problem. The code in BundleConfig should be the below, once i added this my dropdown menu started working

        public static void RegisterBundles(BundleCollection bundles)
        {

            bundles.Add(new ScriptBundle("~/bundles/jquery").Include("~/Scripts/jquery-{version}.js"));

            bundles.Add(new ScriptBundle("~/bundles/jqueryval").Include(
"~/Scripts/jquery.validate*"));

            // Use the development version of Modernizr to develop with and learn from. Then, when you're
            // ready for production, use the build tool at http://modernizr.com to pick only the tests you need.

            bundles.Add(new ScriptBundle("~/bundles/modernizr").Include(
                        "~/Scripts/modernizr-*"));

            // This is where the JS library is added to the bundle...
            bundles.Add(new ScriptBundle("~/bundles/bootstrap").Include(
                      "~/Scripts/bootstrap.js",
                      "~/Scripts/respond.js"));

            foreach (var theme in Bootstrap.Themes)
            {
                var stylePath = string.Format("~/Content/Themes/{0}/bootstrap.css", theme);
                bundles.Add(new StyleBundle(Bootstrap.Bundle(theme)).Include(
                    stylePath,
                    "~/Content/bootstrap.custom.css",
                    "~/Content/site.css"));
            }

            // Set EnableOptimizations to false for debugging. For more information,

            // visit http://go.microsoft.com/fwlink/?LinkId=301862

            BundleTable.EnableOptimizations = true;
        }]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37001</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812213]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2090472595]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42521</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-12 18:21:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-12 18:21:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Instead of hard-coding the theme names, I loaded them from the folder names. So in HelpersBootstrap.cs, I took out the hard-coded strings, changed the Themes property from Hashset to List and added a static constructor:

static Bootstrap()
{
var themesFolder = Path.Combine(HostingEnvironment.ApplicationPhysicalPath, "Content", "Themes");
Themes = new List(Directory.GetDirectories(themesFolder).Select(x =&gt; Path.GetFileName(x)));
}

Then, in _Layout.cshtml, I changed the default theme selection line to:

var theme = Session["CssTheme"] as string ?? Bootstrap.Themes.First();



So now adding new themes doesn't require a recompilation of the code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2356311652]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42531</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-11-12 23:11:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-12 23:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great addition! Thanks @aliusumbra:disqus!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42521</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2356311652]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2356811364]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 24: Storing User Profile Information</title>
		<link>http://jameschambers.com/2014/06/day-24-storing-user-profile-information/</link>
		<pubDate>Mon, 30 Jun 2014 10:42:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4301</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Session is an attractive and oft-used mechanism for storing user profile data. It’s freely available and has been around forever. But session state and logged-in user identity, while they may seem closely related, do not operate on the same lifecycle and sensitive data, personal data, could get “leaked out”.</p> <p>And hey…this post assumes you’ve been following along with the series and you have already signed in at least once with a registered user.</p> <h2>A Better Place to Store User Profile Data</h2> <p>In <a href="http://jameschambers.com/2014/06/day-23-choosing-your-own-look-and-feel/" target="_blank">yesterday’s article</a> we penned in the user’s choice of Bootstrap Theme and stored their selection in the Session object. Brock Allen wrote a great post a couple years back on why this kind of thing isn’t a great approach. The things that concern us most are that:</p> <ul> <li>By default, session isn’t durable and doesn’t scale  <li>Even if we move to a more durable session management approach, there’s no persistence of session data and yet we’re making network hops  <li>Session isn’t tied to users signing in or out</li></ul> <p>So, today, we’re going to fix that Session access with a permanent, more reliable and secure approach.</p> <h2>Extending the User Profile Data</h2> <p>Since you’ve already <a href="http://jameschambers.com/2014/06/day-22-sprucing-up-identity-for-logged-in-users/" target="_blank">created an account</a>, you technically have some profile information already stored in your site’s database. We’re going to leverage the identity infrastructure of our project and extend the class that keeps track of our data, adding in the user’s selected theme. In your Solution Explorer, locate the ApplicationUser class under Models. The easiest way is usually just through the search box at the top:</p> <p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image42.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb21.png" width="240" height="181"></a></p> <p>Add the following property to your ApplicationUser class:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">string</span> CssTheme { get; set; }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Something to keep in mind: we’re going to be modifying a class that participates in Entity Framework persistence, as managed by the Asp.Net Identity libraries. This is handy, but not free. Because we’re changing essentially the schema of a table, we’ll also need to enable and create a migration from the Package Manager Console:</p><pre class="csharpcode">Enable-Migrations -ContextTypeName SimpleSite.Models.ApplicationDbContext -MigrationsDirectory Migrations\Identity
Add-Migration CssTheme -ConfigurationTypeName SimpleSite.Migrations.Identity.Configuration</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Note that we’ve got a pre-existing migration on our site, <strong>so we need to now be more specific</strong> and explicitly name the Configuration type. Also, in enabling the migrations, I added the MigrationsDirectory folder for the DbContext, so that our identity-related migrations would be in a sub-folder. </p>
<p>The Entity Framework created the appropriate classes for me to track DbContext-specific settings and the migration that I needed to update the database, but those are just the classes, nothing’s changed in the DB yet. That all needs to be followed by an update to our database like so:</p><pre class="csharpcode">Update-Database -ConfigurationTypeName SimpleSite.Migrations.Identity.Configuration</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We can now store the data we need to, we just need a way to be able to stuff it in there.</p>
<h2>Updating our Controller</h2>
<p>Since we’re now targeting a user managed from the Identity libraries we’re going to wipe out the code that writes to session and instead use the relevant classes to locate the user profile and update it. Head over to ProfileController.cs (in Helpers\) and replace the call to Session with the following:</p><pre class="csharpcode">var userStore = <span class="kwrd">new</span> UserStore&lt;ApplicationUser&gt;(<span class="kwrd">new</span> ApplicationDbContext());
var manager = <span class="kwrd">new</span> UserManager&lt;ApplicationUser&gt;(userStore);
var user = manager.FindById(User.Identity.GetUserId());
user.CssTheme = themename;
manager.Update(user);</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We resolve the user through a UserManager, and the manager needs a UserStore to locate it’s data. We can then set the CssTheme and update the user through the manager. ApplicationUser and ApplicationDbContext are just the names of the types that were automatically created for you through the project template.</p>
<p>It’s only 5 lines of code to access and update a property, but you can see how there must be a better solution to all this than having to write this code all the time. Some day I bet a post will pop up on that…</p>
<h2>Updating our Layout</h2>
<p>Open up _Layout.cshtml (in Shared\Views) and update the code that resolves the correct style bundle. We’re going to use a similar approach to what we did in the controller to find the user and property, and we’ll handle the null case a little differently than we were previously as well by setting the default in advance. </p><pre class="csharpcode">@{
    var theme = Bootstrap.Theme.Stock;
    <span class="kwrd">if</span> (User.Identity.IsAuthenticated)
    {
        var userStore = <span class="kwrd">new</span> UserStore&lt;ApplicationUser&gt;(<span class="kwrd">new</span> ApplicationDbContext());
        var manager = <span class="kwrd">new</span> UserManager&lt;ApplicationUser&gt;(userStore);
        var user = manager.FindById(User.Identity.GetUserId());
        theme = user.CssTheme ?? theme;
    }
    @Styles.Render(Bootstrap.Bundle(theme))
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Our other line of code – to actually render the bundle – will remain the same, as you can see at the bottom.</p>
<h2>Wait, What Did We Actually Do Again?</h2>
<p>I know, I know, it’s hard to put time into something when it seems that nothing really changed. Our functionality is identical and users still have the same options as they did before.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/06/image43.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/06/image_thumb22.png" width="398" height="226"></a></p>
<p>But technically our solution is a little more sound.&nbsp; Here’s what we did again as a bit of a recap:</p>
<ul>
<li>We added a CssTheme property to our ApplicationUser class</li>
<li>We enabled migrations on our ApplicationDbContext, using a specify folder for our identity migrations</li>
<li>We added a migration to accommodate our new CssTheme property</li>
<li>We updated our controller to use the Identity objects instead of session</li>
<li>We refactored our _Layout to get the theme of choice from the user’s profile information</li></ul>
<h2>Next Steps</h2>
<p>For brownie points here, one could likely go to the “manage” bits (under Controllers\AccountController and Views\Account) and allow the user to make a theme selection from there. It’s likely a better home than continuously being available from the home page.</p>
<p>Hang on a sec, though…if we’ve got a place to store information about <em>specific</em> users now, why don’t we revisit our code that puts up those lovely notification icons in the navbar?</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4301</wp:post_id>
		<wp:post_date>2014-06-30 10:42:00</wp:post_date>
		<wp:post_date_gmt>2014-06-30 10:42:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-24-storing-user-profile-information</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207881]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37061</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 06:10:58</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 06:10:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Me again,
Note, to make the Views\Shared\_Layout.cshtml work, I had to add the <code>Microsoft.AspNet.Identity</code> and <code>Microsoft.AspNet.Identity.EntityFramework</code> to the name spaces of Views\Web.config.  Initially I just used the full names when defining the userStore and the manager but I got errors that said it didn't recognize the method manager.FindById.  It did however recognize manager.FindByIdAsync.  
I don't understand why this is happened, but anyway I got it to work i.e. it persists to the database and remembers the new theme when I log back on.
PS: small typo, ProfileController.cs (in Helpers\)  should be ProfileController.cs (in <b>Controllers\</b>)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812223]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37151</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.16.247.214</wp:comment_author_IP>
			<wp:comment_date>2014-07-23 00:52:46</wp:comment_date>
			<wp:comment_date_gmt>2014-07-23 00:52:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for all the comments, suggestions and corrections John! I'll be sure to work them in!

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37061</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812223]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812228]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37821</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:29:46</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:29:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 24:&nbsp;Storing User Profile Information [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38921</wp:comment_id>
			<wp:comment_author><![CDATA[Tomer]]></wp:comment_author>
			<wp:comment_author_email>Tomer.bu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.108.44.73</wp:comment_author_IP>
			<wp:comment_date>2014-11-19 13:05:29</wp:comment_date>
			<wp:comment_date_gmt>2014-11-19 13:05:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, James!
Great tutorial and I really love the series of posts (even bought your book :)).

        You may also get hold of the manager like this:
 <code> 
            var manager = HttpContext.GetOwinContext().GetUserManager();
            var user = manager.FindById(User.Identity.GetUserId());
            user.CssTheme = themename;
            manager.Update(user);
 </code> 

It just seems like a better approach.

Thanks again for sharing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812229]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39011</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2014-12-03 22:25:05</wp:comment_date>
			<wp:comment_date_gmt>2014-12-03 22:25:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great tip, thanks Tomer!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>38921</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812229]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812345]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39662</wp:comment_id>
			<wp:comment_author><![CDATA[Roger W]]></wp:comment_author>
			<wp:comment_author_email>RogerW@l-space-design.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.l-space-design.com/</wp:comment_author_url>
			<wp:comment_author_IP>202.37.162.100</wp:comment_author_IP>
			<wp:comment_date>2015-03-10 23:50:38</wp:comment_date>
			<wp:comment_date_gmt>2015-03-10 23:50:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You know, I almost always avoid session, and I agree mostly about using the User Profile, except that in this one specific case (theming)  I would actually choose to use a persistent cookie instead.  

Because I would want them to keep their theme when not logged in (and update it when they do if it got changed)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812227]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39681</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-03-15 22:05:57</wp:comment_date>
			<wp:comment_date_gmt>2015-03-15 22:05:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, Roger, that's a great point. Thanks for the comment & appreciate the contribution. Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39662</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812227]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812346]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 25: Personalizing Notifications</title>
		<link>http://jameschambers.com/2014/07/day-25-personalizing-notifications-bootstrap-tables/</link>
		<pubDate>Tue, 01 Jul 2014 13:45:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4371</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Back on <a href="http://jameschambers.com/2014/06/day-19-long-running-notifications-using-badges-and-entity-framework-code-first/" target="_blank">Day 19</a> we introduced persistent storage for notifications, allowing us to pop a <a href="http://jameschambers.com/2014/06/day-18-customizing-and-rendering-bootstrap-badges/" target="_blank">custom badge</a> up in the navbar. This was great, but as we left it, it was creating notifications only in the seed method of our DbContext migrations configuration, and the notifications were shown to all users. Not too helpful for dialing in on specific details or messages for specific users.</p> <p>Today we’re going to get that “everyone’s data” out of the mix, update our notifications so that they belong to a single user and then create a temporary way for us to add new, user-specific notifications to the site.</p> <h2>Clearing our DB and Seed Method</h2> <p>Let’s get those records (from our seed method) out of the database. Locate your DB in SQL Server Management Studio and delete the rows. Something this simple is adequate:</p><pre class="csharpcode"><span class="kwrd">delete</span> <span class="kwrd">from</span> notifications</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Now, the only thing is that effort is all in vain if we don’t clean out our seed method. Each time the database configuration class is used to perform or check for migrations it will re-insert those rows.</p>
<p>Locate the Configuration class, which should be in \Migrations directory in the root of your solution. Comment out or delete all the code we added to upsert the notifications.</p>
<h2>Extend our Notifications Class</h2>
<p>Let’s next add a couple of properties to our Notification class, located in \Models.</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">string</span> UserId { get; set; }
<span class="kwrd">public</span> <span class="kwrd">bool</span> IsDismissed { get; set; }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Remember that when we modify a class that takes part in our Entity Framework works that we’ll also need to generate a migration and update the database to match our model. Type these commands into the Package Manager Console, updating the namespace appropriately:</p><pre class="csharpcode">Add-Migration PersonalNotifications -ConfigurationTypeName SimpleSite.Migrations.Configuration
Update-Database -ConfigurationTypeName SimpleSite.Migrations.Identity.Configuration</pre>
<p>The first command creates a migration for us, and the second updates the database accordingly.
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>Updating our ActionFilter</h2>
<p>So, if notifications belong only to users, we never want our filter to execute if the current request is for an unauthenticated user. We’ll also want to make sure that we only capture notifications for the user that <em>is</em> logged in, and then, only the notifications that have not yet been seen.&nbsp; </p>
<p>Here’s the updated code for the NotificationFilter (located in \Filters):</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnActionExecuted(ActionExecutedContext filterContext)
{
    <span class="kwrd">if</span> (!filterContext.HttpContext.User.Identity.IsAuthenticated) <span class="kwrd">return</span>;

    var userId = filterContext.HttpContext.User.Identity.GetUserId();

    var context = <span class="kwrd">new</span> SiteDataContext();
    var notifications = context.Notifications
        .Where(n =&gt; n.UserId == userId)
        .Where(n =&gt; !n.IsDismissed)
        .GroupBy(n =&gt; n.NotificationType)
        .Select(g =&gt; <span class="kwrd">new</span> NotificationViewModel
        {
            Count = g.Count(),
            NotificationType = g.Key.ToString(),
            BadgeClass = NotificationType.Email == g.Key
                ? <span class="str">"success"</span>
                : <span class="str">"info"</span>
        });

    filterContext.Controller.ViewBag.Notifications = notifications;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Scaffolding a Temporary Controller and View</h2>
<p>The MVC Framework has some great scaffolding capabilities, as we’ve explored in minor detail so far. Today we’re going to use this feature to create our whole controller and the related views for all our CRUD operations. Right-click as you normally do on the controllers folder, and click Add-&gt;Controller. </p>
<p>This time ‘round, use the Scaffold for the “MVC5 Controller with views, using Entity Framework”. Fill out the options as follows:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image.png" width="599" height="382"></p>
<p>You are selecting the Notification model, checking off “Generate views” and “Use a layout page”. The controller name should automatically be set to NotificationsController for you. Click Add to finish it out.</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image1.png" width="338" height="300"></p>
<p>One more thing: you’re going to want an easy way to get your UserId – it’s what we’re using to match the notifications – so add the following to your Create view in Views\Notifications\Create.cshtml:</p><pre class="csharpcode">@<span class="kwrd">if</span> (User.Identity.IsAuthenticated)
{
    &lt;p&gt;Your User ID <span class="kwrd">is</span> &lt;b&gt;@User.Identity.GetUserId()&lt;/b&gt;&lt;/p&gt;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>That will output your UserId (which is a Guid) so that you can create notifications for yourself. </p>
<p>Now when you run the site, sign in and navigate to the /Notifications path. This will show you an empty list, but you’ll have a link to create some new records. Add some to the site, using your UserId, and watch the navbar light up.</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image2.png" width="543" height="40"></p>
<h2>Next Steps</h2>
<p>Now, I did say this is a temporary solution. By no means would you actually have a situation where you’d have users enter their own notifications, you’d more likely have events happen in the system that require some notification to be required – perhaps the completion of a job or a required update to some business process.&nbsp; That’s why we just used the scaffolding today…the NotificationsController and view are something that you’ll likely eventually just delete…and that’s okay! One of the nice things about scaffolding is that you’re not married to it. So delete it when you’re done with it.</p>
<p>In the real world, however, you would likely want users to be able to see and manage notifications in some way. Tomorrow we’ll look at getting the first of those bits in place.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4371</wp:post_id>
		<wp:post_date>2014-07-01 13:45:00</wp:post_date>
		<wp:post_date_gmt>2014-07-01 13:45:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-25-personalizing-notifications-bootstrap-tables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207914]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36201</wp:comment_id>
			<wp:comment_author><![CDATA[somnath]]></wp:comment_author>
			<wp:comment_author_email>som_nitjsr@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.226.129.18</wp:comment_author_IP>
			<wp:comment_date>2014-07-03 12:55:18</wp:comment_date>
			<wp:comment_date_gmt>2014-07-03 12:55:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Add-Migration PersonalNotifications -ConfigurationTypeName SimpleSite.Migrations.Configuration
Update-Database -ConfigurationTypeName SimpleSite.Migrations.Identity.Configuration

here second line should be 
<b>ConfigurationTypeName SimpleSite.Migrations.Configuration</b>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812255]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36541</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas]]></wp:comment_author>
			<wp:comment_author_email>ph00m@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.98.80.11</wp:comment_author_IP>
			<wp:comment_date>2014-07-17 09:19:43</wp:comment_date>
			<wp:comment_date_gmt>2014-07-17 09:19:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Took me a couple of minutes to get the database updated to the new migration, so to help out others you need to change 
Update-Database -ConfigurationTypeName SimpleSite.Migrations.Identity.Configuration
to 
Update-Database -ConfigurationTypeName SimpleSite.Migrations.Configuration
when we're not creating the migration in the Identity folder as we were with the CssTheme earlier.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812254]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36671</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:28:19</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:28:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Thomas! You're correct, you'll need to make sure the namespace/type matches exactly. Easiest is often to navigate to your class file and copy the namespace from there.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36541</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812254]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812259]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37071</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 07:16:33</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 07:16:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tip,
Add <code> using Microsoft.AspNet.Identity;</code> to \Filters\NotificationFilter.cs]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812253]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37131</wp:comment_id>
			<wp:comment_author><![CDATA[Friday Five - July 18, 2014 - The Microsoft MVP Award Program Blog - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/mvpawardprogram/archive/2014/07/22/friday-five-july-18-2014.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.147</wp:comment_author_IP>
			<wp:comment_date>2014-07-22 17:43:41</wp:comment_date>
			<wp:comment_date_gmt>2014-07-22 17:43:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 3.&nbsp;Day 25: Personalizing Notifications [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37141</wp:comment_id>
			<wp:comment_author><![CDATA[Friday Five &#8211; July 18, 2014 | CmdExec Technology News]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cmdexec.com/friday-five-july-18-2014/</wp:comment_author_url>
			<wp:comment_author_IP>23.91.112.152</wp:comment_author_IP>
			<wp:comment_date>2014-07-22 18:38:20</wp:comment_date>
			<wp:comment_date_gmt>2014-07-22 18:38:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 3. Day 25: Personalizing Notifications [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37921</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:47:30</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:47:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 25:&nbsp;Personalizing Notifications [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39091</wp:comment_id>
			<wp:comment_author><![CDATA[paco]]></wp:comment_author>
			<wp:comment_author_email>franciscovega2010@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.191.6.233</wp:comment_author_IP>
			<wp:comment_date>2014-12-23 16:38:07</wp:comment_date>
			<wp:comment_date_gmt>2014-12-23 16:38:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi james i have a question, what i need to do, to pass automatic the value of the user id, instead of copy paste]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812252]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39521</wp:comment_id>
			<wp:comment_author><![CDATA[Ivan]]></wp:comment_author>
			<wp:comment_author_email>ibreslau@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.29.218.245</wp:comment_author_IP>
			<wp:comment_date>2015-02-08 12:04:04</wp:comment_date>
			<wp:comment_date_gmt>2015-02-08 12:04:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That helped, thanks! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37071</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812253]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812260]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40771</wp:comment_id>
			<wp:comment_author><![CDATA[MostlyLucid]]></wp:comment_author>
			<wp:comment_author_email>joe@joeruder.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.188.81.150</wp:comment_author_IP>
			<wp:comment_date>2015-07-08 11:22:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-08 11:22:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this -- I was stuck for a bit.
jc - perhaps take a minute and fix your post?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36671</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812259]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2123261724]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42541</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-13 18:01:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-13 18:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I followed all the steps in this page, and I still got this error:
--------
An exception of type 'System.InvalidOperationException' occurred in EntityFramework.dll but was not handled in user code
Additional information: The model backing the 'SiteDataContext' context has changed since the database was created. Consider using Code First Migrations to update the database (http://go.microsoft.com/fwlink/?LinkId=238269).

-------


Looking at the database, it looks like the migration didn't succeed, for some reason.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2358123292]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42551</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-13 18:05:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-13 18:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good catch. This tripped me up as well. I hope JC can take a minute to fix his otherwise flawless tutorial.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36541</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812254]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2358130431]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 26: Bootstrap Tabs for Managing Accounts</title>
		<link>http://jameschambers.com/2014/07/day-26-bootstrap-tabs-for-managing-accounts/</link>
		<pubDate>Thu, 03 Jul 2014 00:40:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4421</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>We’ve got this <a href="http://jameschambers.com/2014/07/day-25-personalizing-notifications-bootstrap-tables/" target="_blank">notification thing</a> going on now and we’d like to give users a way to review notifications. There’s a fairly acceptable landing spot on the “Manage Account” view (at /Account/Manage in your browser), at least for the purpose of these exercises, so we’ll flesh things out there.</p> <p>However, the view is isn’t really set up for notifications (it’s truthfully not the best spot) so we’ll need to give us some UI to make it work.</p> <h2>Understanding the Tab Component</h2> <p>There are two main elements you’ll need to get the tabs going correctly, a UL tag that will set up as the menu elements, and a DIV to act as a container for the content.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="nav nav-tabs"</span> <span class="attr">role</span><span class="kwrd">="tablist"</span> <span class="attr">id</span><span class="kwrd">="accountTab"</span><span class="kwrd">&gt;</span>
  <span class="rem">&lt;!-- content --&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-content"</span><span class="kwrd">&gt;</span>
  <span class="rem">&lt;!-- content --&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Visually, you can link those elements as illustrated below:</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/07/image3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image_thumb.png" width="503" height="283"></a></p>
<p>Because our site includes the JavaScript library for Bootstrap our tabs will automatically render and behave correctly. The classes help with the visuals, and the JS takes care of the behavior.</p>
<p>The UL will contain LI elements for each tab that you wish to display on the page. For us, that will the notifications, linked accounts and password reset. Those last two are the content that already exists on the page at \Views\Account\Manage.cshtml, and the notifications bits are what we’ll fill in after our tabs are in place.</p>
<p>In addition to those two root elements, you can use a bit of JavaScript to manipulate the tabs if needed. For example, if you wanted a particular tab displayed on page load, you could use the ID as part of a jQuery selector and call the show method as follows:</p><pre class="csharpcode">$(<span class="str">'#accountTab a[href="#linkedAccounts"]'</span>).tab(<span class="str">'show'</span>);</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The DIV for content will in turn hold container elements for the rest of the content you want on the page. The structure will look something like this:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-content"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane active"</span> <span class="attr">id</span><span class="kwrd">="notifications"</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!-- content --&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane"</span> <span class="attr">id</span><span class="kwrd">="linkedAccounts"</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!-- content --&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane"</span> <span class="attr">id</span><span class="kwrd">="passwordReset"</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!-- content --&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<p>Each of the tab-pane DIVs could also have a fade class applied, which creates a nice content-switching visual. Let’s use that.</p>
<h2>Updating the View</h2>
<p>If you haven’t done so already, open up the \Views\Account\Manage.cshtml file and start cutting it up! Inside the DIV.row DIV.col-md-12 structure, add the UL for the tab headers, and add a DIV to contain the tab pages including a placeholder for notifications, and the DIVs for linked accounts and password reset. Move the content from those parts of the page in.</p>
<p>The final page code should be similar to the following:</p><pre class="csharpcode">@using SimpleSite.Models;
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "Manage Account";
}

<span class="kwrd">&lt;</span><span class="html">h2</span><span class="kwrd">&gt;</span>@ViewBag.Title.<span class="kwrd">&lt;/</span><span class="html">h2</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="row"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="col-md-12"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p</span> <span class="attr">class</span><span class="kwrd">="text-success"</span><span class="kwrd">&gt;</span>@ViewBag.StatusMessage<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="nav nav-tabs"</span> <span class="attr">role</span><span class="kwrd">="tablist"</span> <span class="attr">id</span><span class="kwrd">="accountTab"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">li</span> <span class="attr">class</span><span class="kwrd">="active"</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#notifications"</span> <span class="attr">role</span><span class="kwrd">="tab"</span> <span class="attr">data-toggle</span><span class="kwrd">="tab"</span><span class="kwrd">&gt;</span>Notifications<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#linkedAccounts"</span> <span class="attr">role</span><span class="kwrd">="tab"</span> <span class="attr">data-toggle</span><span class="kwrd">="tab"</span><span class="kwrd">&gt;</span>Linked Accounts<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#passwordReset"</span> <span class="attr">role</span><span class="kwrd">="tab"</span> <span class="attr">data-toggle</span><span class="kwrd">="tab"</span><span class="kwrd">&gt;</span>Password Reset<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-content"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane fade active"</span> <span class="attr">id</span><span class="kwrd">="notifications"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>Here's where we'll put our notifications.<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane fade"</span> <span class="attr">id</span><span class="kwrd">="linkedAccounts"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">id</span><span class="kwrd">="externalLogins"</span><span class="kwrd">&gt;</span>
                    @Html.Action("RemoveAccountList")
                    @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { Action = "LinkLogin", ReturnUrl = ViewBag.ReturnUrl })
                <span class="kwrd">&lt;/</span><span class="html">section</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane fade"</span> <span class="attr">id</span><span class="kwrd">="passwordReset"</span><span class="kwrd">&gt;</span>
                @if (ViewBag.HasLocalPassword)
                {
                    @Html.Partial("_ChangePasswordPartial")
                }
                else
                {
                    @Html.Partial("_SetPasswordPartial")
                }
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>


@section Scripts { @Scripts.Render("~/bundles/jqueryval") }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Next Steps</h2>
<p>All that’s left now is to get our list of user-specific notifications into our view. Tomorrow we’ll get a view model figured out, populate it with the user’s notifications and get it rendering in a Bootstrap-styled table in the view.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4421</wp:post_id>
		<wp:post_date>2014-07-03 00:40:00</wp:post_date>
		<wp:post_date_gmt>2014-07-03 00:40:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-26-bootstrap-tabs-for-managing-accounts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207975]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>38862</wp:comment_id>
			<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
			<wp:comment_author_email>scottbrussell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.166.159.10</wp:comment_author_IP>
			<wp:comment_date>2014-11-12 14:51:06</wp:comment_date>
			<wp:comment_date_gmt>2014-11-12 14:51:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey James, thanks for the book. I bought it and have really enjoyed it so far. I have a question about this topic though:
Each tab has to load a partial view from a different controller. I'm setting up an account system where the page has a panel with customer information and then detailed tabs such as Contacts, Billing, etc.

For the life of me, I can't figure out how to get each table to reload the partial view. It will load it once, but when I move to another tab and come back, no more. My setup is nearly the same as yours, certainly the ul/li portion. But since my partial view comes from logic in another controller, I have this general pattern for the tabs:
..
          
               @Html.Action("Index", "CustomerContacts", new { id = Model.Header.vcAccountNum })
        
Any advice?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812297]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39141</wp:comment_id>
			<wp:comment_author><![CDATA[Umident]]></wp:comment_author>
			<wp:comment_author_email>uyazar@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.176.104.68</wp:comment_author_IP>
			<wp:comment_date>2014-12-30 23:28:46</wp:comment_date>
			<wp:comment_date_gmt>2014-12-30 23:28:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,  I think if one creates a mvc project using VS 2013 Update 4, he/she doesn't get  some partial views such as _ChangePasswordPartial, _SetPasswordPartial any more. And also Views\Account\Manage is not available, a new Views\Manage\ folder is created instead.  I started following your tutorial from the beginning and got stuck at this day and couldn't move on to the next by lazy copy/pasting as before :)  So I downloaded yours from Github and compared with mine to find out what I had missed. This is the conclusion I have after some googling, sorry if I am wrong. Thanks for the tutorial.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812293]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39631</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email>christopherblair17@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.242.193.2</wp:comment_author_IP>
			<wp:comment_date>2015-03-04 17:19:25</wp:comment_date>
			<wp:comment_date_gmt>2015-03-04 17:19:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If anyone is having trouble with getting the first tab to show up on page load, you'll need to add the "in" class to the active tab pane. You only need to do this if you are using fade.

<code>

</code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812295]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39671</wp:comment_id>
			<wp:comment_author><![CDATA[Tony Hinkle]]></wp:comment_author>
			<wp:comment_author_email>tony.w.hinkle@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>96.27.152.234</wp:comment_author_IP>
			<wp:comment_date>2015-03-12 14:42:40</wp:comment_date>
			<wp:comment_date_gmt>2015-03-12 14:42:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks--this is my first time doing tabs and I've found it to be a huge pain getting them to work in both IE and Chrome when an asp master page is used.  The JQuery things I tried worked in IE compatibility mode, but not in the other mode nor in Chrome.  With a little tweaking I got this working for all.  

 - Changed the "active" class to "inactive" on the two tab-panes that shouldn't be displayed when the page loads.

 - Removed the "fade" class on the tab-panes because the active pane would not be shown when the page loaded.  Love the effect, but the cooler things are, the more things they break, it seems.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812296]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42561</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-13 19:11:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-13 19:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had to do same.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39671</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812296]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2358240992]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42571</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-13 19:12:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-13 19:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That fixed it for me. Thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39631</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812295]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2358242541]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 27: Rendering Data in a Bootstrap Table</title>
		<link>http://jameschambers.com/2014/07/day-27-rendering-data-in-a-bootstrap-table/</link>
		<pubDate>Thu, 03 Jul 2014 22:23:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4501</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>We created a nice tab for our users to be able to manage the different components of their account, hi-jacking the Manage Account feature of the default MVC template. Now we want to render the user’s outstanding notifications in a good looking table in one of those tabs.</p> <p><strong>Caution</strong>: this is the <strong><em>lipstick on a pig</em></strong> post of the series. Here be dragons…</p> <h2>Rendering Tables with Bootstrap</h2> <p>The first thing you need to know is that you don’t have to throw away a single thing you’ve learned in your years of HTML ninja skill building. Tables are still not to be used for layout. Tables are for lists of data. And more importantly, Bootstrap doesn’t try to change the semantics or document structure for a table. In fact, to get the Bootstrap look-and-feel in an HTML table, you need to apply but one class.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">table</span> <span class="attr">class</span><span class="kwrd">="table"</span><span class="kwrd">&gt;</span>
  ...
<span class="kwrd">&lt;/</span><span class="html">table</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>So what else does it offer?&nbsp; A bunch of common things that you might try to do, like “<a href="http://getbootstrap.com/css/#tables-condensed" target="_blank">tighter</a>” versions of a table, <a href="http://getbootstrap.com/css/#tables-striped" target="_blank">striped styling</a> or <a href="http://getbootstrap.com/css/#tables-hover-rows" target="_blank">hover-states</a>. You can also use the now familiar <a href="http://getbootstrap.com/css/#tables-contextual-classes" target="_blank">contextual classes</a> on rows or cells to highlight pertinent information to your users.</p>
<p>All in all, it’s a clean looking table that will suit most needs and fit in with the rest of the site.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/07/image4.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image_thumb1.png" width="447" height="218"></a></p>
<p>Another important aspect of the Bootstrap table is the ability to easily make a table responsive. I don’t have the answer as to why this isn’t the default, but it’s easily added with a DIV wrapper that has the table-responsive class. This adds horizontal scroll bars to your tables, when needed, when they are viewed on smaller screens to ensure that the data doesn’t end up in some non-accessible, off-device part of the screen.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/07/image5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image_thumb2.png" width="176" height="186"></a></p>
<p>That wrapper looks like the following:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="table-responsive"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">table</span> <span class="attr">class</span><span class="kwrd">="table table-striped "</span><span class="kwrd">&gt;</span>
       <span class="rem">&lt;!-- table rows here --&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">table</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Retrieving the Notifications</h2>
<p>We’re going to need to get the list of notifications that haven’t yet been dismissed. You may have already created some test data with the efforts from the past few days, and that will work great here. </p>
<p>Open the AccountController.cs class and navigate down to the Manage action.&nbsp; Just before it, add the following code :</p><pre class="csharpcode"><span class="kwrd">private</span> IEnumerable&lt;Notification&gt; GetUserNotifications()
{
    <span class="rem">// get the user ID</span>
    var userId = User.Identity.GetUserId();

    <span class="rem">// load our notifications</span>
    var context = <span class="kwrd">new</span> SiteDataContext();
    var notifications = context.Notifications
        .Where(n =&gt; n.UserId == userId)
        .Where(n =&gt; !n.IsDismissed)
        .Select(n =&gt; n)
        .ToList();
    <span class="kwrd">return</span> notifications;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>All this guy is doing, really, is snapping up the rows for this currently logged in user. </p>
<p>One thing to mention here is that we’re really now <em>crying</em> for some Dependency Injection. Our NotificationFilter and our AccountController are now both creating instances of our SiteDataContext – now multiple instances per request – and it’s making our code harder to test.</p>
<h2>Adding the Data to Our ViewBag</h2>
<p>Both the GET and POST versions of Manage are already relying on ViewBag to get data up to the view, so we’ll follow the same cue and put our notifications in there. In both methods you’ll find the ReturnUrl being assigned to a ViewBag property, so immediately after that, add the following line of code:</p><pre class="csharpcode">ViewBag.NotificationList = GetUserNotifications();</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Adding a Partial View for the Table</h2>
<p>Next, let’s get a partial view added called “_RenderNotifications.cshtml”.&nbsp; The model type for the page will be a IEnumerable&lt;Notification&gt;, and we’ll iterate over the collection of rows to generate the TR and relevant TDs inside each of those. The entire view will look something like this:</p><pre class="csharpcode">@using SimpleSite.Models
@model IEnumerable<span class="kwrd">&lt;</span><span class="html">Notification</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="table-responsive"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">table</span> <span class="attr">class</span><span class="kwrd">="table table-striped "</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Type<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Notification<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Actions<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
        @foreach (var notification in Model)
        {
            var badgeClass = NotificationType.Email == notification.NotificationType
                ? "label-success"
                : "label-info";
            <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="label @badgeClass"</span><span class="kwrd">&gt;</span>@notification.NotificationType<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>@notification.Title<span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
        }
    <span class="kwrd">&lt;/</span><span class="html">table</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<p>There’s a placeholder in there for “Actions”, which we’ll look at tomorrow when we revisit buttons and explore drop-downs.
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>

<h2>Updating our Manage View</h2>
<p>With the partial view in place and the data being loaded into the ViewBag we’re ready to update our view. Return to the Manage.cshtml file and locate our placeholder for the notifications. Update it to render the partial view, passing in the collection of notifications.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="tab-pane active"</span> <span class="attr">id</span><span class="kwrd">="notifications"</span><span class="kwrd">&gt;</span>
    @Html.Partial("_RenderNotifications", ViewBag.NotificationList as IEnumerable<span class="kwrd">&lt;</span><span class="html">Notification</span><span class="kwrd">&gt;</span>)
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<p>That should be it! I found what seems to be a bug in Bootstrap where if you have a table in a tab, and the tab is set to active and you have the fade class, the table doesn’t seem to be visible on page load. It shows up fine after clicking on a tab, but to work around this you’ll notice that I’ve removed the fade class from the tab.</p>
<h2>Oh Noes! It’s Turned Into A Mess!</h2>
<p>Folks, I’m not going to lie; though the Account controller and Manage views may have never have been intended to handle our humble little notifications, I found several things in both the controller and related views that left me uncomfortable with the design. I’m trying to keep this as a “how to get some MVC in your Bootstrap” type series, but all of the following were worth noting as things I’d try to avoid:</p>
<ul>
<li>Nested views with non-obvious dependencies</li>
<li>Multiple methods that do the same work as each other</li>
<li>Magic strings</li>
<li>Methods doing too many things or things that you wouldn’t attribute of them by their name (for example, the “Manage” action which resolves status messages based on optional parameters)</li>
<li>ViewBag use that gets in the way of the view’s maintainability</li>
<li>Views that don’t leverage Bootstrap enough</li>
<li>Way too much reliance on ViewBag, and, therefore,</li>
<li>Absence of reasonable view models</li>
<li>Dogs and cats playing together</li></ul>
<p>I will perhaps one day sit down and hash through the AccountController, but needless to say, there’s <em>some</em> amount of work to be done! I, for one, would like to see more best practices in place, a more referencable example of how to do things and sample views that better embrace the Bootstrap visuals (since, after all, it’s included by default in the template).</p>
<p>Now on our end, we’ve done some off-script things as well, namely putting direct database access in a controller (and filter),&nbsp; pushing database models directly up to the view and leaning on those ViewBag properties to shuffle data around. So, yes, kettle, meet teapot.</p>
<p>All of these things are leading up to another set of posts on best practices <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/07/wlEmoticon-smile.png">.</p>
<h2>Next Steps</h2>
<p>Okay, our users can now see the list of notifications that are outstanding, but they have no way to manage them just yet. Tomorrow we’ll get some drop-down button action in play and explore some of the ways we can compose some pushable UI.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4501</wp:post_id>
		<wp:post_date>2014-07-03 22:23:00</wp:post_date>
		<wp:post_date_gmt>2014-07-03 22:23:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-27-rendering-data-in-a-bootstrap-table</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207937]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36411</wp:comment_id>
			<wp:comment_author><![CDATA[Erik Darling]]></wp:comment_author>
			<wp:comment_author_email>erikd1005@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.139.75.150</wp:comment_author_IP>
			<wp:comment_date>2014-07-10 17:02:48</wp:comment_date>
			<wp:comment_date_gmt>2014-07-10 17:02:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really have enjoyed your series. Will you be finishing it?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812271]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36441</wp:comment_id>
			<wp:comment_author><![CDATA[Jawahar Rajan]]></wp:comment_author>
			<wp:comment_author_email>jawaharrajan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.235.234.177</wp:comment_author_IP>
			<wp:comment_date>2014-07-12 03:36:03</wp:comment_date>
			<wp:comment_date_gmt>2014-07-12 03:36:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks you James for putting this together. I am sure it has taken some time and effort I am very appreciative of the effort  you have put in for the 27 days.. It has helped me lot
You mentioned "tomorrow" in the above Post will there be a day 28?

Thank you again
Jawahar]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812267]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36511</wp:comment_id>
			<wp:comment_author><![CDATA[rolfe renvyle]]></wp:comment_author>
			<wp:comment_author_email>rrenvyle@nycap.rr.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.224.102.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-16 03:57:55</wp:comment_date>
			<wp:comment_date_gmt>2014-07-16 03:57:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for this series. Clever programming tips and presented in an easy-to-follow format. Always a pleasure to read.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812268]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36691</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:32:14</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:32:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, thanks for the inquiry Jawahar. I'll be completing the series in the coming days.
Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36441</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812267]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812391]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36711</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-19 22:33:14</wp:comment_date>
			<wp:comment_date_gmt>2014-07-19 22:33:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You bet, stay tuned! The next post is up and my last two are in draft. :D

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36411</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812271]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812394]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37081</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 07:57:43</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 07:57:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You Said...
<blockquote>I will perhaps one day sit down and hash through the AccountController</blockquote>
and ...
<blockquote>I, for one, would like to see more best practices in place, a more referencable example of how to do things and sample views that better embrace the Bootstrap visuals.</blockquote>
and ...
<blockquote>All of these things are leading up to another set of posts on best practices </blockquote>

All I can say is that I would love to see your insights on this.

I really appreciated the work and effort you put into this series and would encourage you to do some (in your copius free time of course).  I know I would spend the time to check it out.

Thanks a lot!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812272]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37161</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.16.247.214</wp:comment_author_IP>
			<wp:comment_date>2014-07-23 00:54:28</wp:comment_date>
			<wp:comment_date_gmt>2014-07-23 00:54:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ha! Free time? What's that?! ;)  ...but thanks for the encouragement just the same, and for working through so much of these articles to try them out. I appreciate that as much as the other way around.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37081</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812272]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812393]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37831</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:30:16</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:30:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 27:&nbsp;Rendering Data in Bootstrap Table [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Day 28: Doing More Interesting Things With Buttons</title>
		<link>http://jameschambers.com/2014/07/day-28-doing-more-interesting-things-with-buttons/</link>
		<pubDate>Fri, 18 Jul 2014 22:25:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4591</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>Using the styling of Bootstrap or a replacement theme is a great way to make your site stand out, and buttons are a great example of making the UI more rich and friendly to users. They are likely the first thing you’d write some CSS for if you were starting from scratch on your site, so the tweaks and highlights they offer out-of-box are quite welcome.</p> <h2>Basic Buttons</h2> <p>If you don’t style your buttons, they’re going to kinda suck. Well…it’s not that they won’t work or anything, but you will just get the boring old browser-styled version of a button.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image6.png" width="203" height="41"></p> <p>And because each browser has it’s own default stylesheet, you can’t be guaranteed that any user will see the same font, layout or spacing. Thankfully, enforcing these attributes across clients is only an attribute away.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-primary btn-sm"</span><span class="kwrd">&gt;</span>A button<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm"</span><span class="kwrd">&gt;</span>Another button<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You’ll notice that I used the btn-sm class in the source above, there are large (btn-lg), regular (no class needed), small (btn-sm) and extra-small (btn-xs) to choose from. And now my buttons look like so, in every browser:</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image7.png" width="188" height="44"></p>
<p>If I want them to be the same width, I can also use the grid system for sizing, dropping, say, a col-md-4 into the class attribute to get the following result:</p>
<p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image8.png" width="283" height="41"></p>
<h2>Grouping Things Together</h2>
<p>The buttons look better now, but they’re bumping up against each other. They’d look better still if they looked like they were part of the same control group. We can assemble buttons into groups by providing a touch more markup to the elements, as seen below, with a simple DIV wrapper.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="btn-group"</span><span class="kwrd">&gt;</span>
    <span class="rem">&lt;!-- buttons here --&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image9.png" width="165" height="41"></p>
<p>I changed the text here because this is the code that I’ll be working into my partial for the notifications.&nbsp; I also made the buttons the same color – from a design stand point I think it looks better (and, heck, I’m even color blind) – and I removed the grid sizing on the buttons to allow them to group properly without having to add custom CSS styles. </p>
<h2>Putting Some Fancy On</h2>
<p>Chances are we could get away here with the two buttons side-by-each, but in the event that we need to add more actions the page is going to start to get a little wide. An improvement we can make here is to give the users a default action, but then to put the rest of the less-commonly accessed actions into a dropdown to look like this:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image10.png" width="189" height="240"></p>
<p>This is called a split button dropdown, where a clickable action is available and additional commands are tucked into the drop down. Rather than wrapping the buttons in just a DIV, we also introduce a caret for the dropdown and have a UL to act as a container for the non-visible actions.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="btn-group"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm"</span><span class="kwrd">&gt;</span>Mark as Read<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm dropdown-toggle"</span> <span class="attr">data-toggle</span><span class="kwrd">="dropdown"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="caret"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="sr-only"</span><span class="kwrd">&gt;</span>Toggle Dropdown<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="dropdown-menu"</span> <span class="attr">role</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Delete<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Send SMS<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Make cheese<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span> <span class="attr">class</span><span class="kwrd">="divider"</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Baz<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>I’ve added in the correct attributes on the caret button element – namely the data toggle – so that it plays properly with the framework. Per <a href="http://getbootstrap.com/getting-started/#accessibility" target="_blank">the documentation</a>, I’ve also added an sr-only class that allows screen readers to make sense of the control grouping. The inner commands are now simply anchor tags and don’t require any of the button classes.</p>
<p>So, there all-of-a-sudden seems to be a lot going on there, but let’s break down the basic structure:</p>
<ul>
<li>A DIV to group everything together</li>
<li>A BUTTON for the main action</li>
<li>A BUTTON for the caret (dropdown)</li>
<li>A UL with a list of LIs for the additional commands.</li></ul>
<p>The skeleton looks like this:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="btn-group"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn"</span><span class="kwrd">&gt;</span>Primary Action<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn dropdown-toggle"</span> <span class="attr">data-toggle</span><span class="kwrd">="dropdown"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="caret"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="sr-only"</span><span class="kwrd">&gt;</span>Toggle Dropdown<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="dropdown-menu"</span> <span class="attr">role</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>...<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>...<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>One final note: You would correctly assume, were you the assuming type, that the drop down functionality requires the JS library to work (which is already included in our web site bundle and layout).</p>
<h2>Updating our View</h2>
<p>Now, forget what we’ve done so far in the TD for our actions. We’re going to change it up a bit and get things properly in line for some real-world action.</p>
<p>Since we’re going to be changing data we are going to want to do a POST back to the server, so we have the option of using the Html.BeginForm helper.&nbsp; But generating a series of forms representing all actions for all notifications could get complicated quite quickly (in other words, we don’t want a form for each action, for each notification). Instead, we need to decorate our split buttons with the appropriate IDs, then put together a bit of JavaScript to do the submit for us on a single, static form. The form contains a hidden input for the ID and will be at the end of the document in _RenderNotifications, followed by the related JavaScript:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="notificationForm"</span> <span class="attr">method</span><span class="kwrd">="POST"</span><span class="kwrd">&gt;&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="hidden"</span> <span class="attr">name</span><span class="kwrd">="id"</span> <span class="attr">id</span><span class="kwrd">="notificationFormItemId"</span> <span class="kwrd">/&gt;&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">var</span> readUrl = <span class="str">'@Url.Action("MarkNotificationAsRead")'</span>;
    <span class="kwrd">var</span> deleteUrl = <span class="str">'@Url.Action("Delete")'</span>;
    
    <span class="kwrd">function</span> updateNotification(id, action) {
        $(<span class="str">"#notificationFormItemId"</span>).val(id);
        <span class="kwrd">switch</span> (action) {
            <span class="kwrd">case</span> <span class="str">'read'</span>:
                $(<span class="str">"#notificationForm"</span>).attr(<span class="str">'action'</span>, readUrl).submit();
                <span class="kwrd">break</span>;
            <span class="kwrd">case</span> <span class="str">'delete'</span>:
                $(<span class="str">"#notificationForm"</span>).attr(<span class="str">'action'</span>, deleteUrl).submit();
                <span class="kwrd">break</span>;
            <span class="kwrd">default</span>:
                console.debug(<span class="str">'Unknown action '</span> + action);
        }
    }
    
<span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Here we are using the URL helper method to resolve the URLs needed for read and delete actions.&nbsp; The JavaScript simply accepts the ID and an action parameter, then sets up the form correctly and submits it. </p>
<p>Next, skip back up the document a little to the TD that contains our split button. We’ll replace the entire contents of the TD with the following:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="btn-group"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm"</span> <span class="attr">href</span><span class="kwrd">="javascript:updateNotification(@notification.NotificationId, 'read')"</span><span class="kwrd">&gt;</span>Mark as Read<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-success btn-sm dropdown-toggle"</span> <span class="attr">data-toggle</span><span class="kwrd">="dropdown"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="caret"</span><span class="kwrd">&gt;&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="sr-only"</span><span class="kwrd">&gt;</span>Toggle Dropdown<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">class</span><span class="kwrd">="dropdown-menu"</span> <span class="attr">role</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="javascript:updateNotification(@notification.NotificationId, 'delete')"</span><span class="kwrd">&gt;</span>Delete<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Send SMS<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Make cheese<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span> <span class="attr">class</span><span class="kwrd">="divider"</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">="#"</span><span class="kwrd">&gt;</span>Baz<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>You’ll notice that our A tags are now just invoking our JavaScript method, passing in the notification ID of the current record (remember that we’re in that outer foreach loop here). We can continue to develop new methods by wiring up the A tag and extending the switch statement should we like.</p>
<h2>A Couple of Controller Methods</h2>
<p>Finally we’re going to need to wire up our controller to catch those user actions and do the dirty bits. Marking the notification as viewed will be first. We’ll use the DB context to retrieve, update and save the selected record, so we’ll make a small change to the way we initiate the DB context and move it to a class-level declaration as such: </p><pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">readonly</span> SiteDataContext _context = <span class="kwrd">new</span> SiteDataContext();</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Remember to remove the following line of code from the GetUserNotifications method and update all occurrences of context to _context (your code won’t compile if you don’t).</p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult MarkNotificationAsRead(<span class="kwrd">int</span> id)
{
    var userNotification = GetUserNotifications().FirstOrDefault(n=&gt;n.NotificationId == id);

    <span class="kwrd">if</span> (userNotification == <span class="kwrd">null</span>)
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> HttpNotFoundResult();
    }

    userNotification.IsDismissed = <span class="kwrd">true</span>;
    _context.SaveChanges();

    <span class="kwrd">return</span> RedirectToAction(<span class="str">"Manage"</span>);
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Similarly, the code for the delete action will use the same DB context to delete the requested record.</p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult Delete(<span class="kwrd">int</span> id)
{
    var userNotification = GetUserNotifications().FirstOrDefault(n =&gt; n.NotificationId == id);

    <span class="kwrd">if</span> (userNotification == <span class="kwrd">null</span>)
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> HttpNotFoundResult();
    }

    _context.Notifications.Remove(userNotification);
    _context.SaveChanges();

    <span class="kwrd">return</span> RedirectToAction(<span class="str">"Manage"</span>);
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There are a couple of quick notes here that I should mention. From a security standpoint we’re doing some good things, namely, we’re using a common method to only load into scope the notifications of the currently logged in user. We’re leveraging the fact that the framework provides a mechanism to correctly provide the user’s identity and limiting the user’s request to only allow execution of modifying or deleting records in a “row-level” security kind of way. Our controller is marked with the Authorize attribute, so if we couple this with SSL we’d be in pretty good shape.</p>
<p>Then there’s the bits that aren’t really good practice, but are good enough for the point of this exercise. First, we’ve got this GetUserNotifications method on the AccountController class.&nbsp; What about “AccountController” says anything about “loading the notifications for a specific user”? Nothing, right? This data access, as I’ve mentioned before, should be pushed into a repository that makes use of the DB context through a Dependency Injection mechanism that only creates one instance of the DB context per request. And, the controller should take that repository through DI.&nbsp; This would make things more flexible (why write data access in more than one spot) and testable (we could use mocks to test more easily).</p>
<h2>Next Steps</h2>
<p>Certainly you wouldn’t want your users deleting data without confirmation (if at all), so in the next installment we’ll have a look at putting a dialog in place to ensure users are invoking the intended action.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4591</wp:post_id>
		<wp:post_date>2014-07-18 22:25:00</wp:post_date>
		<wp:post_date_gmt>2014-07-18 22:25:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-28-doing-more-interesting-things-with-buttons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208002]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36931</wp:comment_id>
			<wp:comment_author><![CDATA[Robert]]></wp:comment_author>
			<wp:comment_author_email>robert.bonham@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.142.13.97</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 19:42:36</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 19:42:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FYI:

I noticed in the MarkNotificationAsRead action is missing the AddOrUpdate statement.

Need to add:
  _context.Notifications.AddOrUpdate(userNotification);]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812321]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37251</wp:comment_id>
			<wp:comment_author><![CDATA[Reading Notes 2014-07-28 | Matricis]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://matricis.com/notes-de-lecture/reading-notes-2014-07-28/</wp:comment_author_url>
			<wp:comment_author_IP>23.23.227.122</wp:comment_author_IP>
			<wp:comment_date>2014-07-28 18:30:58</wp:comment_date>
			<wp:comment_date_gmt>2014-07-28 18:30:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 28: Doing More Interesting Things With Buttons (james.chambers) &#8211; Nice tricks to get an amazing dropdown control. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42581</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-16 15:13:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-16 15:13:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In addition (or more importantly), the class needs "System.Data.Entity.Migrations;" namespace. Took me some time to find this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36931</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812321]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2362436497]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 29: Confirmation Dialogs for Delete Actions</title>
		<link>http://jameschambers.com/2014/07/day-29-confirmation-dialogs-for-delete-actions/</link>
		<pubDate>Sat, 19 Jul 2014 22:57:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4661</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is an installment in a 30 day series on Bootstrap and the MVC Framework. To see more, check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>.</p> <p>We just gave our users the ability to delete a record from the database in <a href="http://jameschambers.com/2014/07/day-28-doing-more-interesting-things-with-buttons/" target="_blank">Day 28</a>, but a single click does the deed without confirmation. It would likely be better to at least give them a little prompt to confirm that this is what they were trying to do in the first place.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image11.png" width="507" height="235"></p> <p>Let’s first talk about how dialogs are composed and how to display them in a page.</p> <h2>Bootstrap Modal Dialogs</h2> <p>Modals are made up of a wrapper, an outer and inner container and three common sections that provide default styling and handle proper rendering: the header, the body and the footer. You can represent the basic structure of the modal as follows:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-dialog"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-content"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-header"</span><span class="kwrd">&gt;</span>...<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-body"</span><span class="kwrd">&gt;</span>...<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-footer"</span><span class="kwrd">&gt;</span>...<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You can show a dialog by using a button with an attribute that Bootstrap is aware of:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">class</span><span class="kwrd">="btn"</span> <span class="attr">data-toggle</span><span class="kwrd">="modal"</span> <span class="attr">data-target</span><span class="kwrd">="#theModal"</span><span class="kwrd">&gt;</span>
  Show my modal
<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Or you can invoke the modal by calling it from JavaScript:</p><pre class="csharpcode">$(<span class="str">'#deleteConfirmModal'</span>).modal(<span class="str">'show'</span>);</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>For other events, defaults and other JavaScript method calls that are available, be sure to check out the docs on the <a href="http://getbootstrap.com/javascript/#modals" target="_blank">Bootstrap site</a>.</p>
<p>When using modals you’ll want as little interference as possible with the styles and layout of the elements being used, so the recommendation is to put the container for the modal as close to the root of the document structure as possible. </p>
<p>One thing that I’ve run into when using the button approach is the need to have the CSS selector on the data-target attribute (see the code above). I’m not sure why this is the approach, but if you forget that you need the hashtag as a prefix to the ID, your modal won’t display. Regardless, we’re going to be using JavaScript to do our work today, but keep that tip in mind as you start working with this on&nbsp; your own.</p>
<h2>The Game Plan</h2>
<p>For this exercise we’re going to hit a couple of areas of the project, so here’s a quick checklist if you want to follow along. We’re going to:</p>
<ul>
<li>Clean up our JavaScript and put it in a separate file</li>
<li>Add an optionally rendered section to our _Layout page</li>
<li>Add a partial view for the markup needed for our dialog</li>
<li>Update the Manage view to include our new bits</li></ul>
<h2>Some Cleanup, Some JavaScript</h2>
<p>We’re going to start growing our client-side scripts on the view that renders notifications a little and one thing I like to do is to keep those bits organized. The JavaScript we have so far to give some UX for notifications is in our _RenderNotifications partial view, which presents some limitations as to when script can execute and whether or not jQuery has been loaded. </p>
<p>One easy way to keep these things straight, and organized in our project, is to add a _<em><strong>PartialViewName</strong></em>.js.cshtml file to our project in the same folder as our view. We can then consider the JavaScript related to the view as another asset that needs to be loaded on the full view.</p>
<p>So let’s do that. Add a new view to the Views\Account folder called _RenderNotificationsjs. If you use the scaffolding tools, you’ll notice that you can’t properly name it (it complains about invalid characters), so add it as I’ve shown, then rename it to _RenderNotifications.js.cshtml once the file is there.&nbsp; Next, remove the old JavaScript from the _RenderNotifications.cshtml and put it in the new .js.cshtml file.</p><pre class="csharpcode">&lt;script type=<span class="str">"text/javascript"</span>&gt;
    
    <span class="kwrd">var</span> readUrl = <span class="str">'@Url.Action("MarkNotificationAsRead")'</span>;
    <span class="kwrd">var</span> deleteUrl = <span class="str">'@Url.Action("Delete")'</span>;
    <span class="kwrd">var</span> currentNotificationId;

    <span class="kwrd">function</span> updateNotification(id, action) {
        $(<span class="str">"#notificationFormItemId"</span>).val(id);
        <span class="kwrd">switch</span> (action) {
        <span class="kwrd">case</span> <span class="str">'read'</span>:
            $(<span class="str">"#notificationForm"</span>).attr(<span class="str">'action'</span>, readUrl).submit();
            <span class="kwrd">break</span>;
        <span class="kwrd">case</span> <span class="str">'delete'</span>:
            $(<span class="str">"#notificationForm"</span>).attr(<span class="str">'action'</span>, deleteUrl).submit();
            <span class="kwrd">break</span>;
        <span class="kwrd">default</span>:
            console.debug(<span class="str">'Unknown action '</span> + action);
        }
    }

    <span class="kwrd">function</span> confirmDelete(id) {
        currentNotificationId = id;
        $(<span class="str">'#deleteConfirmModal'</span>).modal(<span class="str">'show'</span>);
    }

    $(<span class="kwrd">function</span>() {
        $(<span class="str">"#deleteConfirmModal"</span>).on(<span class="str">'click'</span>, <span class="str">"#deleteConfirm"</span>, <span class="kwrd">function</span>() {
            updateNotification(currentNotificationId, <span class="str">'delete'</span>);
        });
    });

&lt;/script&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Remember that .cshtml gives us a little more power than just a straight .js file. We can do things like interact with the ViewBag or the page Model, write code that is parsed by Razor and make use of Html helper methods, all of which can be quite handy.</p>
<p>There’s not too much more going on here than there was before, except that now we capture the ID of the notification in our confirmDelete method, and we are wiring up a click handler for the modal dialog that we’re going to implement.</p>
<p>One final thing to do on our partial is to update the Delete button (the A tag) to call our new JavaScript method as follows:</p><pre class="csharpcode">&lt;a href=<span class="str">"javascript:confirmDelete(@notification.NotificationId)"</span>&gt;Delete&lt;/a&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Rendering at the Root Using Optional Sections in our Layout</h2>
<p>Remember the note about keeping the modal as close to the document root as possible? Well, there’s a problem there when we’re down at the view or partial view layer, stuck inside our other “main content” area of the page. We’re inside all these other containers already and we can’t break out without a little help from the MVC Framework.&nbsp; What we want to do is to add another optional section, much like the scripts section. We can call this topLevel for now, though you’d likely want it to be more meaningful in a real project.&nbsp; Add the following code to your _Layout file.</p><pre class="csharpcode">@RenderSection(<span class="str">"topLevel"</span>, required: <span class="kwrd">false</span>)</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>It should appear right after the BODY tag, first thing in the document, like this.</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image12.png" width="392" height="174"></p>
<p>Now, whenever you have something that will be injected from a view into the page in this topLevel section, you will be able to put elements directly into the root of the document.</p>
<h2>Create the Modal Partial</h2>
<p>Next up, we’re going to create a _RenderNotification.Modal.cshtml partial view that has the HTML for our modal in it. This will help to keep our core view simple, and keep our related files together in our project.&nbsp; The markup for the modal follows the same basic structure I highlighted above and adds a few other elements to the mix.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal fade"</span> <span class="attr">id</span><span class="kwrd">="deleteConfirmModal"</span> <span class="attr">tabindex</span><span class="kwrd">="-1"</span> <span class="attr">role</span><span class="kwrd">="dialog"</span> <span class="attr">aria-labelledby</span><span class="kwrd">="deleteLabel"</span> <span class="attr">aria-hidden</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-dialog"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-content"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-header"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">h4</span> <span class="attr">class</span><span class="kwrd">="modal-title"</span> <span class="attr">id</span><span class="kwrd">="deleteLabel"</span><span class="kwrd">&gt;</span>Deleting a Notification<span class="kwrd">&lt;/</span><span class="html">h4</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-body"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>You have selected to delete this notification.<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
                    If this was the action that you wanted to do,
                    please confirm your choice, or cancel and return
                    to the page.
                <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-footer"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-success"</span> <span class="attr">data-dismiss</span><span class="kwrd">="modal"</span><span class="kwrd">&gt;</span>Cancel<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">class</span><span class="kwrd">="btn btn-danger"</span> <span class="attr">id</span><span class="kwrd">="deleteConfirm"</span><span class="kwrd">&gt;</span>Delete Notification<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There’s a class ‘fade’ in there that tells bootstrap to slide and fade the modal in from the top. There are a few ARIA attributes in there for accessibility.&nbsp; I’ve added a title to the header, content in the body and buttons to either dismiss the dialog (cancelling the delete) or to confirm the operation when the user elects to delete the notification.</p>
<p>Perhaps the most interesting bit in there is the data-dismiss attribute on the cancel button, which tells Bootstrap that this dialog can be hidden when the button is clicked.</p>
<h2>Updating Our View</h2>
<p>Finally, we update our view, adding the modal to the page and including the JavaScript that we need to pull it all together.</p>
<p>At the bottom of Manage.cshtml in Views\Account we add the topLevel section to the view and in it we render the modal markup from the partial view we created. </p><pre class="csharpcode">@section topLevel{

    @{ Html.RenderPartial(<span class="str">"_RenderNotifications.Modal"</span>); }

}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Immediately after that, we update our scripts section to include the JS we need and created above.</p><pre class="csharpcode">@section Scripts { 

    @Scripts.Render(<span class="str">"~/bundles/jqueryval"</span>) 
    @{ Html.RenderPartial(<span class="str">"_RenderNotifications.js"</span>); }

}</pre>
<p>Because we’ve kept things fairly organized along the way, changes to our view are minimal but at the same time we’re able to improve the user experience a fair bit. We’ve added an easy way to get content into the root of our document and simplified our partial views. And look…</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/07/image13.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image_thumb3.png" width="307" height="240"></a></p>
<p>…we even managed to keep our related files in one place in the solution explorer.&nbsp; <style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>Next Steps</h2>
<p>Our delete is now protected by the dialog, but we’d like to give the user a better picture of what it is they are deleting from the database. Tomorrow, in our last post in the series, we’ll look at wiring up the dialog box to load contents via AJAX. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4661</wp:post_id>
		<wp:post_date>2014-07-19 22:57:00</wp:post_date>
		<wp:post_date_gmt>2014-07-19 22:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-29-confirmation-dialogs-for-delete-actions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208148]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37091</wp:comment_id>
			<wp:comment_author><![CDATA[John Marsing]]></wp:comment_author>
			<wp:comment_author_email>JohnMarsing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.MyHebrewBible.com</wp:comment_author_url>
			<wp:comment_author_IP>75.172.188.10</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 17:45:25</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 17:45:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In the <b>Create the Modal Partial<b> section you reference file name _RenderNotification.Modal in the singular when it should be in the plural _RenderNotification<b>s</b>.Modal]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812431]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37841</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.blogengine.net.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-17 10:30:34</wp:comment_date>
			<wp:comment_date_gmt>2014-09-17 10:30:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 29:&nbsp;Confirmation Dialogs for Delete Actions [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39161</wp:comment_id>
			<wp:comment_author><![CDATA[paco]]></wp:comment_author>
			<wp:comment_author_email>franciscovega2010@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>200.38.123.143</wp:comment_author_IP>
			<wp:comment_date>2015-01-02 18:28:59</wp:comment_date>
			<wp:comment_date_gmt>2015-01-02 18:28:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi james, thanks so much for excelente article.

i try to convert the partial view  _RenderNotifications.ModalPreview to use in crud operations (Edit, ADD) but when mi model isn't valid i dont know how to return view in modal.

i try to modify the action Delete in the account controller, to validate the model and show the error in the modal view.

can you help me to modify the example?

thanks in advanced]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812435]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39581</wp:comment_id>
			<wp:comment_author><![CDATA[Aparna]]></wp:comment_author>
			<wp:comment_author_email>aparna_vellala@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://evayadesk</wp:comment_author_url>
			<wp:comment_author_IP>106.206.188.53</wp:comment_author_IP>
			<wp:comment_date>2015-02-26 05:18:37</wp:comment_date>
			<wp:comment_date_gmt>2015-02-26 05:18:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you Mister James for excellent article, it helped me understand how the button click event invokes the click on function.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812434]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Day 30: Loading Bootstrap Modal Content via AJAX</title>
		<link>http://jameschambers.com/2014/07/day-30-loading-bootstrap-modal-content-via-ajax/</link>
		<pubDate>Sun, 20 Jul 2014 05:58:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4711</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is <strong>the final</strong> installment in a 30 day series on Bootstrap and the MVC Framework. To see the rest of the series be sure to check out <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/">Day 0 for an index</a>. I hope you have enjoyed following along! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/07/wlEmoticon-smile1.png"></p> <p>Here in our last post in the series we’re going to revisit our modal dialog confirmation box that pops up when a user tries to delete a record. At this point, regardless of the notification selected for delete, the user will see the same static dialog.</p> <h2>Loading Remote Content With Bootstrap’s Modal</h2> <p>There is built-in support for Bootstrap to load content into a modal, but there are some limitations. First, Bootstrap loads the content the first time the constructor is called on the modal. Secondly, the modal’s constructor is only ever called once, meaning, you can’t refresh the content without some extra script.</p> <p>Rather than trying to put a square peg in a round hole, we can take the simpler approach of just loading the content with jQuery. After all, it’s clean, easy to understand, and at the end of the day the modal is just HTML.</p> <p>This approach will work better for us for the following use case:</p> <ul> <li>User selects to delete a notification</li> <li>They cancel out of the dialog</li> <li>The select a different notification to delete</li></ul> <p>At this point, the remote loading capabilities of Bootstrap’s modal break down and we’d have to get into hacky stuff that may not survive a minor version upgrade. Pass! In my opinion, the modal should have an overload that accepts a ‘remote url’ parameter.</p> <p>If, however, you have a use case that doesn’t involve refreshing the dialog, I encourage you to check out <a href="http://getbootstrap.com/javascript/#modals-usage" target="_blank">the docs</a> for using the built-in functionality.</p> <h2>Improving our Delete Confirmation</h2> <p>Rather than just giving a generic message, we’re going to instead load some content via AJAX. This will give us a chance to put a visual preview of the data that will be deleted in front of the user.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/07/image14.png" width="400" height="228"></p> <p>To accomplish this we’re going to need to make small change to our modal markup (in Views\Account\_RenderNotifications.Modal.cshtml), as follows:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="modal-body"</span> <span class="attr">id</span><span class="kwrd">="notificationPreview"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>Loading content...<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>What I’ve done here is removed the content from the modal-body section of the markup and replaced it with a loading message.&nbsp; I’ve also given the DIV an ID so that we can address it from JavaScript more directly.&nbsp; Also, revisit your Views\Account\_RenderNotifications.js.cshtml and update the confirmDelete method, as we’re now going to clear the contents and load the text dynamically.</p><pre class="csharpcode"><span class="kwrd">function</span> confirmDelete(id) {
    currentNotificationId = id;
    previewContainer.html(<span class="str">'&lt;p&gt;Loading content...&lt;/p&gt;'</span>);
    previewContainer.load(confirmUrl, { id: currentNotificationId });
    $(<span class="str">'#deleteConfirmModal'</span>).modal(<span class="str">'show'</span>);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>To pull that all together we need a couple more variable declarations at the top of the script. Here’s my final list of vars:</p><pre class="csharpcode"><span class="kwrd">var</span> readUrl = <span class="str">'@Url.Action("MarkNotificationAsRead")'</span>;
<span class="kwrd">var</span> deleteUrl = <span class="str">'@Url.Action("Delete")'</span>;
<span class="kwrd">var</span> confirmUrl = <span class="str">'@Url.Action("GetNotification")'</span>;
<span class="kwrd">var</span> previewContainer = $(<span class="str">'#deleteConfirmModal #notificationPreview'</span>);
<span class="kwrd">var</span> currentNotificationId;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>You’ll notice that I have added a confirm URL and captured the element (in previewContainer) that we are using for the confirm. This saves me from having to requery the DOM on each display of the dialog.</p>
<h2>Adding the Controller Action</h2>
<p>We’re going to use that same pattern for loading up the notification for the confirmation that we used for modifying and deleting. Let’s add a GetNotification method to our AccountController that has the following code:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult GetNotification(<span class="kwrd">int</span> id)
{
    var userNotification = GetUserNotifications().FirstOrDefault(n =&gt; n.NotificationId == id);

    <span class="kwrd">if</span> (userNotification == <span class="kwrd">null</span>)
    {
        <span class="kwrd">return</span> <span class="kwrd">new</span> HttpNotFoundResult();
    }

    <span class="kwrd">return</span> PartialView(<span class="str">"_RenderNotifications.ModalPreview"</span>, userNotification);
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This time, we’ll be returning a partial view, as indicated in the code above, that will help us render the relevant content for the user to make their choice.</p>
<p>But hey…that code to load a single notification for the logged in user is <em>crying</em> for some refactoring, am I right?</p>
<h2>Adding the Partial View</h2>
<p>The controller is wired to pass the single notification to a partial view, which will essentially have the same information we had in the content section of the modal markup, but now we’ll also render in some notification-specific information. You can use your imagination on how this could be further extended with more complex objects in your own project.</p>
<p>Here are the contents of _RenderNotifications.ModalPreview.cshtml, which you should put into Views\Account:</p><pre class="csharpcode">@model SimpleSite.Models.Notification

<span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>You have selected to delete this notification.<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="panel panel-warning"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="panel-heading"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">h4</span><span class="kwrd">&gt;</span>@Model.Title<span class="kwrd">&lt;/</span><span class="html">h4</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="panel-body"</span><span class="kwrd">&gt;</span>
            If this was the action that you wanted to do,
            please confirm your choice, or cancel and return
            to the page.
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Next Steps</h2>
<p>Wow! Thirty days of Bootstrap and MVC! It’s been a long 30 days…50 days actually, but no one could have foreseen the passing of my Grandma, my three-day fever of 103 degrees or the fact that this would end up running into my vacation for my 14th wedding anniversary and <em>a most excellent trip</em> to Seattle with my high school sweetheart (to whom I am married).</p>
<p>I have a few more things to add to this series, but for now we’ll call it a wrap. Thanks for your questions, suggestions, feedback and comments along the way!</p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/07/wlEmoticon-smile1.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4711</wp:post_id>
		<wp:post_date>2014-07-20 05:58:00</wp:post_date>
		<wp:post_date_gmt>2014-07-20 05:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-30-loading-bootstrap-modal-content-via-ajax</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781201240]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36921</wp:comment_id>
			<wp:comment_author><![CDATA[Stefan]]></wp:comment_author>
			<wp:comment_author_email>stefan.sandstrom@live.se</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.233.79.179</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 18:49:49</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 18:49:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great series!
Is it possible to download the finished project somewhere?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812450]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36941</wp:comment_id>
			<wp:comment_author><![CDATA[Wagner]]></wp:comment_author>
			<wp:comment_author_email>wagmelo1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.121.97.161</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 20:15:07</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 20:15:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, thanks for your goodwill in write this outstanding tutorial.
It was a great inspiration for me! I hope you keep sharing with us your vision for this magnificent framework! Through this work I became a great fan of you! Best regards.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812449]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36951</wp:comment_id>
			<wp:comment_author><![CDATA[Robert]]></wp:comment_author>
			<wp:comment_author_email>robert.bonham@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.142.13.97</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 20:55:48</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 20:55:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great Series!!!  I've thoroughly enjoyed working through all the examples.  Some amazing tips and tricks along with some solid patterns and explanations of 'why do this'.

My favorite overarching lesson was the 50 days it took to get 30 days of tutorials...we all head into projects with the best of intentions and the best of plans...life happens, rule of thumb...double all estimates :-)

Looking forward to Day 31 onward, and thank you for taking the time out of your summer to give back to the community.

Robert]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812451]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37011</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:38:32</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:38:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Wagner! Good luck in your adventures in code!

-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36941</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812449]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812462]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37021</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:39:30</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:39:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Robert! Glad you were able to get something out of it!

The 50 days was a lesson for me too ;) ...and my wife :D  I have plans for the days ahead here, looking forward to keeping things moving!

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36951</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812451]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812461]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37031</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-21 01:40:36</wp:comment_date>
			<wp:comment_date_gmt>2014-07-21 01:40:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Stefan, I'll be doing a post on this shortly. I plan to release all the code as a completed project.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36921</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812450]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812577]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37101</wp:comment_id>
			<wp:comment_author><![CDATA[Karen]]></wp:comment_author>
			<wp:comment_author_email>karen@emberey.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>31.50.235.158</wp:comment_author_IP>
			<wp:comment_date>2014-07-22 10:11:50</wp:comment_date>
			<wp:comment_date_gmt>2014-07-22 10:11:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've learnt so much! Many thanks for the obvious effort you have put into this, be assured its much appreciated. I too have become a great fan (who is also lucky enough to be with my childhood sweetheart).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812452]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37111</wp:comment_id>
			<wp:comment_author><![CDATA[Jesus]]></wp:comment_author>
			<wp:comment_author_email>jacedo@dotnet.com.mx</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.188.176.230</wp:comment_author_IP>
			<wp:comment_date>2014-07-22 15:55:12</wp:comment_date>
			<wp:comment_date_gmt>2014-07-22 15:55:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the series, it was (and still is!) a great read, a learned tons, will be using and abusing many of your tips and tricks.
(*'-')b]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37031</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812577]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812747]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37171</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.16.247.214</wp:comment_author_IP>
			<wp:comment_date>2014-07-23 00:55:36</wp:comment_date>
			<wp:comment_date_gmt>2014-07-23 00:55:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for following along Karen! If you have any questions, don't hesitate to send them my way. And congrats on that sweetheart thing ;)

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37101</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812452]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812463]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37181</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.16.247.214</wp:comment_author_IP>
			<wp:comment_date>2014-07-23 01:02:32</wp:comment_date>
			<wp:comment_date_gmt>2014-07-23 01:02:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hehehe...abuse away! Thanks Jesus!

-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37111</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812747]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036813086]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37191</wp:comment_id>
			<wp:comment_author><![CDATA[Kelee]]></wp:comment_author>
			<wp:comment_author_email>keleesinet@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.252.160.1</wp:comment_author_IP>
			<wp:comment_date>2014-07-23 11:04:22</wp:comment_date>
			<wp:comment_date_gmt>2014-07-23 11:04:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I already bookmarked this site the first time i seen it. Its fun learning on your blog though I admit I stumbled as there is something i think i missed like on the search part (day 12) as mine didn't render to partial view. But didn't stop me on continuing on the next part as i don't want to get stuck and stop in there. Please continue sharing some knowledge of yours, and also hoping for a release of this 30 days code walk through.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812456]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37631</wp:comment_id>
			<wp:comment_author><![CDATA[Jakub]]></wp:comment_author>
			<wp:comment_author_email>jakub_niedzwiedz@wp.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.106.245.116</wp:comment_author_IP>
			<wp:comment_date>2014-08-25 21:47:03</wp:comment_date>
			<wp:comment_date_gmt>2014-08-25 21:47:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for this great introduction to Bootstrap and ASP.NET MVC. Good job!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812459]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37931</wp:comment_id>
			<wp:comment_author><![CDATA[Vadym Bobyr's Blog | Bootstrapping Mvc for the Next 30 Days]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bobyrs.info/post/2014/09/17/bootstrapping-mvc-for-the-next-30-days.aspx</wp:comment_author_url>
			<wp:comment_author_IP>95.47.114.102</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 10:47:50</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 10:47:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Day 30:&nbsp;Loading Bootstrap Modal Content via AJAX [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37941</wp:comment_id>
			<wp:comment_author><![CDATA[Allan]]></wp:comment_author>
			<wp:comment_author_email>alva5006@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.188.76.245</wp:comment_author_IP>
			<wp:comment_date>2014-09-18 16:34:36</wp:comment_date>
			<wp:comment_date_gmt>2014-09-18 16:34:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[An excellent read! Very informative.

Thank you for all the effort you did to make this series a success. I'm currently applying what you have shared on my project.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812454]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37971</wp:comment_id>
			<wp:comment_author><![CDATA[anwar]]></wp:comment_author>
			<wp:comment_author_email>lalani07-amazon07@yahoo.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>99.243.72.120</wp:comment_author_IP>
			<wp:comment_date>2014-09-23 15:10:46</wp:comment_date>
			<wp:comment_date_gmt>2014-09-23 15:10:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[jc 
I just came across your 30 days tutorial. I think it is brilliant. I am a newby to web appliactions.I  have been searching how to create notification bubbles in mvc for a while. Thank you for your tutorial. Can you cover have to send out email alerts from a MVC application when the user makes a change in the notifications. You did not cover any Identity in your series. Like all the above posts Thank You for a the series.  
al]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812455]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38081</wp:comment_id>
			<wp:comment_author><![CDATA[Greta]]></wp:comment_author>
			<wp:comment_author_email>greta.quadrati@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.145.47.162</wp:comment_author_IP>
			<wp:comment_date>2014-10-10 09:56:22</wp:comment_date>
			<wp:comment_date_gmt>2014-10-10 09:56:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you very much! Great job, I've learned so much from this tutorial! Bravo! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812458]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38941</wp:comment_id>
			<wp:comment_author><![CDATA[donramon]]></wp:comment_author>
			<wp:comment_author_email>juanh8600@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.34.215.23</wp:comment_author_IP>
			<wp:comment_date>2014-11-21 15:41:40</wp:comment_date>
			<wp:comment_date_gmt>2014-11-21 15:41:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your bootstrap series is super-fantastic. I am interested in styling action links in tables with buttons and icons in VS.
It would be nice to see an article on how it is done.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812457]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39261</wp:comment_id>
			<wp:comment_author><![CDATA[Olavi]]></wp:comment_author>
			<wp:comment_author_email>olavi@iki.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.131.9.167</wp:comment_author_IP>
			<wp:comment_date>2015-01-13 13:38:01</wp:comment_date>
			<wp:comment_date_gmt>2015-01-13 13:38:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this very good series. Learned a lot!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812453]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40261</wp:comment_id>
			<wp:comment_author><![CDATA[Ehsan Ltmm]]></wp:comment_author>
			<wp:comment_author_email>ehsan_ac_ir@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>46.209.154.157</wp:comment_author_IP>
			<wp:comment_date>2015-05-29 14:51:00</wp:comment_date>
			<wp:comment_date_gmt>2015-05-29 14:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank u so much! very helpful for me 
Mister James :D
Great series!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2051584588]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40271</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-05-29 21:09:00</wp:comment_date>
			<wp:comment_date_gmt>2015-05-29 21:09:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome, glad you enjoyed it. Take care!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40261</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2051584588]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2052297141]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40541</wp:comment_id>
			<wp:comment_author><![CDATA[Brian Geraghty]]></wp:comment_author>
			<wp:comment_author_email>briangeraghty@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.6.192.25</wp:comment_author_IP>
			<wp:comment_date>2015-06-25 04:42:00</wp:comment_date>
			<wp:comment_date_gmt>2015-06-25 04:42:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great tutorial! I've learned lots from it. Thank you for putting it together!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2098435458]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41001</wp:comment_id>
			<wp:comment_author><![CDATA[Leonardo Montes]]></wp:comment_author>
			<wp:comment_author_email>leonardo.montesm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>181.140.103.43</wp:comment_author_IP>
			<wp:comment_date>2015-07-21 16:20:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-21 16:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the complete tutorial, It's a great introducction to Bootstrap, I recommend apply this knowledge to a SQL Server Database instead a local one. Greetings from Colombia.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2149127729]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41011</wp:comment_id>
			<wp:comment_author><![CDATA[Leonardo Montes]]></wp:comment_author>
			<wp:comment_author_email>leonardo.montesm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>181.140.103.43</wp:comment_author_IP>
			<wp:comment_date>2015-07-21 16:23:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-21 16:23:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Could you give me some references to apply the complete course to a Web App with a SQL Server connection?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2149131221]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42591</wp:comment_id>
			<wp:comment_author><![CDATA[Alius Umbra]]></wp:comment_author>
			<wp:comment_author_email>facebook@atellusmedia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.90.2.245</wp:comment_author_IP>
			<wp:comment_date>2015-11-16 15:27:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-16 15:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I know this is really old (at least in "Internet Time"), but I wanted to say condolences on your grandma passing. Also, THANK YOU SO MUCH for this excellent tutorial which helped me brush up on MVC, as well as introduce me to the power of Bootstrap. I'll definitely be sharing this tutorial, and also supporting your future efforts. Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2362456722]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42601</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-11-17 17:06:00</wp:comment_date>
			<wp:comment_date_gmt>2015-11-17 17:06:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm glad you found value here :) 


Thanks for this, and take care.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>42591</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2362456722]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2364628110]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>30 Days of Bootstrap and Asp.Net MVC 5</title>
		<link>http://jameschambers.com/2014/08/30-days-of-bootstrap-and-asp-net-mvc-5/</link>
		<pubDate>Wed, 13 Aug 2014 21:41:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4761</guid>
		<description></description>
		<content:encoded><![CDATA[<h2></h2> <h2>Source Code and Book Now Available</h2> <p>I had many requests through my recent series on <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">Bootstrapping MVC</a> to post the completed source code for the project that I created, and I’m happy to share that now. </p> <blockquote> <p><a href="https://github.com/MisterJames/BootstrappingMvc-Code" target="_blank">View the Completed Project on GitHub</a></p></blockquote> <p>I will note that this is how the project is <em>at the end of the series</em> and things do change. Some of the days later on in the exercises are refactorings over the earlier work.</p> <h2>Getting All the Code, Day-by-Day + Bonuses</h2> <p>I took things further, however, and I’ve edited the series into both an eBook and a print version. Included with either is access to the repository with complete day-by-day branches so that you can work on any aspect of the project, play around, make changes or customizations and then just move to a different chapter. </p><iframe style="float: right" height="400" src="https://leanpub.com/bootstrappingmvc/embed" frameborder="0" width="160" allowtransparency></iframe> <p>Can’t get past a certain issue with your syntax or markup? Do a diff against my work and see what got away. Each chapter branch contains the completed, working code for that chapter. You can use the previous chapter’s branch to start work as you follow along from anywhere in the book.</p> <p>As well, for any of my blog readers (yes, that’s you!) I’m also offering the book at a deeply discounted price of $6.99 (from a suggested $24.99) for the first 50 folks who snatch up the offer!</p> <blockquote> <p>Get <strong>Bootstrapping MVC</strong> for the discounted price of $6.99 with this coupon: <a title="http://leanpub.com/bootstrappingmvc/c/readblogsFTW" href="http://leanpub.com/bootstrappingmvc/c/readblogsFTW">http://leanpub.com/bootstrappingmvc/c/readblogsFTW</a></p></blockquote> <p>For those of us (me included) who still like killing trees and having a paper copy next to the keyboard, I’ve also got a print version available of the book which would make a great addition to any web developer’s library.</p> <p><iframe style="height: 240px; width: 120px; float: right" marginheight="0" src="http://rcm-na.amazon-adsystem.com/e/cm?t=chasthelist-20&amp;o=15&amp;p=8&amp;l=as1&amp;asins=B00MP73S1E&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr" frameborder="0" marginwidth="0" scrolling="no"></iframe></p> <p>Buy the paperback edition here: <a title="http://www.lulu.com/shop/james-chambers/bootstrapping-mvc/paperback/product-21757965.html" href="http://www.lulu.com/shop/james-chambers/bootstrapping-mvc/paperback/product-21757965.html">http://www.lulu.com/shop/james-chambers/bootstrapping-mvc/paperback/product-21757965.html</a></p> <p>Finally, for the Kindle readers out there, you can also pick up a copy of the book on Amazon!</p> <p>Enjoy the book and code, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4761</wp:post_id>
		<wp:post_date>2014-08-13 21:41:00</wp:post_date>
		<wp:post_date_gmt>2014-08-13 21:41:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>30-days-of-bootstrap-and-asp-net-mvc-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="30daysmvcbootstrap"><![CDATA[30DaysMvcBootstrap]]></category>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208204]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>38421</wp:comment_id>
			<wp:comment_author><![CDATA[francisco]]></wp:comment_author>
			<wp:comment_author_email>franciscovega2010@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.191.6.59</wp:comment_author_IP>
			<wp:comment_date>2014-10-20 21:42:05</wp:comment_date>
			<wp:comment_date_gmt>2014-10-20 21:42:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, still continuing the discount?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812496]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39221</wp:comment_id>
			<wp:comment_author><![CDATA[HOWARD SMITH]]></wp:comment_author>
			<wp:comment_author_email>howards@globascope.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.globascope.com</wp:comment_author_url>
			<wp:comment_author_IP>108.0.22.183</wp:comment_author_IP>
			<wp:comment_date>2015-01-10 20:07:43</wp:comment_date>
			<wp:comment_date_gmt>2015-01-10 20:07:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I will like to appeal to all those who pretend they can only pay no more than $7.00 for the book. Stop being ridiculous. The man worked his brains to help you get your brains working. I think $12.99 is fair price.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812495]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39281</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-01-13 20:53:32</wp:comment_date>
			<wp:comment_date_gmt>2015-01-13 20:53:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really thank you for your kind words Howard, the comments that get posted here are actually usually only the ones where I'm not getting called names for ripping people off :). I really do appreciate everyone who's bought a copy and really made this an exercise I would like to do again.

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>39221</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812495]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812602]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39291</wp:comment_id>
			<wp:comment_author><![CDATA[There is Something you Want to Know. So Learn it. | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/01/there-is-something-you-want-to-know-so-learn-it/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.50</wp:comment_author_IP>
			<wp:comment_date>2015-01-13 23:50:14</wp:comment_date>
			<wp:comment_date_gmt>2015-01-13 23:50:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] if you’re wanting to ramp up your web-dev skills and get in on a 30 day challenge, be sure to check out my book on Bootstrap and the MVC Framework with tons of tips on CSS, JS, jQuery, and ASP.NET’s MVC 5. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39361</wp:comment_id>
			<wp:comment_author><![CDATA[Day 2 &ndash; Adding Entities to a Storage Account Table | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2015/01/day-2-adding-entities-to-a-storage-account-table/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.16.187</wp:comment_author_IP>
			<wp:comment_date>2015-01-21 00:51:40</wp:comment_date>
			<wp:comment_date_gmt>2015-01-21 00:51:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] you’re new to Bootstrap, it may seem like there’s a lot going on there, but you get used to it pretty quickly. Our form [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Adding Some (Font) Awesome to MVC and Bootstrap</title>
		<link>http://jameschambers.com/2014/08/adding-some-font-awesome-to-mvc-and-bootstrap/</link>
		<pubDate>Sun, 24 Aug 2014 22:19:26 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=4951</guid>
		<description></description>
		<content:encoded><![CDATA[<p>While Bootstrap includes many great icons from <strong>Glyphicons</strong> baked right in, I’m often left looking for <em>That One Missing Graphic</em> when I try to put a project together. In this post we’ll look at the open source <strong>Font Awesome</strong> collection of images that serve as a wonderful addition to your site in the form of a font and CSS toolkit.</p> <p align="center"><em><a href="http://jameschambers.com/bootstrapping-mvc/" target="_blank">See more tips, tricks and tutorials like this in my book, Bootstrapping MVC.</a></em></p> <p><strong>Just a quick note</strong>: If you already know what Font Awesome is and just want my advice on how to add it to your project via NuGet, skip to the end of the post. If you want more background on what Font Awesome is and why you might want to use it, grab a coffee and have a read!</p> <h2>A Bit About Font Awesome</h2> <p><img title="Heart" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="A Picture of a Heart Icon" src="http://jameschambers.com/wp-content/uploads/2014/08/image.png" width="128" align="right" height="114">Font Awesome is a font and CSS toolkit that was created by Dave Gandy, originally designed to be a compliment to the Bootstrap library. There is no JavaScript component to it and it does not add any new behaviors to your site, but it does have some great-looking, scalable icons that you’ll likely love.&nbsp; See what I did there, with the heart? <img class="wlEmoticon wlEmoticon-winkingsmile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Winking smile" src="http://jameschambers.com/wp-content/uploads/2014/08/wlEmoticon-winkingsmile.png"></p> <p>There are two core elements to using the library: the font files themselves and the CSS classes that wire things up for use on your site. With the library in place, you can get the above heart icon to appear simply by adding the following syntax:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">i</span> <span class="attr">class</span><span class="kwrd">="fa fa-heart"</span><span class="kwrd">&gt;&lt;/</span><span class="html">i</span><span class="kwrd">&gt;</span></pre>
<p>Because it’s implemented as a scalable vector-based font, rather than raster images, the icons look great on any screen type and at any size. You get the base styling, margins, sizing and the like by attributing the &lt;I&gt; element with the fa class, then select your icon by name. There are CSS classes for creating variant sizes (twice as large):</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">i</span> <span class="attr">class</span><span class="kwrd">="fa fa-camera-retro fa-2x"</span><span class="kwrd">&gt;&lt;/</span><span class="html">i</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>…adding spinner effects (here, a spinning cog):</p><pre class="csharpcode">&lt;i <span class="kwrd">class</span>=<span class="str">"fa fa-cog fa-spin"</span>&gt;&lt;/i&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>…or stacking images together to make composite icons, like a flag on a circle:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">span</span> <span class="attr">class</span><span class="kwrd">="fa-stack fa-lg"</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">i</span> <span class="attr">class</span><span class="kwrd">="fa fa-circle fa-stack-2x"</span><span class="kwrd">&gt;&lt;/</span><span class="html">i</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">i</span> <span class="attr">class</span><span class="kwrd">="fa fa-flag fa-stack-1x fa-inverse"</span><span class="kwrd">&gt;&lt;/</span><span class="html">i</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">span</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>…as well as other options, like rotating and flipping, adding borders and pulling the icons to the left or right. You can find the complete source on the <a href="http://fortawesome.github.io/Font-Awesome/examples/" target="_blank">Font Awesome examples page</a>.</p>
<p>While these display classes are all built to work with Bootstrap natively, the CSS for Font Awesome also includes everything it needs class-wise (such as pull-left) to work independently of Bootstrap.</p>
<p>The icons tend to be aptly named and terse, so you’re not typing a metric tonne of code. I’m using Visual Studio 2013 and working with the library is a breeze because of the automatic syntax completion offered through IntelliSense.</p>
<p><img title="Intellisense sample" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="HTML Code: &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;" src="http://jameschambers.com/wp-content/uploads/2014/08/image1.png" width="415" height="108"></p>
<p>If you download the ZIP from the <a href="http://fontawesome.io" target="_blank">Font Awesome</a> site, you’ll get the CSS (and minified version), the font files for multi-platform and multi-browser support as well as the LESS and SCSS files to customize things should you so need.</p>
<h2>A Note on Accessibility</h2>
<p>Though the icons and images of Font Awesome are indeed implemented as a font, it’s not like wingdings or anything where a letter becomes repurposed. The author elected to use the standards-based Private Use Area mapping from Unicode, meaning screen readers for accessibility will ignore the characters of the font and not attempt to read random characters off.</p>
<h2>The Naked “Installation”</h2>
<p>From the docs on the site, the easiest way to start using Font Awesome is just to use the CDN version of the toolkit.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">link</span> <span class="attr">href</span><span class="kwrd">="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css"</span> <span class="attr">rel</span><span class="kwrd">="stylesheet"</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Using the CDN version may help improve load times, especially when your users are spread out over multiple geographic regions. Not all corporate policies allow for public CDN use for in-house projects, however, so you still have the option to download and use Font Awesome as an asset in your deployment.</p>
<p><img title="Solution structure for typical installation of Font Awesome" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Solution structure for typical installation of Font Awesome" src="http://jameschambers.com/wp-content/uploads/2014/08/image2.png" width="239" align="right" height="181">If you do download the ZIP, you’ll need to execute a couple of familiar and straightforward tasks to use the toolkit:</p>
<ul>
<li>Copy the CSS and Fonts folder into your project, likely under the Content folder</li>
<li>Add a new bundle to your site and include the CSS in your _Layout (or modify an existing, in-use bundle to include the CSS).</li></ul>
<p>The only thing to watch for is that you’re going to need to honor the relative path structure of the CSS and Fonts to avoid any rendering problems. The CSS assumes the fonts are in a folder called Fonts at the same level in the path.</p>
<h2>Using a NuGet Package</h2>
<p>There’s always an easier way to do it, and usually the way to do that with .NET is going to involve a little bit of NuGet.</p>
<p>I found no fewer than half a dozen packages on NuGet for Font Awesome. While they all seem to list Mr. Gandy as the author, none of them appear to be officially part of the project. So, for better or for worse, there’s no officially sanctioned project here. Just the same, the packages are there if you want to use them and I have my opinions on them. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/08/wlEmoticon-smile.png"></p>
<p>The package I recommend is <a href="https://www.nuget.org/packages/FontAwesome.MVC/" target="_blank">FontAwesome.MVC</a> by JiveCode aka <a href="https://github.com/JustLikeIcarus" target="_blank">JustLikeIcarus</a>. This package takes a dependency on his Font Awesome package containing the CSS and fonts, then it adds a class (FontAwesomeBundleConfig) that registers a style bundle for you. </p>
<p>All that’s left to do is to modify your _Layout, adding the following line of code to your HEAD:</p><pre class="csharpcode">@Styles.Render(<span class="str">"~/Content/fontawesome"</span>)</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>There are other packages that use Font Awesome and try to augment MVC giving your Razor helper methods, but I’ve got mixed feelings on this approach. A Razor helper that requires me to type more code and allows me to know less about the CSS I’m using doesn’t feel quite right. With IntelliSense support for CSS in VS, I’m not sure I see the need for Razor helpers, and I really like learning the classes I’m using. </p>
<h2>Next Steps</h2>
<p>With a groovy new set of icons now available to my site, my next post will be on leveraging those to create something interesting with the MVC Framework.</p>
<p align="center"><em>Like this post? You can <a href="http://jameschambers.com/bootstrapping-mvc/" target="_blank">see more tips, tricks and tutorials </a><br></em><em>like this in my book, Bootstrapping MVC.</em></p>
<p>Happy coding! <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/08/wlEmoticon-smile.png"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4951</wp:post_id>
		<wp:post_date>2014-08-24 22:19:26</wp:post_date>
		<wp:post_date_gmt>2014-08-24 22:19:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-some-font-awesome-to-mvc-and-bootstrap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="fontawesome"><![CDATA[FontAwesome]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208891]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37621</wp:comment_id>
			<wp:comment_author><![CDATA[Wagner]]></wp:comment_author>
			<wp:comment_author_email>wagmelo1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.0.207.58</wp:comment_author_IP>
			<wp:comment_date>2014-08-25 18:48:55</wp:comment_date>
			<wp:comment_date_gmt>2014-08-25 18:48:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James, this is a great article about (Font) Awesome.
I've been using (Font) Awesome, it's an easy way to improve styling.
I've been avoided using helpers for simple things, since it just adds unnecessary complexity.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812995]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38051</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-09-26 00:42:31</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 00:42:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, I agree. The helpers can sometimes seem like you're writing just as much code, so I'm not sure what the help is!

Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37621</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812995]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812997]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Using Font Awesome in an Accessible, Bindable Star Rating Control</title>
		<link>http://jameschambers.com/2014/09/using-font-awesome-in-an-accessible-bindable-star-rating-control/</link>
		<pubDate>Mon, 08 Sep 2014 02:00:49 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5011</guid>
		<description></description>
		<content:encoded><![CDATA[<p><font size="1"><br></font><a title="Bootstrapping MVC - THE eBook for developers using Bootstrap on MVC" href="https://leanpub.com/bootstrappingmvc" target="_blank"><img title="banner" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="banner" src="http://jameschambers.com/wp-content/uploads/2014/09/banner.png" width="615" height="90"></a></p> <p>Creating a rating control that works across browsers, looks good and can be taken advantage of by the MVC Framework requires a little CSS know-how, a couple of freely-available frameworks and some convention-following. There’s a bit of work to get it set up, but it’s reusable, accessible and gosh darn it, it looks good, too.</p> <p>Don’t overlook the accessible bits! It’s important to remember that most organizations and agencies have policies in place ensuring that folks with disabilities can use alternate methods to view your site. While I am by no means an expert in this area I do have the help of a friend who will try things out for me from time to time in a screen reader and I try to keep these concerns at the front of my mind when doing something “off course”.</p> <h2>Our Starting Point</h2> <p>I’m building off of <a title="Adding Font Awesome to MVC 5 Projects" href="http://jameschambers.com/2014/08/adding-some-font-awesome-to-mvc-and-bootstrap/" target="_blank">the work in the last post</a>, where I added Font Awesome to our Bootstrap-enabled MVC 5 web site. Let’s drop a model class for a movie in our project in the Models folder that looks like this:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Movie
{
    <span class="kwrd">public</span> <span class="kwrd">int</span> MovieId { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">string</span> Title { get; set; }
    [UIHint(<span class="str">"StarRating"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">int</span> Rating { get; set; }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Next, let’s update the HomeController to have the following actions:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Index()
{
    var movie = <span class="kwrd">new</span> Movie
    {
        Title = <span class="str">"The Last Starfighter"</span>, 
        Rating = 4
    };
    <span class="kwrd">return</span> View(movie);
}

[HttpPost]
<span class="kwrd">public</span> ActionResult Index(Movie movie)
{
    <span class="kwrd">return</span> View(<span class="str">"Index"</span>, movie);
}</pre>
<p>Nothing too fancy here, just a GET and POST action for Index requests. The GET populates (simulates) someone navigating to an item that they can rate. The POST allows you to set a breakpoint so that you can inspect the movie result when you submit.</p>
<p>Finally, scaffold a view for Index. <strong>First</strong>, delete the Index.cshtml from the Views/Home folder in your project. <strong>Next</strong>, right-click on one of the the Index methods above and select Add View, then choose the Edit template (don’t create a partial view here) and let it build the page for you.&nbsp; <strong>Finally</strong>, run your project to see what you get; it should look like this:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/09/image.png" width="360" height="201"></p>
<p>That’s okay, but, here’s what we want to see:</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/09/image1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/09/image_thumb.png" width="357" height="214"></a></p>
<h2>Getting Stylish</h2>
<p>So, believe it or not, those are just radio buttons! There’s a couple of things we do to make it come together, including the use of a container DIV, but it’s mostly straightforward. Let’s look at the basic HTML structure that makes this tick.</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="rating"</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">id</span><span class="kwrd">="star5-Rating"</span> <span class="attr">name</span><span class="kwrd">="Rating"</span> <span class="attr">value</span><span class="kwrd">="5"</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star5-Rating"</span> <span class="attr">title</span><span class="kwrd">="Best"</span><span class="kwrd">&gt;</span>5 stars<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
  
  <span class="rem">&lt;!-- ...more like these... --&gt;</span>
  
  <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">id</span><span class="kwrd">="star1-Rating"</span> <span class="attr">name</span><span class="kwrd">="Rating"</span> <span class="attr">value</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star1-Rating"</span> <span class="attr">title</span><span class="kwrd">="Pretty Bad"</span><span class="kwrd">&gt;</span>1 star<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The container holds a collection of inputs and labels. These elements are attributed as you’d expect, but are inserted in the document in <em>reverse order</em> so that “5 stars” is at the top and “1 star” is at the bottom. This has to do with CSS bits, which we’ll come to in a minute.</p>
<h2>Oh…here we are, the CSS bits! </h2>
<p>Right, so we start by setting up the container and getting our input off-screen. </p><pre class="csharpcode">.rating {
    float:left;
}

.rating:not(:checked) <span class="kwrd">&gt;</span> input {
    position:absolute;
    top:-9999px;
    clip:rect(0,0,0,0);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This works okay because if a user taps, clicks or selects a label with a screen reader, the input is still appropriately checked. Next, we wire up the label.</p><pre class="csharpcode">.rating:not(:checked) <span class="kwrd">&gt;</span> label {
    float:right;
    width:1em;
    padding:0 .1em;
    overflow:hidden;
    white-space:nowrap;
    cursor:pointer;
    font-size:3em;
    line-height:1.2;
    color:#e0e0e0;
}

.rating:not(:checked) <span class="kwrd">&gt;</span> label:before {
    font-family: FontAwesome;
    content: "\f005";
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>These two styles push the label off-screen and setup the fixings for our star, including the insert of the character from Font Awesome. </p>
<p>We float these to the right so that we correct our order; remember that we inserted the stars in reverse order in our HTML, here we use CSS to correct that. This workaround is needed for the foreseeable future as we do not have CSS selectors to help us resolve things “before” our element, only after. By putting rating 1 <em>after</em> rating 3, we can select 3, 2 and 1 with various combinations of selectors; however, there is no mechanism allowing us to select the other way, i.e., “before”.&nbsp; (The before psuedo-selector allows us to insert content, but not apply style transformations.)</p>
<p>Finally, we handle the color states with various combinations to handle selected stars, stars that were previously selected and stars that are hovered (but not yet selected).</p><pre class="csharpcode">.rating <span class="kwrd">&gt;</span> input:checked ~ label {
    color: #fa0;
}

.rating:not(:checked) <span class="kwrd">&gt;</span> label:hover,
.rating:not(:checked) <span class="kwrd">&gt;</span> label:hover ~ label {
    color: #fe0;
}

.rating <span class="kwrd">&gt;</span> input:checked + label:hover,
.rating <span class="kwrd">&gt;</span> input:checked + label:hover ~ label,
.rating <span class="kwrd">&gt;</span> input:checked ~ label:hover,
.rating <span class="kwrd">&gt;</span> input:checked ~ label:hover ~ label,
.rating <span class="kwrd">&gt;</span> label:hover ~ input:checked ~ label {
    color: #ea0;
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>It may seem like there’s a lot of action going on in that code, but it’s required. The &gt;, +, ~ and : selectors in there allow us to be very specific about which elements <em>in which state</em> require coloring.</p>
<p>Add all of those CSS bits to your Site.css file (in the Content folder) and your styles will be in place. All that’s left to do now is to take that rough-in of HTML we did before and turn it into something the MVC Framework can use.</p>
<h2>Bringing Some MVC to the Equation</h2>
<p>You’ll have noticed the attribute UIHint decorating our Rating property on the Movie model class that we created in the first step. That was no accident! Now, let’s get that working for us by creating a reusable partial view in our project. Add a file called StarRating.cshtml to the Views\Shared\EditorTemplates folder. By convention, this is the folder that the MVC Framework checks for custom views used to render properties or models (you can see another <a title="make checkboxes better with Bootstrap and the MVC Framework" href="http://jameschambers.com/2014/06/day-7-semi-automatic-bootstrap-display-templates/" target="_blank">sample here from my Bootstrap series</a>). </p>
<p>The StarRating.cshtml should look like this:</p><pre class="csharpcode">@model int

@{
    var chk = "checked";
    var checked1 = Model == 1 ? chk : null;
    var checked2 = Model == 2 ? chk : null;
    var checked3 = Model == 3 ? chk : null;
    var checked4 = Model == 4 ? chk : null;
    var checked5 = Model == 5 ? chk : null;
    var htmlField = ViewData.TemplateInfo.HtmlFieldPrefix;
}

<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="rating"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">checked</span><span class="kwrd">="@checked5"</span> <span class="attr">id</span><span class="kwrd">="star5-@htmlField"</span> <span class="attr">name</span><span class="kwrd">="@htmlField"</span> <span class="attr">value</span><span class="kwrd">="5"</span> <span class="kwrd">/&gt;&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star5-@htmlField"</span> <span class="attr">title</span><span class="kwrd">="Best"</span><span class="kwrd">&gt;</span>5 stars<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">checked</span><span class="kwrd">="@checked4"</span> <span class="attr">id</span><span class="kwrd">="star4-@htmlField"</span> <span class="attr">name</span><span class="kwrd">="@htmlField"</span> <span class="attr">value</span><span class="kwrd">="4"</span> <span class="kwrd">/&gt;&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star4-@htmlField"</span> <span class="attr">title</span><span class="kwrd">="Good"</span><span class="kwrd">&gt;</span>4 stars<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">checked</span><span class="kwrd">="@checked3"</span> <span class="attr">id</span><span class="kwrd">="star3-@htmlField"</span> <span class="attr">name</span><span class="kwrd">="@htmlField"</span> <span class="attr">value</span><span class="kwrd">="3"</span> <span class="kwrd">/&gt;&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star3-@htmlField"</span> <span class="attr">title</span><span class="kwrd">="Average"</span><span class="kwrd">&gt;</span>3 stars<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">checked</span><span class="kwrd">="@checked2"</span> <span class="attr">id</span><span class="kwrd">="star2-@htmlField"</span> <span class="attr">name</span><span class="kwrd">="@htmlField"</span> <span class="attr">value</span><span class="kwrd">="2"</span> <span class="kwrd">/&gt;&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star2-@htmlField"</span> <span class="attr">title</span><span class="kwrd">="Not Great"</span><span class="kwrd">&gt;</span>2 stars<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="radio"</span> <span class="attr">checked</span><span class="kwrd">="@checked1"</span> <span class="attr">id</span><span class="kwrd">="star1-@htmlField"</span> <span class="attr">name</span><span class="kwrd">="@htmlField"</span> <span class="attr">value</span><span class="kwrd">="1"</span> <span class="kwrd">/&gt;&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="star1-@htmlField"</span> <span class="attr">title</span><span class="kwrd">="Pretty Bad"</span><span class="kwrd">&gt;</span>1 star<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Here’s a breakdown of the interesting bits that make this work:</p>
<ul>
<li>The model is of type int, allowing it to be rendered for properties of the same type.</li>
<li>There is the use of nullable attributes in play, set up with the check against the model so that we can correctly render <em>which</em> star is to be selected. This is important when our model already has a value.</li>
<li>The radio buttons are ordered in reverse and take their name from the ViewData.TemplateInfo.HtmlFieldPrefix value. </li>
<li>We use an ID on each star, and a label that is related back to that input. This allows selection via the label (you should always use this!)</li></ul>
<p>Viola! With the CSS from above in place, the custom editor template saved and the UIHint on your Movie model class, your page will now be rendered with a star rating control for your movie.</p>
<p>Set a breakpoint in your POST action of your controller. If you submit your form while debugging, you will see that the value you have selected is indeed bound to the property of the Movie class. Huzzah!</p>
<h2>Credits</h2>
<p>I have leaned on many star rating controls over the last decade, but have come back to variants of this one (<a href="http://lea.verou.me/2011/08/accessible-star-rating-widget-with-pure-css/" target="_blank">based on this work</a> from <a href="https://twitter.com/leaverou" target="_blank">@Lea Verou</a>) for the last two or three years now. I would like to stress that I haven’t yet found a <em>perfect</em> control (this one, for example works well with up/down arrows, but not left/right) and I am sure this version won’t work for all people in all scenarios. Also, the idea for this example came from the <a title="Font Awesome Examples" href="http://fontawesome.io/examples/" target="_blank">Font Awesome site</a>, but the astute reader would soon realize why the basic example on their site would not be a good candidate for MVC (primarily because of the lack of structure to accommodate multiple controls on the same page).</p>
<h2>Next Steps</h2>
<p>If you’ve built the sample along with the article, you’ll likely have had at least a few ideas on how you can create reusable controls for your project. Be sure to check out my <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">Bootstrap series</a> or purchase <a href="https://leanpub.com/bootstrappingmvc" target="_blank">a copy of my book</a> for more examples like this, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5011</wp:post_id>
		<wp:post_date>2014-09-08 02:00:49</wp:post_date>
		<wp:post_date_gmt>2014-09-08 02:00:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-font-awesome-in-an-accessible-bindable-star-rating-control</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="mvc5"><![CDATA[MVC5]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781482262]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>37981</wp:comment_id>
			<wp:comment_author><![CDATA[Using Editor Templates Multiple Times on the Same Page in MVC | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2014/09/using-editor-templates-multiple-times-on-the-same-page-in-mvc/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.56</wp:comment_author_IP>
			<wp:comment_date>2014-09-26 00:22:28</wp:comment_date>
			<wp:comment_date_gmt>2014-09-26 00:22:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] the last post we created a star rating control that can be easily used in model binding and in displaying a record on our page. The rating control [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Using Editor Templates Multiple Times on the Same Page in MVC</title>
		<link>http://jameschambers.com/2014/09/using-editor-templates-multiple-times-on-the-same-page-in-mvc/</link>
		<pubDate>Fri, 26 Sep 2014 00:22:20 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=5091</guid>
		<description></description>
		<content:encoded><![CDATA[<p><br><a title="Bootstrapping MVC - THE eBook for developers using Bootstrap on MVC" href="https://leanpub.com/bootstrappingmvc" target="_blank"><img title="banner5" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="banner5" src="http://jameschambers.com/wp-content/uploads/2014/09/banner5.png" width="615" height="90"></a></p> <p>In the last post <a href="http://jameschambers.com/2014/09/using-font-awesome-in-an-accessible-bindable-star-rating-control/" target="_blank">we created a star rating control</a> that can be easily used in model binding and in displaying a record on our page. The rating control used FontAwesome and some CSS hacks to change radio buttons (which are usable from screen readers) into stars. This gave us a reusable rating control in MVC that is accessible and looks pretty darn okay, and meets our needs for model binding.</p> <p><img title="image_thumb6" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image_thumb6" src="http://jameschambers.com/wp-content/uploads/2014/09/image_thumb6.png" width="357" height="214"></p> <p>But what if you wanted to build out a list of elements that you wanted to rate? Rather than just one movie, you wanted users to be able to rate your whole collection?&nbsp; Understanding the mechanics of the binding engine are important if you want to POST a list of entities back to an MVC controller.</p> <h2>Getting the Basics</h2> <p>One of the earliest things that attracted me to the MVC Framework was model binding, and the freedom to stop fishing the in the Form object for parameters that may or may not exist. Over time, many of us built libraries of code that we’d suck in to each project so that we could do things like wrap the extraction of a list of checkbox or radio values up into some kind of abstraction. We don’t <a href="http://theycallmemrjames.blogspot.ca/2010/05/aspnet-mvc-and-jquery-part-4-advanced.html" target="_blank">need to do that in MVC</a>.</p> <p>You’ll recall that a list of checkboxes in HTML is quite straightforward. The simplest approach might be something like this:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">method</span><span class="kwrd">="POST"</span> <span class="attr">action</span><span class="kwrd">="Index3"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="checkbox"</span> <span class="attr">name</span><span class="kwrd">="movies"</span> <span class="attr">title</span><span class="kwrd">="The Last Starfighter"</span> <span class="attr">value</span><span class="kwrd">="The Last Starfighter"</span> <span class="attr">id</span><span class="kwrd">="movie1"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="movie1"</span><span class="kwrd">&gt;</span>The Last Starfighter<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;&lt;</span><span class="html">br</span> <span class="kwrd">/&gt;</span>

    <span class="rem">&lt;!-- ... --&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="checkbox"</span> <span class="attr">name</span><span class="kwrd">="movies"</span> <span class="attr">title</span><span class="kwrd">="Amelie"</span> <span class="attr">value</span><span class="kwrd">="Amelie"</span> <span class="attr">id</span><span class="kwrd">="movie2"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="movie2"</span><span class="kwrd">&gt;</span>Amelie<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;&lt;</span><span class="html">br</span> <span class="kwrd">/&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">button</span> <span class="attr">type</span><span class="kwrd">="submit"</span><span class="kwrd">&gt;</span>Save<span class="kwrd">&lt;/</span><span class="html">button</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>And to “catch” that data, we need an action (the target of the form above) with the same name that accepts a List&lt;string&gt; with the name of the checkbox. The value attribute of the checkbox will be added to the list parameter in your action. Your action will look something like the following:</p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult Index3(List&lt;<span class="kwrd">string</span>&gt; movies)
{
    <span class="kwrd">return</span> View();
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The model binder allows any of the selected checkboxes to have a landing spot in your list. You don’t have to check for nulls, or iterate through the form collection to discover all that might have been submitted. It’s worth noting here, as well, that if your value attribute were all integers in your form, you could just as easily have the framework bind to a List&lt;int&gt; in your action signature.</p>
<p>So, that’s great for simple values, but…</p>
<h2>…What About Binding Complex Objects?</h2>
<p>I’m so glad you asked. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2014/09/wlEmoticon-smile.png"></p>
<p><a href="http://jameschambers.com/wp-content/uploads/2014/09/image2.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/09/image_thumb1.png" width="181" align="right" height="270"></a>If we now look back at our rating control, the control itself is actually ready to go as-is, but we’d need to get a bit more code into our view page (not the partial, but more like, the list of the movies) to get it to tick correctly.&nbsp; </p>
<p>Here’s what we’ll do:</p>
<ul>
<li>Change our index action to return a list</li>
<li>Iterate over the list in our view</li>
<li>Pass in some secret magic sauce to the HtmlHelper that renders our stars control</li></ul>
<p>We’ll load up some fake data to push to the view. You would typically want to get this data from a database or an API call of some kind. For now, we’ll go with this:</p><pre class="csharpcode"><span class="kwrd">public</span> ActionResult Index()
{
    var movies = <span class="kwrd">new</span> List&lt;Movie&gt;
    {
        <span class="kwrd">new</span> Movie{Title = <span class="str">"The Last Starfighter"</span>, Rating = 4},
        <span class="kwrd">new</span> Movie{Title = <span class="str">"Flight of the Navigator"</span>, Rating = 3},
        <span class="kwrd">new</span> Movie{Title = <span class="str">"Raiders of the Lost Ark"</span>,  Rating = 4},
        <span class="kwrd">new</span> Movie{Title = <span class="str">"Amelie"</span>,  Rating = 5}
    };
            
    <span class="kwrd">return</span> View(movies);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Great, now we just need to update our view. Basically, you can take everything out of the form and just replace it with the following, a foreach over the collection we’re passing in:</p><pre class="csharpcode">    @foreach (var movie in Model)
    {
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="row"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>@movie.Title<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="hidden"</span> <span class="attr">value</span><span class="kwrd">="@movie.MovieId"</span> <span class="attr">name</span><span class="kwrd">="@string.Format("</span><span class="attr">movies</span>[{<span class="attr">0</span>}].<span class="attr">MovieId</span><span class="kwrd">", i)"</span> <span class="kwrd">/&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="hidden"</span> <span class="attr">value</span><span class="kwrd">="@movie.Title"</span> <span class="attr">name</span><span class="kwrd">="@string.Format("</span><span class="attr">movies</span>[{<span class="attr">0</span>}].<span class="attr">Title</span><span class="kwrd">", i)"</span> <span class="kwrd">/&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>@Html.EditorFor(p =<span class="kwrd">&gt;</span> movie.Rating, "StarRating", string.Format("movies[{0}].Rating", i++))<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Also, don’t forget to change the @model on your page to the collection of Movie as so:</p><pre class="csharpcode">@model List<span class="kwrd">&lt;</span><span class="html">YourApplication.Models.Movie</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Finally, update the code block at the top of the page to declare a variable that we will use as a counter over our collection:</p><pre class="csharpcode">@{
    ViewBag.Title = <span class="str">"My Awesome List of Awesome Movies"</span>;
    var i = 0; <span class="rem">// movie control index</span>
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>We’re moving along now! There’s two crucial parts in how all this will work when it gets rendered on the client and eventually hits the model binder on the way back in when the form is submitted. The first is the way I’ve constructed the name attribute on our controls. For instance:</p><pre class="csharpcode">name=<span class="str">"@string.Format("</span>movies[{0}].MovieId<span class="str">", i)"</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>In the above code, on the first iteration, the name would be rendered as “movies[0].MovieId”. The prefix “movies” is what our parameter needs to be called on our action (for the POST). The index notation [0] tells MVC which element this object is in our list, and finally, the “MovieId” is simply the property we want to pass in.&nbsp; </p>
<p><em><strong>Note</strong>: While I’m passing in the ID and the Title as hidden params, I’m only doing so to show the model binder in action. You should always test/cleanse these values in your controller to prevent over-posting of data, where a malicious user could modify the object without your consent.</em></p>
<p>The second noteworthy point is the overload that I’m calling on the EditorFor method:</p><pre class="csharpcode">@Html.EditorFor(p =&gt; movie.Rating, <span class="str">"StarRating"</span>, <span class="kwrd">string</span>.Format(<span class="str">"movies[{0}].Rating"</span>, i++))</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>That’s important because I’m passing the similarly generated name (as above) as the name of the HTML field name. Remember that <a href="http://jameschambers.com/2014/09/using-font-awesome-in-an-accessible-bindable-star-rating-control/" target="_blank">in the last post</a> the EditorTemplate contained references to the ViewData.TemplateInfo.HtmlFieldPrefix? That is normally provided for you by default, but in the case of a list of objects, you need to provide it on your own. That code, in the Shared\EditorTemplates folder, was referenced like this:</p><pre class="csharpcode">var htmlField = ViewData.TemplateInfo.HtmlFieldPrefix;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>…and it was sprinkled throughout the control template.</p>
<p>Finally, we’re going to need to get that POST action in line.&nbsp; Update your controller method to look like this:</p><pre class="csharpcode">[HttpPost]
<span class="kwrd">public</span> ActionResult Index(List&lt;Movie&gt; movies)
{
    <span class="kwrd">return</span> View(movies);
}</pre>
<p>Now, when the form is submitted each set of indexed form fields will be used to new up an instance of our Movie class and placed in the collection. I’ve set a breakpoint so that you can see it in action:</p>
<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2014/09/image3.png" width="840" height="189">
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>You’d obviously want to do more than just cycle the movies through the controller, so rather than just returning the list you could do your validation, update your database, or aggregate stats from this response to a running average. So much fun to be had.</p>
<h2>Summary &amp; Next Steps</h2>
<p>I always like to encourage folks to try things out and see if they can get it working on your own. It all starts with File –&gt; New Project. Be sure to check out my <a href="http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/" target="_blank">Bootstrap series</a> or purchase <a href="https://leanpub.com/bootstrappingmvc" target="_blank">a copy of my book</a> for more examples like this, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5091</wp:post_id>
		<wp:post_date>2014-09-26 00:22:20</wp:post_date>
		<wp:post_date_gmt>2014-09-26 00:22:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-editor-templates-multiple-times-on-the-same-page-in-mvc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="fontawesome"><![CDATA[FontAwesome]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781438496]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
