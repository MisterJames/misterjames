<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.3.1" created="2015-11-29 06:14" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>They Call Me Mister James</title>
	<link>http://jameschambers.com</link>
	<description>Building the Web on the Cloud (and other musings)</description>
	<pubDate>Sun, 29 Nov 2015 06:14:53 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://jameschambers.com</wp:base_site_url>
	<wp:base_blog_url>http://jameschambers.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>james.chambers</wp:author_login><wp:author_email>james@jameschambers.com</wp:author_email><wp:author_display_name><![CDATA[james.chambers]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.3.1</generator>

	<item>
		<title>Upgrading to jQuery 1.9.0 Starts Giving you Unhandled Exception Errors</title>
		<link>http://jameschambers.com/2013/01/upgrading-to-jquery-1-9-0-starts-giving-you-unhandled-exception-errors/</link>
		<pubDate>Tue, 29 Jan 2013 14:52:14 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1581</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote> <p>I am running Windows 8, Visual Studio 2012 and working with Asp.Net MVC4. My upgrade was from jQuery 1.8.2 to jQuery 1.9.0 when this error surfaced.</p></blockquote> <p>If you upgrade an MVC project to the latest jQuery bits, you man run into an error similar to the following:</p> <blockquote> <p>Unhandled exception at line 115, column 5 in <a href="http://localhost:0000/Scripts/jquery.unobtrusive-ajax.js">http://localhost:0000/Scripts/jquery.unobtrusive-ajax.js</a></p> <p>0x800a01b6 - JavaScript runtime error: Object doesn't support property or method 'live'</p></blockquote> <p>There have been a number of methods that were deprecated in the library some time ago, and now jQuery 1.9.0 is executing on those changes and has removed the methods for good. You can read more about the changes on the <a href="http://blog.jquery.com/2013/01/15/jquery-1-9-final-jquery-2-0-beta-migrate-final-released/" target="_blank">jQuery site</a>.</p> <p>This doesn’t leave you stranded…the team has graciously provided a migration path for those who want to take advantage of the new library enhancements, but still need to maintain legacy code.&nbsp; The unobtrusive ajax script in our MVC projects are still calling some of these deprecated methods, so we need to take advantage of this offering.</p> <p>To add backwards compatibility to our project, we simple have to drop into the Package Manager Console and type the command:</p><code style="overflow: auto; border-top: silver 4px solid; border-right: silver 4px solid; border-bottom: silver 4px solid; color: #e2e2e2; padding-bottom: 15px; padding-top: 15px; font: 1.5em/1.5em 'andale mono', 'lucida console', monospace; padding-left: 15px; border-left: silver 4px solid; display: block; padding-right: 15px; background-color: #202020; box-shadow: 2px 2px 3px #6e6e6e; border-radius: 5px; -webkit-border-radius: 5px">PM&gt; Install-Package jQuery.Migrate </code> <p>&nbsp;</p> <p>Tada!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1581</wp:post_id>
		<wp:post_date>2013-01-29 14:52:14</wp:post_date>
		<wp:post_date_gmt>2013-01-29 14:52:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrading-to-jquery-1-9-0-starts-giving-you-unhandled-exception-errors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208391]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34231</wp:comment_id>
			<wp:comment_author><![CDATA[Kelvin]]></wp:comment_author>
			<wp:comment_author_email>kelvin@kelvingdavies.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.kelvingdavies.com</wp:comment_author_url>
			<wp:comment_author_IP>31.221.73.26</wp:comment_author_IP>
			<wp:comment_date>2013-08-05 14:54:10</wp:comment_date>
			<wp:comment_date_gmt>2013-08-05 14:54:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great, I'm sure you saved me a couple of hours research.  Top marks :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812644]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>jQuery Script Map Causing Critical Error in jQuery 1.9.0</title>
		<link>http://jameschambers.com/2013/01/jquery-script-map-causing-critical-error-in-jquery-1-9-0/</link>
		<pubDate>Tue, 29 Jan 2013 16:08:52 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1591</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Script maps are a great addition to the debugging arsenal of any script developer. Even for those of us who are “consumers” of some of the libraries out there, the script maps will help us get at the details of why something is going sideways when we’re working with minified versions of the code.&nbsp; </p> <p>Without the map, it has been difficult to find the correlating code in the original file. Elijah Manor does a great job at going over how to take advantage of script map support and it’s <a href="http://www.elijahmanor.com/2013/01/the-magic-of-jquery-source-map.html" target="_blank">benefits in jQuery 1.9.0</a>.</p> <h2>Minification in MVC4 and Critical Errors from the jQuery Script Map</h2> <p>There is a chance that you’ll run into this if you’re dropping code in Visual Studio 2012 on Win 8 with Asp.Net MVC, using bundling and minification:</p> <blockquote> <p>JavaScript critical error at line 1, column 11 in <a href="http://localhost:0000Scripts/jquery-1.9.0.min.map">http://localhost:0000Scripts/jquery-1.9.0.min.map</a></p> <p>SCRIPT1004: Expected ';'</p></blockquote> <p>If this is the case, check to see that your wildcard isn’t to greedy. For example, if you have something like this set up in your BundleConfig.cs:</p><pre class="csharpcode">    bundles.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/bundles/jquery"</span>).Include(
                <span class="str">"~/Scripts/jquery-1.*"</span>));</pre>
<p>…you’re telling the bundling engine to grab anything matching the script “jquery-1.anything”, and as a great optimization, the MVC Framework is smart enough to grab only one of library.js or library.min.js, and it prefers the min.js for you.&nbsp; The downside here is that the bundle builder is using a prefix match here, and it seems to be picking up the .map file as well. This seems to be inadvertently causing the critical error mentioned above (map files aren’t to be shipped to the client as part of the request).</p>
<h2>The Fix is In</h2>
<p>The good thing is that you’re not stuck on wildcards, and it’s likely better to be using the semantic versioning replacement token (especially with the jQuery libraries).&nbsp; Update your bundle to the following:</p><pre class="csharpcode">    bundles.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/bundles/jquery"</span>).Include(
                <span class="str">"~/Scripts/jquery-{version}.js"</span>));</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The {version} token is a replacement that does a best match against the file according to <a href="http://semver.org/" target="_blank">SemVer</a>.&nbsp; Now, instead of all the files getting added, and the risk of files being added multiple times, we get a smarter match on the library we are requesting for bundling and minification.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1591</wp:post_id>
		<wp:post_date>2013-01-29 16:08:52</wp:post_date>
		<wp:post_date_gmt>2013-01-29 16:08:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-script-map-causing-critical-error-in-jquery-1-9-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208426]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2321</wp:comment_id>
			<wp:comment_author><![CDATA[Rex]]></wp:comment_author>
			<wp:comment_author_email>miller.rex@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.203.90.34</wp:comment_author_IP>
			<wp:comment_date>2013-02-05 22:34:51</wp:comment_date>
			<wp:comment_date_gmt>2013-02-05 22:34:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks—the {version} token was exactly what I needed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812669]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bootstrapping Asp.Net MVC&#8211;Introduction to Twitter.Bootstrap.Mvc4</title>
		<link>http://jameschambers.com/2013/02/bootstrapping-asp-net-mvcintroduction-to-twitter-bootstrap-mvc4/</link>
		<pubDate>Sat, 02 Feb 2013 15:54:12 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1631</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m continuing my series in exploring Bootstrap integration with the Mvc Framework – part of the Asp.Net stack – and in this entry we’re going to be looking at a helper package that you can install in seconds to kickstart a project.&nbsp; Covered in this video are:</p> <ul> <li>Installing from NuGet  <li>Forking from GitHub, building locally and using the latest bits (or contributing!)  <li>Navigation routes  <li>Auto-scaffolded views for CRUD operations</li></ul><iframe height="315" src="http://www.youtube.com/embed/qSY2kVmZuhs" frameborder="0" width="560" allowfullscreen></iframe> <h2>Getting the Latest Stable Bits</h2> <p>One thing I didn’t mention in the video is that you don’t have to build the packages locally to get the latest versions. Eric Hexter has a MyGet feed setup to help you out in this regard. <a href="http://jameschambers.com/wp-content/uploads/2013/02/image.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: right; padding-top: 0px; padding-left: 0px; margin: 15px 0px 15px 15px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" align="right" src="http://jameschambers.com/wp-content/uploads/2013/02/image_thumb.png" width="309" height="170"></a>From the Package Manager Console in Visual Studio, simply pop open the options and add a new package feed:</p> <blockquote> <p><a title="http://www.myget.org/F/erichexter/" href="http://www.myget.org/F/erichexter/">http://www.myget.org/F/erichexter/</a></p></blockquote> <p>This lets you install the package from MyGet if you want to expose features not yet posted to the primary NuGet feed.</p> <p>Alternatively, you can use the NuGet Package Explorer (as I am in the image shown here) to browse through the packages on the feed. Primarily you’re going to be looking for “Bootstrap” or “Navigation” in the feed to pick up the relevant packages.</p> <h2>Detail All the Things!</h2> <p>I cover a lot of ground in the video and try to give you a sense of what is possible to do in only a few short minutes. If you want to dive deeper here are some resources to help you out as you explore Twitter’s Bootstrap library working with Asp.Net Mvc:</p> <ul> <ul> <li>GitHub repo for <a href="https://github.com/twitter/bootstrap" target="_blank">Twitter.Bootstrap</a>  <li>The repo for the <a href="https://github.com/erichexter/twitter.bootstrap.mvc" target="_blank">Twitter.Bootstrap.Mvc4 project</a><!--EndFragment--></li></ul> <li>Asp.Net Mvc tutorials <a href="http://jameschambers.com/tag/asp-net-mvc/" target="_blank">here on my blog</a>  <li>Asp.Net Mvc <a href="http://www.asp.net/mvc" target="_blank">home page</a>  <li>An overview of <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get" target="_blank">Post-Redirect-Get</a>  <li>The rest of my series on <a href="http://oldblog.jameschambers.com/blog/bootstrap-asp.net-mvc-quickhits-installing-bootstrap" target="_blank">Bootstrapping Mvc</a></li></ul> <p>Have fun!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1631</wp:post_id>
		<wp:post_date>2013-02-02 15:54:12</wp:post_date>
		<wp:post_date_gmt>2013-02-02 15:54:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bootstrapping-asp-net-mvcintroduction-to-twitter-bootstrap-mvc4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207122]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2071</wp:comment_id>
			<wp:comment_author><![CDATA[Bootstrap + The Asp.Net Mvc Framework: Building Your Site on Bootstrap | They Call Me Mister James]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com/2012/07/bootstrap-asp-net-mvc-quickhits-installing-bootstrap/</wp:comment_author_url>
			<wp:comment_author_IP>168.62.20.37</wp:comment_author_IP>
			<wp:comment_date>2013-02-02 16:02:27</wp:comment_date>
			<wp:comment_date_gmt>2013-02-02 16:02:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Using Twitter.Bootstrap.Mvc4 as a kick-starter [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34091</wp:comment_id>
			<wp:comment_author><![CDATA[Arayeh]]></wp:comment_author>
			<wp:comment_author_email>arayehn@evan-moor.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.evan-moor.com</wp:comment_author_url>
			<wp:comment_author_IP>173.11.93.245</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 16:33:08</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 16:33:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is it absolutely a better approach to go with Twitter.Bootstrap.MVC4 or just Twitter.Bootstrap will suffice? Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811700]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34161</wp:comment_id>
			<wp:comment_author><![CDATA[Sito]]></wp:comment_author>
			<wp:comment_author_email>sitodemmers@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.81.93.147</wp:comment_author_IP>
			<wp:comment_date>2013-06-22 11:42:12</wp:comment_date>
			<wp:comment_date_gmt>2013-06-22 11:42:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great mr. James!  thanks a lot....keep up the good work. You helped me a lot!

regards!

sito]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811701]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34241</wp:comment_id>
			<wp:comment_author><![CDATA[Marcos Vinicius]]></wp:comment_author>
			<wp:comment_author_email>viiny123@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cwork.com.br</wp:comment_author_url>
			<wp:comment_author_IP>201.86.95.23</wp:comment_author_IP>
			<wp:comment_date>2013-08-28 14:51:31</wp:comment_date>
			<wp:comment_date_gmt>2013-08-28 14:51:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi Mister James,

I'm following his example, but it seems that the Twitter.Bootstrap.Mvc4 had some changes of names and directories, then the project is not getting the visual css page layout is not any, I'm trying to configure BootstrapBundleConfig however unsuccessfully if you have any such updated or solve the problem thank you, I'm from Brazil do not speak English'm utilizanto the google translate if you can help thank you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811697]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34251</wp:comment_id>
			<wp:comment_author><![CDATA[Marcos Vinicius]]></wp:comment_author>
			<wp:comment_author_email>viiny123@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cwork.com.br</wp:comment_author_url>
			<wp:comment_author_IP>201.86.95.23</wp:comment_author_IP>
			<wp:comment_date>2013-08-28 14:55:40</wp:comment_date>
			<wp:comment_date_gmt>2013-08-28 14:55:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[if you have an email where I can send you the image with the problem also helps for you to understand the problem.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811702]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>A Comparison of Asp.Net MVC Templates</title>
		<link>http://jameschambers.com/2013/02/a-comparison-of-asp-net-mvc-templates/</link>
		<pubDate>Wed, 06 Feb 2013 14:11:06 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1651</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Visual Studio 2012 and the Asp.Net refresh (<a href="http://asp.net/vnext" target="_blank">2012.2</a>) have introduced a number of new and refreshed templates to help bootstrap your project as you turn up a new MVC 4 site.&nbsp; This post breaks down the key items that are in each of the templates to help you get a better understanding of your starting point.</p> <h3>Structure, Feature and Element Comparison</h3> <p>The template names are across the top, and the items included in the template in the leftmost column.</p> <table cellspacing="0" cellpadding="2" width="624" border="0"> <tbody> <tr height="20"> <td width="361" align="center">&nbsp;</td> <td width="52" align="center"><strong><font color="#000000" size="1">Empty</font></strong></td> <td width="56" align="center"><strong><font color="#000000" size="1">Basic</font></strong></td> <td width="55" align="center"><strong><font color="#000000" size="1">Internet</font></strong></td> <td width="51" align="center"><strong><font color="#000000" size="1">Intranet</font></strong></td> <td width="47" align="center"><strong><font color="#000000" size="1">Mobile</font></strong></td></tr> <tr> <td valign="top" width="361"><font color="#333333"><strong>Folder Structure</strong></font></td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Controllers, Models, Views, App_Start, App_Data</td> <td valign="top" width="52">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Content, Scripts</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Views\Shared</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361"><font color="#000000"><strong>Project Elements</strong></font></td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Global.asax, Web.Config, Packages.Config</td> <td valign="top" width="52">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; FilterConfig, RouteConfig, WebApiConfig</td> <td valign="top" width="52">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; BundleConfig</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; AuthConfig</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; _ViewStart, _Layout and Error Pages</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Sample Home Controller &amp; Views</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361"><font color="#000000"><strong>Notable Third-Party Features</strong></font></td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Packages Installed</td> <td valign="top" width="52">&nbsp;&nbsp;&nbsp; 11</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; 23</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; 34</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; 25</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; 28</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; jQuery, jQuery UI</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; jQuery Mobile</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; KnockoutJS, Modernizer, Validation</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; EntityFramework</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361"><font color="#000000"><strong>Authentication and Authorization</strong></font></td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Sample Controller</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Models, EF DbContext Samples</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Supporting “Simple” Provider &amp; ActionFilter</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Support for External OAuth</td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="51">&nbsp;</td> <td valign="top" width="47">&nbsp;&nbsp;&nbsp; X</td></tr> <tr> <td valign="top" width="361">&nbsp;&nbsp;&nbsp; Auth via Active Directory (Azure or Windows) </td> <td valign="top" width="52">&nbsp;</td> <td valign="top" width="56">&nbsp;</td> <td valign="top" width="55">&nbsp;</td> <td valign="top" width="51">&nbsp;&nbsp;&nbsp; X</td> <td valign="top" width="47">&nbsp;</td></tr></tbody></table> <h3>And Then Again, In English</h3> <p>Taking a look at the templates from a more pragmatic perspective, let’s consider how you’d actually use them and the situations where they’d be most appealing.</p> <ul> <li><strong>Empty</strong> – This is the barebones project with enough of the MVC bits wired so that you can work on the Asp.Net stack. If you are looking for a clean slate, this is it. You can leverage the conventions of the framework, choose your client-side libraries, build your own templates, and create your controllers and views from scratch.</li> <li><strong>Basic</strong> – If you’re good with the default selection of scripts and templates – jQuery and jQuery UI are installed for you – the rest of the pieces are in place for you to pick up and start developing. This project type adds a basic template (your layout page) and an error page with no styling.&nbsp; There’s more of a canvas here, with a little less legwork than the empty template.</li> <li><strong>Internet</strong> – This is the bells and whistles edition. Sample controllers, local accounts and third-party authentication, a complete style makeover and more. You can use this to build a decent looking CRUD site, just be prepared for 1984-style conformity.&nbsp; There’s also a wealth of JavaScript libraries to help build a great end-user experience as you learn the MVC Framework.</li> <li><strong>Intranet</strong> – The biggest differentiator for this template from the Internet version is the absence of accounts and authorization. Instead, the project ships with a read me with links on how to configure Active Directory and integrated sign on. This is especially great if you’re working with Azure and corporate accounts where users have IE installed – you get single sign-on to the app.</li> <li><strong>Mobile</strong> – While all the template types support alternate views which could be used for mobile support, this project comes ready to target mobile browsers. I won’t get into the debate of responsive design vs. dedicated sites here, but certainly if you are trying to create a context-centric, mobile-specific experience, this is the easiest place to start.</li></ul> <h3>Not Mentioned In Today’s Broadcast</h3> <p>There are notably three project types missing from the mix: <strong>Single Page Application</strong>, <strong>Web API</strong> and the newly introduced <strong>Facebook Application</strong>. These each a have specific function in the web development world and are worth considering individually; I’ll break them down in another post.</p> <h3>What’s in A Name?</h3> <p>While I’ve spelled out the features of MVC projects that are included in each of the templates, I want to also say that if there is something that you would like included in a template that doesn’t have it by default, it’s still pretty easy to add most in.&nbsp; Many of the items above can be added with a right-click –&gt; “New Something…” or by installing a package via NuGet.</p> <h3>And, Next on the Docket</h3> <p>All that’s left now to do is to poke around with the templates. Download Visual Studio 2012 from the <a href="http://asp.net/mvc" target="_blank">Asp.Net MVC homepage</a> to get all the bits you need to start building sites. You can get the template refresh from the <a href="http://asp.net/vnext" target="_blank">vNext site</a>. Finally, push through some of the tutorials and get an idea of what you can do with the MVC Framework!</p> <p>Diving deeper? Try these:</p> <ul> <li>Read up on <a href="http://jameschambers.com/2012/10/a-web-developer-s-look-at-the-mvc4-request-pipeline/" target="_blank">The MVC4 Request Pipeline</a> to learn more about how your</li> <li>Look for help on <a href="http://stackoverflow.com/questions/tagged/asp.net-mvc" target="_blank">MVC on Stack Overflow</a></li> <li>A <a href="http://www.asp.net/mvc/tutorials/mvc-music-store/mvc-music-store-part-1" target="_blank">10-part series</a> on building the Asp.Net MVC Music Store app</li></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1651</wp:post_id>
		<wp:post_date>2013-02-06 14:11:06</wp:post_date>
		<wp:post_date_gmt>2013-02-06 14:11:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-comparison-of-asp-net-mvc-templates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3783042539]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VS2012 Code Snippet for Test Methods</title>
		<link>http://jameschambers.com/2013/02/vs2012-code-snippet-for-test-methods/</link>
		<pubDate>Thu, 07 Feb 2013 18:14:42 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1691</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I don’t post about unit testing, but when I do, lather, rinse, repeat.</p> <p>Here’s a snippet to generate a AAA-friendly test method that can be invoked by typing <em>aaa</em> and then pressing tab. Better if you do it in a test class #JustSaying.&nbsp; Tested in VS2012, works here <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2013/02/wlEmoticon-smile.png">. The great thing about VS2012 – and to be honest I’m not sure what version this awesome was introduced – you can edit code snippets on the fly in Visual Studio and test them as you save them, without closing the file or having to restart Visual Studio.&nbsp; Brilliant. I have been doing the VS restart for years, and just tripped over this feature. </p> <p>Oh, right, the code snippet!</p><script src="https://gist.github.com/MisterJames/4732853.js"></script> <p>(<a href="https://gist.github.com/MisterJames/4732853" target="_blank">View Gist on GitHub</a>)</p> <p>This snippet is based on Roy Osherove’s recommended <a href="http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html" target="_blank">test naming convention/theories</a>. There’s no general consensus on what constitutes the “correct” test name, but this is pretty sound as far as conventions go.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1691</wp:post_id>
		<wp:post_date>2013-02-07 18:14:42</wp:post_date>
		<wp:post_date_gmt>2013-02-07 18:14:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vs2012-code-snippet-for-test-methods</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[Unit Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781580387]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web Camp&#8211;Vancouver</title>
		<link>http://jameschambers.com/2013/02/web-campvancouver/</link>
		<pubDate>Sat, 09 Feb 2013 22:00:47 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1741</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I am geeked to announce that my videos for MVC4 and Web API from Web Camp in Vancouver have been made available.&nbsp; All of the videos in the collection are located <a href="http://channel9.msdn.com/Events/Web-Camps/Vancouver/" target="_blank">here</a>, and the videos I contributed are below.</p> <h2>Building and Deploying Web Sites with ASP.NET MVC 4</h2><a href="http://channel9.msdn.com/Events/Web-Camps/Vancouver/VWC2" target="_blank">Watch the video on Channel 9</a> <iframe style="height: 270px; width: 480px" src="http://channel9.msdn.com/Events/Web-Camps/Vancouver/VWC2/player?w=480&amp;h=270" frameborder="0" scrolling="no"></iframe> <p><strong>Disclaimer here</strong>: While recording this video I neglected to mention that you will need to properly configure your connection strings.&nbsp; I inadvertently used two data contexts pointed at the same database, you’ll want to NOT do that!</p> <h2>Building a Service Layer with ASP.NET Web API</h2> <p><a href="http://channel9.msdn.com/Events/Web-Camps/Vancouver/VWC4" target="_blank">Watch the video on Channel 9</a></p><iframe style="height: 270px; width: 480px" src="http://channel9.msdn.com/Events/Web-Camps/Vancouver/VWC4/player?w=480&amp;h=270" frameborder="0" scrolling="no"></iframe> <p>Enjoy!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1741</wp:post_id>
		<wp:post_date>2013-02-09 22:00:47</wp:post_date>
		<wp:post_date_gmt>2013-02-09 22:00:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web-campvancouver</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="web-api"><![CDATA[Web API]]></category>
	</item>
	<item>
		<title>System.Web.WebPages Aren&#8217;t the HtmlHelpers You&#8217;re Looking For&#8230;</title>
		<link>http://jameschambers.com/2013/02/system-web-webpages-arent-the-htmlhelpers-youre-looking-for/</link>
		<pubDate>Tue, 12 Feb 2013 17:47:29 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1791</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Had a bit of a frustrating morning, one of those times when your tools work against you by helping you out but cost you 35 minutes and an extra cup of coffee.&nbsp; And maybe a sanity check or two.&nbsp; The goal was to create a <em>very simple</em> HtmlHelper extension method.&nbsp; I kept getting the error:</p> <blockquote> <p>'System.Web.Mvc.HtmlHelper&lt;dynamic&gt;' does not contain a definition for 'MethodName' and the best extension method overload 'Namespace.MethodName(System.Web.WebPages.Html.HtmlHelper)' has some invalid arguments</p></blockquote> <p><strong><em>TL;DR</em></strong> – Check your using statements.&nbsp; If you’re sharp, the error’s quite indicative of what’s going on.</p> <p>Here’s another hint as to why this went south on me:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/02/image1.png" width="374" height="193"></p> <p>I was a little quick on the CTRL + . this morning, and since the first item in the list was System.Web.WebPages.Html, the tools didn’t help me out much at all.&nbsp; But hey…shouldn’t ReSharper be able to figure this one out for me and give me the light bulb of awesome?&nbsp; </p> <p><a href="http://jameschambers.com/wp-content/uploads/2013/02/image2.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/02/image_thumb1.png" width="396" height="97"></a></p> <p>I digress…</p> <p>Regardless of trying to put using statements in my views for my namespace, or adding the namespace to my web.config in the views folder, the problem was I had this guy:</p><pre class="csharpcode"><span class="kwrd">using</span> System.Web.WebPages.Html;</pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>…but I really wanted this guy:</p><pre class="csharpcode"><span class="kwrd">using</span> System.Web.Mvc;</pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Fixing that using in the top of my helper class resolved the issue, as now I was actually targeting the proper HtmlHelper class, in the correct namespace, that is being used by my views.&nbsp; Hope this helps someone else out there as well.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1791</wp:post_id>
		<wp:post_date>2013-02-12 17:47:29</wp:post_date>
		<wp:post_date_gmt>2013-02-12 17:47:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>system-web-webpages-arent-the-htmlhelpers-youre-looking-for</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="extension-methods"><![CDATA[Extension Methods]]></category>
		<category domain="post_tag" nicename="htmlhelper"><![CDATA[HtmlHelper]]></category>
		<category domain="post_tag" nicename="razor"><![CDATA[Razor]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208531]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39451</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel]]></wp:comment_author>
			<wp:comment_author_email>dan@danieltharris.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.mydigitalmedia.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>213.205.227.23</wp:comment_author_IP>
			<wp:comment_date>2015-02-01 21:30:36</wp:comment_date>
			<wp:comment_date_gmt>2015-02-01 21:30:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,

Thanks for the post, I'm having a related problem in that I can't seem to make System.Web.WebPages.Html go away.

If I add a using statement for System.Web.Mvc I get a message that HtmlHelper is ambiguous, as it's in both namespaces. I just can't see where it's getting the WebPages version of HtmlHelper from - I created a clean MVC project to see how the web.configs are setup out of the box.

I can't see anything in my existing project that's different (other than the version of MVC I'm using). Do you have any tips for ensuring the WebPages version is not picked up at all in my cshtml files? Any help would really be appreciated.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812736]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bootstrap Icon Classes as Strings</title>
		<link>http://jameschambers.com/2013/02/bootstrap-icon-classes-as-strings/</link>
		<pubDate>Sat, 23 Feb 2013 21:52:33 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1801</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m working on the <a href="https://github.com/erichexter/twitter.bootstrap.mvc" target="_blank">Twitter.Bootstrap.Mvc</a> package with <a href="https://twitter.com/ehexter" target="_blank">Eric Hexter</a> and one of the things that we’re going to be doing is templating around forms and controls as an extension to the <a href="https://github.com/erichexter/NavigationRoutes" target="_blank">NavigationRoutes</a> project that we’ve broken out.&nbsp; We’re going to be adding support to include automatic prepending/appending of icons to known form elements. </p> <p>This has led me to break out an old class I had created a while ago which exposed all the Glyphicons used in Twitter.Bootstrap as strings.&nbsp; I just created the gist (located <a href="https://gist.github.com/MisterJames/5021502" target="_blank">here</a>) which looks something like this:</p><script src="https://gist.github.com/MisterJames/5021502.js"></script> <p>It’s nothing terribly complicated, but it might help if you don’t want to sling the code yourself.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1801</wp:post_id>
		<wp:post_date>2013-02-23 21:52:33</wp:post_date>
		<wp:post_date_gmt>2013-02-23 21:52:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bootstrap-icon-classes-as-strings</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3820827143]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easily Build A Time Selector</title>
		<link>http://jameschambers.com/2013/03/easily-build-a-time-selector/</link>
		<pubDate>Wed, 13 Mar 2013 01:40:05 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1861</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’m working on a project where I need the user to select a time in 24 hour format.&nbsp; It would have taken me a couple of minutes to punch out the lines to build a select option for each of the items that were to appear in the drop down list, but I elected to use the Enumerable.Range method instead and build the list dynamically.</p> <p><a href="http://jameschambers.com/wp-content/uploads/2013/03/image.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/03/image_thumb.png" width="420" height="333"></a></p> <p>Why approach it this way?&nbsp; Well, if the requirements change, for example, and I need to change that to every 10 minutes instead of every 30 minutes, I don’t need to go and write another 96 lines of code. All I have to do is change the call the select projection where I compute the minutes (right now at the top and bottom of the hour).</p> <h2>A Picture is Worth Zero Lines of Code. Apparently.</h2> <p>So…I’m getting flack either way…either I post a code-image or I post a Gist. With a Gist, RSS readers can’t render the code. If I post an image, <em>no one</em> can copy and paste. So, there’s the image for you in your RSS readers, and here’s the Gist for those copy and paste aficionados.</p><script src="https://gist.github.com/MisterJames/5148675.js"></script> <h2>Breaking Down the Code</h2> <p>This is actually more verbose than it needs to be but it makes it a little easier to walk through it.&nbsp; The first two statements are simply capturing some integer values to represent the hours and minutes that I want to render.</p><pre class="csharpcode"><p>    IEnumerable&lt;<span class="kwrd">int</span>&gt; hours =
        Enumerable.Range(0, 24);

    IEnumerable&lt;<span class="kwrd">int</span>&gt; minutes =
        Enumerable.Range(0, 2)</p><p>          .Select(x =&gt; x * 30);</p></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>The call to Enumerable.Range takes two parameters: the first is where to start counting and the second is how many steps to take.&nbsp; In the second statement I am also projecting the minutes out by multiplying them by 30. If I wanted, instead to have the list include 6 intervals on the 10, I would change the code to the following:</p><pre class="csharpcode">    IEnumerable&lt;<span class="kwrd">int</span>&gt; minutes =
        Enumerable.Range(0, 6)
        .Select(x =&gt; x * 10);</pre>
<p>All that’s left to do is build our strings.&nbsp; We’re going to loop over our hours, and then format those intro a string along with each of the minutes that we’ve projected into our list:</p><pre class="csharpcode">    List&lt;<span class="kwrd">string</span>&gt; timeOptions = <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;();

    <span class="kwrd">foreach</span> (var hour <span class="kwrd">in</span> hours)
    {
        <span class="kwrd">foreach</span> (var minute <span class="kwrd">in</span> minutes)
        {
            timeOptions.Add(<span class="kwrd">string</span>.Format(<span class="str">"{0}:{1:00}"</span>, hour, minute));
        }
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
That’s it! The timeOptions variable now contains a list of any of the valid options we want our user to select from. You can now easily use this collection to build a drop down list for whatever client you’re building for. 
<p>&nbsp;</p>
<p>Want the condensed version? Check here: <a href="https://gist.github.com/MisterJames/5148715" target="_blank">Build a list of valid times</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1861</wp:post_id>
		<wp:post_date>2013-03-13 01:40:05</wp:post_date>
		<wp:post_date_gmt>2013-03-13 01:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>easily-build-a-time-selector</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[Linq]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3840728354]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Updating Data in CouchDb from c#/Asp.Net Mvc</title>
		<link>http://jameschambers.com/2013/04/updating-data-in-couchdb-from-casp-net-mvc/</link>
		<pubDate>Thu, 18 Apr 2013 14:30:23 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1901</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of my repositories is working against the REST interface of a CouchDb set of data.&nbsp; Reads have been awesome, and the “Paste JSON as classes” feature of Visual Studio 2012 makes getting POCOs up and running a treat.</p> <p>However I ran into the following error doing a POST to update a document in the database:</p> <p align="left"><font face="Lucida Console">couchdb {"error":"bad_request","reason":"Referer header required."}</font></p> <p>For anyone working in the REST space, this will likely be an error you would never run into as you have a great handle on your HTTP verbs.&nbsp; For us crossover guys – especially relational database, Asp.Net guys – this is a little harder to figure out what is going on.</p> <p>I was fortunate enough to have had a conversation the other day with our partner on the project who had mentioned that we need to remember to keep our PUTs and POSTs in order.&nbsp; When I saw the “bad request” message above, I knew what I was doing wrong, especially after having a great conversation about REST with <a href="https://twitter.com/darrel_miller" target="_blank">Darrel Miller</a> earlier this year.</p> <p>When a document exists in CouchDb you send updates to the document URL with a PUT. To create a new entry, you use a POST to the document container and CouchDb will determine the newly created item’s URL.</p> <p>Here is a generic method to update a document from c#:</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/04/image.png" width="513" height="415"></p> <p>Via Gist:</p><script src="https://gist.github.com/MisterJames/5413118.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1901</wp:post_id>
		<wp:post_date>2013-04-18 14:30:23</wp:post_date>
		<wp:post_date_gmt>2013-04-18 14:30:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>updating-data-in-couchdb-from-casp-net-mvc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="couchdb"><![CDATA[CouchDb]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781207241]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34041</wp:comment_id>
			<wp:comment_author><![CDATA[Evi]]></wp:comment_author>
			<wp:comment_author_email>info@skitsanos.com</wp:comment_author_email>
			<wp:comment_author_url>http://skitsanos.com</wp:comment_author_url>
			<wp:comment_author_IP>195.12.52.18</wp:comment_author_IP>
			<wp:comment_date>2013-04-21 08:03:05</wp:comment_date>
			<wp:comment_date_gmt>2013-04-21 08:03:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is a full blown CouchDB .NET API library that you can grab from <a>https://code.google.com/p/skitsanoswdk/</a> It is actually the same lib that powers Kanapes IDE (<a href="http://kanaeside.com" rel="nofollow">http://kanaeside.com</a>)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036811780]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Incorrectly Specified Targets File Causes Grief When Opening Solutions in Multiple Versions of Visual Studio</title>
		<link>http://jameschambers.com/2013/09/incorrectly-specified-targets-file-causes-grief-when-opening-solutions-in-multiple-versions-of-visual-studio/</link>
		<pubDate>Mon, 09 Sep 2013 00:52:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1931</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Working with solutions under different versions of Visual Studio is a welcome feature that has, for the most part, gone very smoothly for me.&nbsp; There are some common sense environmental limitations and the ability to open projects in different versions of VS doesn't save you from missing tools (I use RazorGenerator, for example), but otherwise it's been a treat.</p> <p>However, last night I got snagged for about 20 minutes when I ran into the following error when trying to open a project:</p> <blockquote> <p>The imported project "C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets" was not found. Confirm that the path in the declaration is correct, and that the file exists on disk.</p></blockquote> <p>Without getting too deep into the details (which you <a href="http://sedodream.com/2012/08/19/VisualStudioProjectCompatabilityAndVisualStudioVersion.aspx">can read here</a>), Visual Studio injects some properties to your project file in order to maintain compatibility of your project in different versions of VS. In my case, environmentally, my system wasn't configured in a way that was compatible with the properties that were created in the process of opening the project originally.&nbsp; The solution was to simply remove the following from the project file:</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">PropertyGroup</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">VisualStudioVersion</span> <span class="attr">Condition</span><span class="kwrd">="'$(VisualStudioVersion)' == ''"</span><span class="kwrd">&gt;</span>10.0<span class="kwrd">&lt;/</span><span class="html">VisualStudioVersion</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">VSToolsPath</span> <span class="attr">Condition</span><span class="kwrd">="'$(VSToolsPath)' == ''"</span><span class="kwrd">&gt;</span>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)<span class="kwrd">&lt;/</span><span class="html">VSToolsPath</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">PropertyGroup</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h3>Is This a Miss?</h3>
<p>I was a little frustrated by the process, especially because the error, while entirely accurate, couldn't give me more details on how to fix it. Without some digging online and coming across Sayed's blog, I wouldn't have been able to resolve this.</p>
<p>In situations like this, I don't want to have to fight my tools, and I'm including the code my tools generate as "tools" as well. A very simple fix would be to also insert a comment into the project file along with the property group describing the intent and perhaps a KB article link to give details on the subject. </p>
<h3>Why Did You Run Into This?</h3>
<p>I think it's easy to see how this could happen in my scenario: I have multiple laptops with multiple OS's running multiple versions of IDE's. The OS and the IDE are sometimes betas or otherwise advance copies. My projects are created and opened in any combination of these. That said, I was unable to recreate this problem on Win7/8 using VS2010/2012.</p>
<h3>Wrapping Up...</h3>
<p>It seems that removing this element from the csproj was enough to satisfy the IDE. There are other solutions, such as copying in valid targets files from other working environments. As I'm using Visual Studio 2012 exclusively on this project going forward, removing the VisualStudioVersion and VSToolsPath properties from my project file is a solution that worked for me.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1931</wp:post_id>
		<wp:post_date>2013-09-09 00:52:00</wp:post_date>
		<wp:post_date_gmt>2013-09-09 00:52:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>incorrectly-specified-targets-file-causes-grief-when-opening-solutions-in-multiple-versions-of-visual-studio</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="visual-studio-2010"><![CDATA[Visual Studio 2010]]></category>
		<category domain="post_tag" nicename="visual-studio-2012"><![CDATA[Visual Studio 2012]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3902402583]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Troubleshooting 400.x and 500 Errors for WCF OData Service Deployments</title>
		<link>http://jameschambers.com/2013/11/troubleshooting-400-x-and-500-errors-for-wcf-odata-service-deployments/</link>
		<pubDate>Mon, 04 Nov 2013 04:14:23 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=1981</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote> <p>Running into 400 &amp; 500 error messages for WCF OData Services can be tricky to get past and even harder to sort through the red herrings out there. Here’s a few tips to attack any error messages you might run into.</p></blockquote> <p>Sweet! All done your spanky new OData services using Entity Framework in the back end and you’re feeling pretty awesome because a) it was stupid-easy to get going, and, #2 you are now the happy owner of a JSON data source with querystring filtering capabilities. Only trouble is, that darned thing won’t tick on your deployment server.</p> <p>Don’t sweat it. There’s a dozen things that can sideways, but they’re all easy to fix.</p> <h2>Check Your Pre-Requisites</h2> <p>If you’re going to host over HTTP, you’ll obviously have IIS installed, but make sure you light up all the right pieces. You’ll need .Net 3.0 and 4.5 installed and enabled. If you want HTTP activation, that may not be on by default.&nbsp; This <a href="http://msdn.microsoft.com/en-us/library/ms731053.aspx">MSDN article will get you there</a>.</p> <h2>Try the Catch-Alls</h2> <p>Some of the errors you’ll run into can most easily be solved by using what’s given to you for free.&nbsp; Check the Windows Event logs and drill into the details</p> <p>If you’re not seeing much fruit from those efforts, you can also configure your service to use the verbose mode of error detail. This will likely reveal the juiciest information and is as easy as adding one line of code to your InitializeService method, as follows:</p><pre class="csharpcode">config.UseVerboseErrors = <span class="kwrd">true</span>;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>Double-Check Your Configuration</h2>
<p>If you’ve moved from dev to test or prod, you’ll need to make sure you update your connection strings.&nbsp; Nestled in several of those 400 error message are details about a problem connecting to the database or other insight related to your credentials or connections through EF in your EDMX.</p>
<h2>Some Low Hanging Fruit</h2>
<p>I’ve run into 500’s a couple times, no information, just “internal server error”. This was because the application pool wasn’t set up for the correct version of .Net. Use the Advanced settings for your site in IIS to choose the app pool, or navigate IIS to the Application Pools and create a new one that matches the version of .Net for your service.</p>
<p>If you get 404.3, this is likely related to missing either the correct .Net components or the WCF Activation components (see <a href="http://msdn.microsoft.com/en-us/library/ms731053.aspx">MSDN article</a>).</p>
<p>401’s that I’ve seen have been permissions related, naturally as they’re 401’s. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2013/11/wlEmoticon-smile.png"> Check your directory permissions if you’re doing something on the file system, and your DB credentials in your web.config. Remember that those EDMX’s have some <a href="http://msdn.microsoft.com/en-us//library/cc716756.aspx">funky formatting</a>.</p>
<h2>Learn More</h2>
<p>If you’ve got a night to invest in yourself I highly recommend reading the deeper bits on WCF Data Services. If you get serious, you’ll want to look into:</p>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/dd728284(v=vs.110).aspx">Securing</a> services, and</li>
<li><a href="http://msdn.microsoft.com/en-us/library/dd744842(v=vs.110).aspx">Interceptors</a> to implement business logic.</li></ul>
<p>An indispensible tool in your kit is <a href="http://www.linqpad.net/">LINQPad</a> – a must have for working with WCF OData.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1981</wp:post_id>
		<wp:post_date>2013-11-04 04:14:23</wp:post_date>
		<wp:post_date_gmt>2013-11-04 04:14:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>troubleshooting-400-x-and-500-errors-for-wcf-odata-service-deployments</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="odata"><![CDATA[OData]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="web-development"><![CDATA[Web Development]]></category>
		<category domain="post_tag" nicename="web-services"><![CDATA[Web Services]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3782028005]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SignalR Resources</title>
		<link>http://jameschambers.com/2013/11/signalr-resources/</link>
		<pubDate>Wed, 06 Nov 2013 14:00:57 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2031</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I’ve had the pleasure over the last few weeks of carrying on the discussion around real time web with folks in Calgary, Kitchener/Waterloo and most recently Saskatoon. It’s clear, from the questions that are coming up, that there is a real desire to help improve the user experience in mobile <em>and</em> business apps – it’s not just about web.</p> <p>I’ve put together some of the resources that I presented as well as the code that I wrote during the sessions. Here they are:</p> <ul> <li>The source for SignalR basics – <a href="http://asp.net/signalr">http://asp.net/signalr</a></li> <li>Follow the SignalR tribe on the Twitter – <a href="https://twitter.com/SignalR">@SignalR</a></li> <li>Done your homework and still needing help? – <a href="http://jabbr.net">http://jabbr.net</a> (join the SignalR room)</li> <ul> <li>Realtime forms project – <a title="https://github.com/MisterJames/CollidR/" href="https://github.com/MisterJames/CollidR/">https://github.com/MisterJames/CollidR/</a> and <a href="http://www.youtube.com/watch?v=WRGIUJaChyI">intro video</a> </li> <li>Samples from the session - <a href="https://github.com/MisterJames/SignalRTalkDemo">https://github.com/MisterJames/SignalRTalkDemo</a>&nbsp;</li></ul></ul> <p>A big thanks to the user groups and to <a href="http://prairiedevcon.com/">Prairie Dev Con</a> for having me out, and thanks to everyone who joined in the conversation!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2031</wp:post_id>
		<wp:post_date>2013-11-06 14:00:57</wp:post_date>
		<wp:post_date_gmt>2013-11-06 14:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>signalr-resources</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="prairiedevcon"><![CDATA[PrairieDevCon]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<category domain="post_tag" nicename="signalr"><![CDATA[SignalR]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3783063851]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Love for JavaScript from IntelliSense &#8211; Featured on MSDN</title>
		<link>http://jameschambers.com/2013/11/more-love-for-javascript-from-intellisense-featured-on-msdn/</link>
		<pubDate>Thu, 07 Nov 2013 17:36:24 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2061</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Microsoft has improved file changes and script tracking and added tooling to Visual Studio 2013. You can read more about it on my article on MSDN, where I was honored to be selected for a guest blog post.</p> <p><a href="http://t.co/2cL0DlQxCq" target="_blank"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/11/image.png" width="559" height="93"></a></p> <p>Check out the <a href="http://t.co/2cL0DlQxCq" target="_blank">full article</a> and see how VS 2013 gives you more options and tools for keeping your IntelliSense in sync.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2061</wp:post_id>
		<wp:post_date>2013-11-07 17:36:24</wp:post_date>
		<wp:post_date_gmt>2013-11-07 17:36:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-love-for-javascript-from-intellisense-featured-on-msdn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[4176113271]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Working With IAuthenticationFilter in the MVC 5 Framework</title>
		<link>http://jameschambers.com/2013/11/working-with-iauthenticationfilter-in-the-mvc-5-framework/</link>
		<pubDate>Tue, 19 Nov 2013 23:36:24 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2091</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote> <p>When implementing a custom authentication filter it’s important to know where in the pipeline your filter is invoked; if your purpose is to prevent unauthorized access to a controller action, be sure to implement your credentials verification early enough in the process. This post walks you through the creation of a basic authentication filter and shows the correct method in which to do the check. Good news: it’s easy!</p></blockquote> <p>We can learn a lot about the new IAuthenticationFilter interface by implementing one and seeing where it fits in the MVC pipeline.&nbsp; Before we get started, let’s first remember that authentication and authorization are separate concerns in your application, so this filter is a welcome little addition. </p> <p>Authentication is where a user provides credentials to access a resource, whereas authorization allows access to particular resources based on properties of the user’s identity. In previous versions of the MVC Framework we had the AuthorizeAttribute, which could be used to cause a redirect if you were unauthenticated, but it’s also true that it blurred the lines a little around auth &amp; auth.&nbsp; </p> <h2>Creating a Basic Do-Nothing Filter</h2> <p>Now that Authentication can more easily stand alone, the process to implement it is pretty simple:</p> <ul> <li>Add a class to your project called NewAuthenticationFilter </li> <li>Inherit from ActionFilterAttribute and IAuthenticationFilter</li> <li>Implement the interface (click on the interface name and press Ctrl+. and hit enter)</li> <li>Throw a couple of debug statements in so that we can set breakpoints, remembering to add the diagnostics namespace to your using statements</li></ul> <p>Just a few quick side notes on the above code. </p> <ul> <li>I usually stick my filters into a Filters folder in my project (or into a separate DLL project to keep them reusable) to try to keep things clean</li> <li>We inherit from ActionFilterAttribute so that we can use it as an attribute on our actions; just using IAuthenticationFilter isn’t enough</li> <li>You can implement interface members by clicking on the interface name and pressing Ctrl+. and then tapping Enter</li></ul> <p>Your final class should look like the following:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> NewAuthenticationFilter: ActionFilterAttribute, IAuthenticationFilter
{
    <span class="kwrd">public</span> <span class="kwrd">void</span> OnAuthentication(AuthenticationContext filterContext)
    {
        Debug.WriteLine(<span class="str">"OnAuthentication"</span>);
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> OnAuthenticationChallenge(AuthenticationChallengeContext filterContext)
    {
        Debug.WriteLine(<span class="str">"OnAuthenticationChallenge"</span>);
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>With that in place, go the the Index action on the HomeController and add the attribute to the method. This will let the events fire as the request is processed. Also, set a breakpoint on the return statement. Your action should look like this:</p><pre class="csharpcode">[NewAuthenticationFilter]
<span class="kwrd">public</span> ActionResult Index()
{
    <span class="kwrd">return</span> View();
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Great! Let's hit F5 and see what happens:</p>
<ul>
<li>The OnAuthentication method is invoked, press F5 to continue</li>
<li>The action is executed, press F5 to continue</li>
<li>The OnAuthenticationChallenge is called last</li></ul>
<p>Perfect, some of how we can use this is now becoming apparent. First of all, it's important to note that the action can be fully executed before the OnAuthenticationChallenge is executed. This means that if you're intending on preventing any DB writes or calls to something mutable or executable during the action, you'll need to implement logic in OnAuthentication method to prevent this (we’ll get to that in a minute).</p>
<p>Second, both methods allow you to evaluate request information and set properties of the response, such as the Result (an ActionResult), but remember that the Action itself has the ability to set some of these properties and might overwrite what you set up in OnAuthentication (which, again, is called before the index action method in our example).</p>
<p>Finally, remember that this is just one part of the pipeline. The Result of the action hasn't yet been executed when OnAuthenticationChallenge is complete, so something like a View hasn't been rendered, or a FileResult that would load data from disk hasn't yet been called.</p>
<h2>But Wait! What is This All For?</h2>
<p>I’m so glad you asked. Here’s the thing…Debug statements aren’t that interesting and don’t really show you how this can come into context. The user passes through the above code and our action is executed, as is our result, so the user gets to see whatever they requested come back in their browser. Let’s update our code and take another look at how our application might use this.</p>
<p>An authentication filter doesn’t really do much for us if it’s not, oh, say, <em>filtering for authentication</em>, so let’s start by checking to see if our user is actually presenting some kind of credentials. </p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">void</span> OnAuthentication(AuthenticationContext filterContext)
{
    <span class="kwrd">if</span> (!filterContext.Principal.Identity.IsAuthenticated)
        filterContext.Result = <span class="kwrd">new</span> HttpUnauthorizedResult();
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This is the most basic form of a check. “The identity of the principal is not authenticated, so set the result to unauthorized, an HTTP 401 status code.” Now we’re cooking with peanut oil and our 401 will not let the user access the action until they satisfy whatever arguments you’d like them to fulfill.&nbsp; To that end, you don’t <em>only</em> need to use the principal identity, you can use whatever you like, such as a tie-in to a third-party SSO provider in a mixed identity environment.</p>
<p>Next, we have to deal with the fact that someone who is unauthenticated tried to access a resource we were protecting. The way the Authorize attribute worked was just by letting that 401 we set above flow through the framework. In an MVC application the default mechanism for authentication is Forms, for which there is a default account controller and corresponding views added to our project. Thus, by simply letting the user “fall through” here, they will end up at the login page.&nbsp; For the following code in your challenge method:</p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">void</span> OnAuthenticationChallenge(AuthenticationChallengeContext filterContext)
{
    <span class="rem">// redirect the user to some form of log in</span>
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>…the user will keep that 401 state through, and will ultimately be bounced back to the site’s login page.</p>
<p><a href="http://jameschambers.com/wp-content/uploads/2013/11/image1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/11/image_thumb.png" width="367" height="276"></a></p>
<p>So, in it’s simplest form as we’ve done above, authentication filters give us a way to remove Authorize attributes (separation of concerns) and mimic the behavior we were previously leveraging to force users to log in. But there’s more, right?</p>
<h2>Practical Uses of Our New Custom Authentication Bestie</h2>
<p>We get pretty good support with the Authorize attribute and our ability to create custom filters already, but if we agree that separation of concerns is important, we get a few benefits with the new Authentication filters and the timing with which their methods are fired.</p>
<h3></h3>
<h3>Isolated Custom Authentication</h3>
<p>One of the first possibilities is that you can now setup an action or controller to have a custom authentication mechanism, rather than using whatever the default is for the site. If you have an external provider (perhaps something legacy) that you can proxy credentials to, this might be one way you could approach this.</p>
<h3>Customizing UI For Login</h3>
<p>There may be some cases where you want to do something like augment credentials, or perhaps configure part of the application, or even let users log in with a single-use code. OnAuthenticationChallenge lets you configure the result, so you can route the user to whatever view you like in your application.</p>
<h2></h2>
<h2>Things to Remember</h2>
<p>I actually don’t have a lot of caveats to suggest here, but perhaps the most important bit to remember is that if you IAuthenticationFilter.OnAuthenticate fall through without a 401, you’re letting the user into the action. Your OnAuthenticateChallenge will still fire, but remember from the breakpoints set above (when we were just spitting out debug lines) that the action <em>will</em> fire and your code <em>will </em>be executed. Logging the user in at this point happens after the invocation…a worst case scenario would be on a POST where an update is happening.</p>
<p>Finally, remember that Authentication wraps Authorization and action execution, and the Authenticate method precedes your first opportunity to interact with the request pipeline when you use ActionFilterAttribute inheritance on its own.</p>
<h2>Next Steps</h2>
<p>It’s pretty easy to try this out! Why not give the following a try?</p>
<ul>
<li>File –&gt; New –&gt; Project and give the exercise above a try</li>
<li>Think of other uses or scenarios where one could leverage this</li>
<li>Break out your custom authentication filters built on the old objects in older versions of the MVC Framework</li></ul>
<p>Happy coding!</p>
<p><em>Thanks to good friend <a href="https://twitter.com/Dave_Paquette" target="_blank">David Paquette</a> who reviewed and suggested updates on this post.</em></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2091</wp:post_id>
		<wp:post_date>2013-11-19 23:36:24</wp:post_date>
		<wp:post_date_gmt>2013-11-19 23:36:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-with-iauthenticationfilter-in-the-mvc-5-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="category" nicename="code-dive"><![CDATA[Code Dive]]></category>
		<category domain="post_tag" nicename="visual-studio-2013"><![CDATA[Visual Studio 2013]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781345241]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34791</wp:comment_id>
			<wp:comment_author><![CDATA[Friday Five - December 13, 2013 - The Microsoft MVP Award Program Blog - Site Home - MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/mvpawardprogram/archive/2013/12/13/friday-five-december-13-2013.aspx</wp:comment_author_url>
			<wp:comment_author_IP>157.56.75.175</wp:comment_author_IP>
			<wp:comment_date>2013-12-13 14:33:42</wp:comment_date>
			<wp:comment_date_gmt>2013-12-13 14:33:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] - Uploading data with HttpClient using a &quot;push&quot; model &nbsp; 4. ASP.NET MVP James Chambers - Working With IAuthenticationFilter in the MVC 5 Framework &nbsp; 5. Kinect MVP Joshua Blake - Kinect for Windows v2 dev kit unboxing [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34801</wp:comment_id>
			<wp:comment_author><![CDATA[Az IAuthenticationFilter használata | MolePlex]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://lpttlm.wordpress.com/2013/12/13/az-iauthenticationfilter-hasznalata/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.82.89</wp:comment_author_IP>
			<wp:comment_date>2013-12-13 20:34:48</wp:comment_date>
			<wp:comment_date_gmt>2013-12-13 20:34:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Az IAuthenticationFilter használata [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40881</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Diehl]]></wp:comment_author>
			<wp:comment_author_email>xhead.ca@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>164.154.110.65</wp:comment_author_IP>
			<wp:comment_date>2015-07-16 18:32:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-16 18:32:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[public class CustomAuthenticationFilter :
ActionFilterAttribute, IAuthenticationFilter

    {
        public void OnAuthentication(AuthenticationContext
filterContext)
        {
            if (!filterContext.Principal.Identity.IsAuthenticated)
filterContext.Result = new HttpUnauthorizedResult();
else
{
AddPersonClaim(filterContext.Principal.Identity);
AddTeamClaim(filterContext.Principal.Identity);
        }
}
Hi James,

Saleng pointed me to your blog post about this. 
 
We are using Windows authentication, and I want to add a couple of Claims to the Identity of the user when they are authenticated. Basically, we look up a couple of keys in a database based on their SID (AddPersonClaim) and what groups they belong to (AddTeamClaim).

 Is this the right place to do this? When a user first hits our website, I definitely want to add these claims. What about subsequent HttpRequests? Do the claims that I add here get included in some sort of state
so I don’t need to add the claims each time? Should I check to see if the claim exists before I add it? Maybe there’s a better place to add the claims earlier in the pipeline?
Mike Diehl]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2140149480]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40991</wp:comment_id>
			<wp:comment_author><![CDATA[James Chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url>http://jameschambers.com</wp:comment_author_url>
			<wp:comment_author_IP>206.45.228.82</wp:comment_author_IP>
			<wp:comment_date>2015-07-20 18:42:00</wp:comment_date>
			<wp:comment_date_gmt>2015-07-20 18:42:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mike! You're correct in thinking that they are durable for the session. Once the claim is added to the identity it will remain there until they log out or the session times out. In your filter, just do a check to see if the claim exists and short circuit out if it does.  Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>40881</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2140149480]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2147169768]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42001</wp:comment_id>
			<wp:comment_author><![CDATA[MVC Recommended Resources And Tutorials | open and free]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://17path.wordpress.com/2015/10/20/50-best-mvc-tutorial-resources/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.100.96</wp:comment_author_IP>
			<wp:comment_date>2015-10-20 09:27:04</wp:comment_date>
			<wp:comment_date_gmt>2015-10-20 09:27:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;]  Working With IAuthenticationFilter in ASP.NET MVC 5 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1445333225.191242;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Windows Azure Web Sites on MVA</title>
		<link>http://jameschambers.com/2013/12/windows-azure-web-sites-on-mva/</link>
		<pubDate>Wed, 04 Dec 2013 23:19:06 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2172</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The Windows Azure team has accelerated their deployment cadence, and to be honest, if you happened to look away for nine months, it’s like a whole ‘nother baby to deal with. For those not building solutions on WAWS, you’d be surprised at how much has changed, improved and increased in flexibility.</p> <p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/12/image.png" width="240" align="right" height="100"></p> <p>I’m privileged to get the chance to break it all down for you with <a href="https://twitter.com/tejaswiredkar" target="_blank">Tejaswi Redkar</a>, Director of Worldwide Communities at Microsoft. Join us live on Microsoft Virtual Academy on Thursday, December 12th (<a href="http://www.microsoftvirtualacademy.com/liveevents/windows-azure-web-sites-deep-dive-jump-start#?fbid=iakxSr9rHuj&amp;prid=ca_mvpjc&amp;mtag=MVP4038205" target="_blank">register here</a>).</p> <p>We’re bringing something to the table for everyone; for newcomers to WAWS you’ll get a peek at the Azure portal interface and gain a better understanding of the inner workings. Beyond the basic, we dive deep into everything from initial and continuous deployment right through to scaling your site up to support traffic growth. We also look at development <em>off</em> the .Net stack, including Node.js, and show you how to integrate with other aspects of Azure from your site.&nbsp; Here’s the day at a glance:</p> <ul> <li>Web Sites Overview</li> <li>Know Thy Tools</li> <li>Continuous Deployment</li> <li>Scaling and Configuration</li> <li>Go Live Checklist</li> <li>Case Studies – Scale and Deployment</li> <li>Lightning Round</li></ul> <p>Hope to catch you at the event…it’s free and easy to <a href="http://www.microsoftvirtualacademy.com/liveevents/windows-azure-web-sites-deep-dive-jump-start#?fbid=iakxSr9rHuj&amp;prid=ca_mvpjc&amp;mtag=MVP4038205" target="_blank">attend online</a>!<br></p> <ul> <p>&nbsp;</p></ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2172</wp:post_id>
		<wp:post_date>2013-12-04 23:19:06</wp:post_date>
		<wp:post_date_gmt>2013-12-04 23:19:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-azure-web-sites-on-mva</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[Asp.Net MVC]]></category>
		<category domain="post_tag" nicename="azure-websites"><![CDATA[Azure Websites]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="category" nicename="develop-meta"><![CDATA[Develop Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3787546747]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows Azure Web Sites - My MVA Recording Experience in Redmond</title>
		<link>http://jameschambers.com/2013/12/windows-azure-web-sites-my-mva-recording-experience-in-redmond/</link>
		<pubDate>Thu, 12 Dec 2013 05:45:00 +0000</pubDate>
		<dc:creator><![CDATA[james.chambers]]></dc:creator>
		<guid isPermaLink="false">http://jameschambers.com/?p=2251</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Today I had the pleasure and privilege of recording a session – 7 modules altogether – covering Windows Azure Web Sites with <a href="http://www.twitter.com/tejaswiredkar">Tejaswi Redkar</a>. The material was for a course <a href="http://www.microsoftvirtualacademy.com/liveevents/windows-azure-web-sites-deep-dive-jump-start#?fbid=iakxSr9rHuj&amp;prid=ca_mvpjc&amp;mtag=MVP4038205"><img style="float: right; display: inline" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/12/image.png" align="right"></a>provided by Microsoft Virtual Academy and recorded live in front of a virtual audience of nearly 1,000 folks from 82 countries around the world. MVA has over 1.5 million subscribers worldwide, so this was a big audience!</p> <p>I had excellent support from Sangeeta who lined up our session, a great time with Tej who co-presented with me, and tons of help and feedback from Danny and Garry who produced the whole event and gave us wonderful feedback throughout the whole day. It was a great time and I learned a ton in the process <em>about</em> the process and can’t wait for another opportunity to do another session.</p> <h2>Virtual Peeps are Awesome</h2> <p>I couldn’t believe the participation from the virtual audience! There were tweets going out almost all day and lots of activity in the chat room. This is a great way to learn, IMO, with other peers asking questions while the session is going on and some great experts on hand to field questions from the viewers while we shelled out the information on WAWS.</p> <p>Help from the audience came in all kinds of forms. When I asked folks to fill out a survey with me to demonstrate SignalR running in the cloud, we had over 200 responses!</p> <p><img title="survey" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="survey" src="http://jameschambers.com/wp-content/uploads/2013/12/survey.png" width="736" height="294"></p> <p>Even when I wasn’t asking for help, the viewers were sharp enough (and paying close enough attention!) to catch URLs that were being used and jump into the demos themselves. #Awesomesauce. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Smile" src="http://jameschambers.com/wp-content/uploads/2013/12/wlEmoticon-smile.png"></p> <p><a href="http://jameschambers.com/wp-content/uploads/2013/12/chat.png"><img title="chat" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="chat" src="http://jameschambers.com/wp-content/uploads/2013/12/chat_thumb.png" width="440" height="344"></a></p> <p>And when things went wrong – we only had one demo that didn’t work! – people were <em>still</em> giving me a hand <em>after</em> the session. I had a Node.js + Mongo DB setup that gave me a 500 when I deployed as one of the last demos of the day, but before I got back to the hotel, someone had found the cure and posted the details – refreshing the page! </p> <p><a href="http://jameschambers.com/wp-content/uploads/2013/12/todo.png"><img title="todo" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="todo" src="http://jameschambers.com/wp-content/uploads/2013/12/todo_thumb.png" width="260" height="235"></a></p> <h2>The Studio Staff Were a Treat to Work With</h2> <p>If you’ve seen me present live, you know I’m an animated speaker. It was all I could do to stay in my seat for 6 hours of content! Barry and Danny were the producers/recording engineers who executed the live production and, in a tight space with limited budget, did an awesome job of making Tej and I look like we knew what we were doing. They were a great feedback loop, giving advice, helping us make changes as we went through the day and keeping us on schedule.</p> <p>As presenters we got to use a couple of ginormous multi-touch screens and had to switch back and forth between the presentation and the slide deck, but Barry and Danny made it look good and I think we avoided blinking screens of fail for the whole day.</p> <h2>The Microsoft Campus is Pretty Darn Cool</h2> <p>Best part of the experience was walking around knowing that everyone there was smarter than me. Very humbling to get to mix with the folks that develop the tools upon which I make my bread and butter, so I soaked in as much as I could. Lunch at The Commons (actually, I think it was called The Mixer), a lap around the Visitor Center, a trip to the company store and of course getting into the recording studio in downtown Redmond.</p> <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://jameschambers.com/wp-content/uploads/2013/12/image1.png" width="593" height="341"></p> <p>The Commons (or Mixer?) is a collection of shops, services, food courts and lounge areas for people to relax. There was a live jazz band playing at one end of the building which was pretty cool, and a great selection of eats to choose from.</p> <p>I was really impressed by how serious they seemed to take environmental responsibility and even nutrition. The cafeteria I had breakfast at had “less” and “more” indicators for all the food items to help people make healthy choices, and everything that you used to eat – cups, lids, plates, even the utensils, were all compostable, and even the bags they went into were compostable. Cool stuff.&nbsp; </p> <p>And you get a sense about how global and how far reaching the company is. I come from a town of about 40,000 people; the MS Campus has over 40k <em>employees</em> working on the grounds, not counting contractors and visitors. One of the boardrooms that I was in was a designated global security/event response center, where I presume smart people dealing with serious issues might sometimes convene.&nbsp; People from all kinds of cultures and backgrounds are making cool things happen and including folks like me. Pretty darn cool.</p> <h2></h2> <p>If you’re really into cars, I suppose visiting the factory where yours was built would be pretty epic. That’s pretty much what I experienced here on this trip, and I can’t wait to come back. Plus, it’s so warm here (compared to the –40 weather I came from!).</p> <p>Once again, thanks to all who participated in the day’s events, helped with the demos online and made the day a success. I hope you all get a chance to bring some awesome back to your team, wherever you work.</p> <p>If you want to track down the session on the MVA website, <a href="http://www.microsoftvirtualacademy.com/liveevents/windows-azure-web-sites-deep-dive-jump-start#?fbid=iakxSr9rHuj&amp;prid=ca_mvpjc&amp;mtag=MVP4038205">check it out here</a>.</p> <p>Cheers, and happy coding!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2251</wp:post_id>
		<wp:post_date>2013-12-12 05:45:00</wp:post_date>
		<wp:post_date_gmt>2013-12-12 05:45:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-azure-web-sites-my-mva-recording-experience-in-redmond</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure-websites"><![CDATA[Azure Websites]]></category>
		<category domain="category" nicename="beyond-code"><![CDATA[Beyond Code]]></category>
		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[Microsoft]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3781208553]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34891</wp:comment_id>
			<wp:comment_author><![CDATA[SRIRAM.RAMAPRAGADA@GMAIL.COM]]></wp:comment_author>
			<wp:comment_author_email>SRIRAM.RAMAPRAGADA@GMAIL.COM</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>10.97.230.6</wp:comment_author_IP>
			<wp:comment_date>2013-12-23 21:05:56</wp:comment_date>
			<wp:comment_date_gmt>2013-12-23 21:05:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi James,

I am unable to build MVC bootstrap using VS2010, on instaled MVC 4.0  template.

I know which is not related to this topic.If possible coud you help me out.

Thanks,
Ram]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812746]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36841</wp:comment_id>
			<wp:comment_author><![CDATA[james.chambers]]></wp:comment_author>
			<wp:comment_author_email>james@jameschambers.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>206.45.140.40</wp:comment_author_IP>
			<wp:comment_date>2014-07-20 02:50:37</wp:comment_date>
			<wp:comment_date_gmt>2014-07-20 02:50:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sriram, I'm sorry you're unable to get this going. Perhaps check out my 30 day series on MVC and Bootstrap that I'm running? Or send me a more specific question and I'll do my best to help. Cheers,
-jc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>34891</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812746]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[2036812856]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41751</wp:comment_id>
			<wp:comment_author><![CDATA[Look at the Review of this Presenter in Live Recording Studio of MVA | Simple Concepts]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://simpleconcepts.azurewebsites.net/2015/10/01/look-at-the-review-of-this-presenter-in-live-recording-studio-of-mva/</wp:comment_author_url>
			<wp:comment_author_IP>23.97.57.24</wp:comment_author_IP>
			<wp:comment_date>2015-10-01 15:31:56</wp:comment_date>
			<wp:comment_date_gmt>2015-10-01 15:31:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] http://jameschambers.com/2013/12/windows-azure-web-sites-my-mva-recording-experience-in-redmond/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443713516.6943951;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
